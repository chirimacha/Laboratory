bugpos$pred1 <- predict(line1a, newsa, na.rm=TRUE)
bugpos$pred2 <- predict(line1b, newsb, na.rm=TRUE)
# Finding whether the vertical line has positive or negative slope
bugpos$TPX <- coordtaba$TPX[tn]
bugpos$BPX <- coordtaba$BPX[tn]
# Indicate the tray in data table.
bugpos$trayn <- tn
# Return the data table.
return(bugpos)
}
# Now run this subfunction over the 6 dishes
# e.g. pdt1 = bugpos for tray 1, location, regardless of camera 1 or camera 2
pdt1 <-Coords(video, pmaska, nbga1, coordtaba=coordtab, tn=1,
threshold=thresholda, maxDista=maxDistb)
pdt2 <-Coords(video, pmaskb, nbga2, coordtaba=coordtab, tn=2,
threshold=thresholda, maxDista=maxDistb)
pdt3 <-Coords(video, pmaskc, nbga3, coordtaba=coordtab, tn=3,
threshold=thresholda, maxDista=maxDistb)
pdt4 <-Coords(video, pmaskd, nbga4, coordtaba=coordtab, tn=4,
threshold=thresholda, maxDista=maxDistb)
pdt5 <-Coords(video, pmaske, nbga5, coordtaba=coordtab, tn=5,
threshold=thresholda, maxDista=maxDistb)
pdt6 <-Coords(video, pmaskf, nbga6, coordtaba=coordtab, tn=6,
threshold=thresholda, maxDista=maxDistb)
# Bind All the tables
MasterTab<-rbind(pdt1, pdt2, pdt3, pdt4, pdt5, pdt6)
# Indicate which camera this is
MasterTab$camera <- cam
# Indicate which repetition
MasterTab$rep <- rep
MasterTab$trial <- trial
MasterTab$position <- (MasterTab$trayn)+(6*(cam-1))
#Output as single data table
return(MasterTab)
}
######################################################
######## Running VidAnalysis for all videos ##########
#### Repetition 1
DR1T1C1 <- VidAnalysis(video=R1T1C1, bg= bga, coordtab=CoTbR1T1C1,
thresholda=25, maxDistb=1000, cam=1, rep=1, trial=1)
#write.csv(DR1T1C1, "Rep1Trial1Cam1RawData.csv")
DR1T1C2 <- VidAnalysis(video=R1T1C2, bg= bgb, coordtab=CoTbR1T1C2,
thresholda=30, maxDistb=1000, cam=2, rep=1, trial=1)
#write.csv(DR1T1C2, "Rep1Trial1Cam2RawData.csv")
DR1T2C1 <- VidAnalysis(video=R1T2C1, bg= bgc, coordtab=CoTbR1T2C1,
thresholda=25, maxDistb=1000, cam=1, rep=1, trial=2)
#write.csv(DR1T2C1, "Rep1Trial2Cam1RawData.csv")
## Repetition 2
DR2T1C1 <- VidAnalysis(video=R2T1C1, bg= bgaRB, coordtab=CoTbR2T1C1,
thresholda=25, maxDistb=1000, cam=1, rep=2, trial=1)
?intersect
d = 5
for(i in 1:10)
{
nam <- paste("A", i, sep = "")
assign(nam, rnorm(3)+d)
}
?sep
??sep
?paste
View(A1)
?rnorm
for(i in 1:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("R", i, "T", j, "C", c, sep = "")
assign(nam, rnorm(3)+d)
}
}
}
repetition = 1
trial = 6
camera = 2
for(i in 1:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("Rep", i, "Trial", j, "Cam", c, sep = "")
assign(nam, readVid("Trial"+j+"Cam"+k+"mp4")
}
}
}
for (i in 1:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("Rep", i, "Trial", j, "Cam", c, sep = "")
assign(nam, paste(readVid("Trial"+j+"Cam"+k+"mp4"))
}
}
}
for (i in 1:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("Rep", i, "Trial", j, "Cam", c, sep = "")
assign(nam, readVid(paste("Trial"+j+"Cam"+k+"mp4"))
}
}
}
for (i in 1:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("Rep", i, "Trial", j, "Cam", c, sep = "")
assign(nam, readVid(paste("Trial",j,"Cam",k,"mp4", sep = ""))
}
}
}
for (i in 1:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("Rep", i, "Trial", j, "Cam", c, sep = "")
assign(nam, readVid(paste("Trial",j,"Cam",k,"mp4", sep = ""))
}
}
}
for (i in 1:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("Rep", i, "Trial", j, "Cam", k, sep = "")
assign(nam, readVid(paste("Trial", j, "Cam", k, "mp4", sep = ""))
}
}
}
repetition = 1
trial = 6
camera = 2
for (i in 1:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("Rep", i, "Trial", j, "Cam", k, sep = "")
assign(nam, readVid(paste("Trial", j, "Cam", k, "mp4", sep = ""))
}
}
}
for (i in 1:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("Rep", i, "Trial", j, "Cam", k, sep = "")
video_name <- paste("Trial", j, "Cam", k, ".mp4", sep = "")
assign(nam, readVid(video_name)
}
}
}
for (i in 1:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("Rep", i, "Trial", j, "Cam", k, sep = "")
video_name <- paste("Trial", j, "Cam", k, ".mp4", sep = "")
assign(nam, readVid(video_name))
}
}
}
for (i in 2:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("R", i, "T", j, "C", k, sep = "")
video_name <- paste("R", i, "T", j, "C", k, ".mp4", sep = "")
assign(nam, readVid(video_name))
}
}
}
remove(Rep1Trial1Cam1)
remove(Rep1Trial1Cam2)
remove(Rep1Trial2Cam1)
remove(Rep1Trial2Cam2)
remove(Rep1Trial3Cam1)
remove(Rep1Trial3Cam2)
remove(Rep1Trial4Cam1)
remove(Rep1Trial4Cam2)
remove(Rep1Trial5Cam2)
remove(Rep1Trial5Cam1)
remove(Rep1Trial6Cam1)
remove(Rep1Trial6Cam2)
remove(R1T1C1)
remove(R1T1C2)
remove(R1T2C2)
remove(R1T2C1)
remove(R1T3C1)
remove(R1T3C2)
remove(R1T4C2)
remove(R1T4C1)
remove(R1T5C1)
remove(R1T5C2)
remove(R1T6C2)
remove(R1T6C1)
for (i in 2:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("R", i, "T", j, "C", k, sep = "")
video_name <- paste("R", i, "T", j, "C", k, ".mp4", sep = "")
assign(nam, readVid(video_name))
}
}
}
remove(R1T1C1)
> remove(R1T1C2)
> remove(R1T2C2)
> remove(R1T2C1)
> remove(R1T3C1)
> remove(R1T3C2)
> remove(R1T4C2) remove(R1T4C1)
remove(R1T5C1)
remove(R1T5C2)
remove(R1T6C2)
remove(R1T6C1)
remove(R1T1C1)
remove(R1T1C2)
remove(R1T2C2)
remove(R1T2C1)
remove(R1T3C1)
remove(R1T3C2)
remove(R1T3C1)
remove(R1T4C1)
remove(R1T4C2)
remove(R1T5C2)
for (i in 1:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("R", i+1, "T", j, "C", k, sep = "")
video_name <- paste("R", i+1, "T", j, "C", k, ".mp4", sep = "")
assign(nam, readVid(video_name))
}
}
}
for (i in 2:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("CoTbR", i, "T", j, "C", k, sep = "")
csv_name <- paste("CoTbR", i, "T", j, "C", k, ".csv", sep = "")
assign(nam, readVid(csv_name))
}
}
}
for (i in 2:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("CoTbR", i, "T", j, "C", k, sep = "")
csv_name <- paste("CoTbR", i, "T", j, "C", k, ".csv", sep = "")
assign(nam, read.csv(csv_name))
}
}
}
View(CoTbR1T1C1)
remove(CoTbR1T1C1)
View(CoTbR2T2C1)
CoTbR1T1C1 <- read.csv("CoTbR1T1C1.csv")
remove(CoTbR1T1C1)
for (i in 2:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("bg", i, "T", j, "C", k, sep = "")
var_name <- paste("R", i, "T", j, "C", k, sep = "")
assign(nam, backgrounder(var_name,  n = 1600,
method = "median", color = FALSE)
}
}
}
for (i in 2:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("bg", i, "T", j, "C", k, sep = "")
var_name <- paste("R", i, "T", j, "C", k, sep = "")
assign(nam, backgrounder(var_name,  n = 1600,
method = "median", color = FALSE))
}
}
}
for (i in 1:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("vidR", i+1, "T", j, "C", k, sep = "")
video_name <- paste("R", i+1, "T", j, "C", k, ".mp4", sep = "")
assign(nam, readVid(video_name))
}
}
}
remove(R2T1C1)
remove(R2T1C2)
remove(R2T2C1)
remove(R2T2C2)
remove(R2T3C2)
remove(R2T3C1)
remove(R2T4C1)
remove(R2T4C2)
remove(R2T5C1)
remove(R2T5C2)
remove(R2T6C2)
remove(R2T6C1)
for (i in 2:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("bg", i, "T", j, "C", k, sep = "")
var_name <- paste("R", i, "T", j, "C", k, sep = "")
assign(nam, backgrounder((R,i,T,j,C,k),  n = 1600,
method = "median", color = FALSE))
}
}
}
vid_name <- vidR[i]T[j]C[1]
for (i in 2:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("bg", i, "T", j, "C", k, sep = "")
vid_name <- paste("R", i, "T", j, "C", k, sep = "")
assign(nam, backgrounder(paste("R", i, "T", j, "C", k, sep = ""),  n = 1600,
method = "median", color = FALSE))
}
}
}
remove(var_name)
remove(vid_name)
remove(video_name)
for (i in 2:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("bg", i, "T", j, "C", k, sep = "")
vid_name <- paste("R", i, "T", j, "C", k, sep = "")
assign(nam, backgrounder(video=paste("R", i, "T", j, "C", k, sep = ""),  n = 1600,
method = "median", color = FALSE))
}
}
}
for (i in 2:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("bg", i, "T", j, "C", k, sep = "")
vid_name <- paste("R", i, "T", j, "C", k, sep = "")
assign(nam, backgrounder(video=("R", i, "T", j, "C", k, sep = ""),  n = 1600,
method = "median", color = FALSE))
}
}
}
for (i in 2:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("bg", i, "T", j, "C", k, sep = "")
vid_name <- paste("R", i, "T", j, "C", k, sep = "")
assign(nam, backgrounder(video=("R", i, "T", j, "C", k, sep = ""),  n = 1600,
method = "median", color = FALSE))
}
}
}
for (i in 2:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("bg", i, "T", j, "C", k, sep = "")
vid_name <- paste("R", i, "T", j, "C", k, sep = "")
assign(nam, backgrounder(video=("R", i, "T", j, "C", k),  n = 1600,
method = "median", color = FALSE))
}
}
}
for (i in 1:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
temp_nam1 <- paste("vidR", i+1, "T", j, "C", k, sep = "")
video_name <- paste("R", i+1, "T", j, "C", k, ".mp4", sep = "")
assign(temp_nam1, readVid(video_name))
temp_nam2 <- paste("CoTbR", i+1, "T", j, "C", k, sep = "")
csv_name <- paste("CoTbR", i+1, "T", j, "C", k, ".csv", sep = "")
assign(temp_nam2, read.csv(csv_name))
}
}
}
remove(A1, A10)
remove(A2, A3, A4, A5, A6, A7, A8, A9)
x <- vector()
append (x, temp_nam1)
append
x
append(vidVector, temp_nam1)
vidVector <- vector()
remove(x)
append(vidVector, temp_nam1)
?r
??r
for (i in 2:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("bg", i, "T", j, "C", k, sep = "")
vid_name <- paste("R", i, "T", j, "C", k, sep = "")
assign(nam, backgrounder(get(vid_name),  n = 1600,
method = "median", color = FALSE))
}
}
}
for (i in 2:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
nam <- paste("bg", i, "T", j, "C", k, sep = "")
vid_name <- paste("vidR", i, "T", j, "C", k, sep = "")
assign(nam, backgrounder(get(vid_name),  n = 1600,
method = "median", color = FALSE))
}
}
}
remove(vidVector)
remove(vid_name)
remove(video_name)
staticFrame = 5
for (i in 1:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
temp_name <- paste("Fr", i+1, "T", j, "C", k, sep = "")
vid_name <- paste("vidR", i+1, "T", j, "C", k, sep = "")
assign(temp_name, getFrame(get(vid_name), staticFrame))
}
}
}
staticFrame = 5
for (i in 1:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
temp_name <- paste("FR", i+1, "T", j, "C", k, sep = "")
vid_name <- paste("vidR", i+1, "T", j, "C", k, sep = "")
assign(temp_name, getFrame(get(vid_name), staticFrame))
}
}
}
remove(Fr2T1C1)
remove(Fr2T1C2)
remove(Fr2T2C2)
remove(Fr2T2C1)
remove(Fr2T3C1)
remove(Fr2T3C2)
remove(Fr2T4C2)
remove(Fr2T4C1)
remove(Fr2T5C1)
remove(Fr2T5C2)
remove(Fr2T6C2)
remove(Fr2T6C1)
remove(FR1T6C1)
fr
getpoint(FR1T2C1)
getpoint<-function(frame){
rto <- frame$dim[1]/frame$dim[2]
# print(rto)
ht<-rto*6
quartz(width=6, height=ht)
imshow(frame)
a<-grid.locator(unit = "npc")
gcx<-as.numeric(a$x)
gcy<-as.numeric(a$y)
X <- ceiling(gcx*frame$dim[2])
Y <- ceiling(gcy*frame$dim[1])
imshow(frame)
points(x=c(X), y=c(Y), col="red", pch=19, cex = 0.1 )
coord<-c(X,Y)
output=coord
}
getpoint<-function(frame){
rto <- frame$dim[1]/frame$dim[2]
print(rto)
ht<-rto*6
quartz(width=6, height=ht)
imshow(frame)
a<-grid.locator(unit = "npc")
gcx<-as.numeric(a$x)
gcy<-as.numeric(a$y)
X <- ceiling(gcx*frame$dim[2])
Y <- ceiling(gcy*frame$dim[1])
imshow(frame)
points(x=c(X), y=c(Y), col="red", pch=19, cex = 0.1 )
coord<-c(X,Y)
output=coord
}
getpoint<-function(frame){
rto <- frame$dim[1]/frame$dim[2]
print(rto)
ht<-rto*6
quartz(width=6, height=ht)
imshow(frame)
a<-grid.locator(unit = "npc")
gcx<-as.numeric(a$x)
gcy<-as.numeric(a$y)
X <- ceiling(gcx*frame$dim[2])
Y <- ceiling(gcy*frame$dim[1])
imshow(frame)
points(x=c(X), y=c(Y), col="red", pch=19, cex = 0.1 )
coord<-c(X,Y)
output=coord
}
getpoint<-function(frame){
rto <- frame$dim[1]/frame$dim[2]
print(rto)
ht<-rto*6
quartz(width=6, height=ht)
imshow(frame)
a<-grid.locator(unit = "npc")
gcx<-as.numeric(a$x)
gcy<-as.numeric(a$y)
X <- ceiling(gcx*frame$dim[2])
Y <- ceiling(gcy*frame$dim[1])
imshow(frame)
points(x=c(X), y=c(Y), col="red", pch=19, cex = 0.1 )
coord<-c(X,Y)
output=coord
}
getpoint<-function(frame){
rto <- frame$dim[1]/frame$dim[2]
print(rto)
ht<-rto*6
quartz(width=6, height=ht)
imshow(frame)
a<-grid.locator(unit = "npc")
gcx<-as.numeric(a$x)
gcy<-as.numeric(a$y)
X <- ceiling(gcx*frame$dim[2])
Y <- ceiling(gcy*frame$dim[1])
imshow(frame)
points(x=c(X), y=c(Y), col="red", pch=19, cex = 0.1 )
coord<-c(X,Y)
output=coord
}
