afad
CompiledData <- data.frame()
CompiledData
?identical
?abs
?apply
?union
?chisq.test
?matrix
?t.test
library(dplyr)
library(clue)
library(shiny)
library(splancs)
library(grid)
library(tictoc)
library(reshape2)
install.packages("dplyr")
install.packages("clue")
install.packages("shiny")
install.packages("splancs")
install.packages("grid")
install.packages("tictoc")
install.packages("reshape2")
install.packages("grid")
library(videoplayR)
library(dplyr)
library(clue)
library(shiny)
library(splancs)
library(grid)
library(tictoc)
library(reshape2)
setwd("/Users/dtrac/OneDrive/Documents/GitHub/Laboratory/Inesfly_Paint_Bed_Bug_Trial")
DR2T1C1<- read.csv(DR2T1C1.csv)
DR2T1C2<- read.csv(DR2T1C2.csv)
DR2T2C1<- read.csv(DR2T2C1.csv)
DR2T2C2<- read.csv(DR2T2C2.csv)
DR2T3C1<- read.csv(DR2T3C1.csv)
DR2T3C2<- read.csv(DR2T3C2.csv)
DR2T4C1<- read.csv(DR2T4C1.csv)
DR2T4C2<- read.csv(DR2T4C2.csv)
DR2T5C1<- read.csv(DR2T5C1.csv)
DR2T5C2<- read.csv(DR2T5C2.csv)
DR2T6C1<- read.csv(DR2T6C1.csv)
DR2T6C2<- read.csv(DR2T6C2.csv)
# Combining all data tables of repetition 2
CompVidRep2 <- rbind(DR2T1C1, DR2T1C2, DR2T2C1, DR2T2C2, DR2T3C1, DR2T3C2,
DR2T4C1, DR2T4C2, DR2T5C1, DR2T5C2, DR2T6C1, DR2T6C2)
DR2T1C1<- read.csv(Rep2Data/DR2T1C1.csv)
DR2T1C2<- read.csv(Rep2Data/DR2T1C2.csv)
DR2T2C1<- read.csv(Rep2Data/DR2T2C1.csv)
DR2T2C2<- read.csv(Rep2Data/DR2T2C2.csv)
DR2T3C1<- read.csv(Rep2Data/DR2T3C1.csv)
DR2T3C2<- read.csv(Rep2Data/DR2T3C2.csv)
DR2T4C1<- read.csv(Rep2Data/DR2T4C1.csv)
DR2T4C2<- read.csv(Rep2Data/DR2T4C2.csv)
DR2T5C1<- read.csv(Rep2Data/DR2T5C1.csv)
DR2T5C2<- read.csv(Rep2Data/DR2T5C2.csv)
DR2T6C1<- read.csv(Rep2Data/DR2T6C1.csv)
DR2T6C2<- read.csv(Rep2Data/DR2T6C2.csv)
CompVidRep2<- read.csv(CompVidRep2.csv)
getwd()
setwd("/Users/mzlevy/Laboratory/Inesfly_Paint_Bed_Bug_Trial/Pesticide_Detection")
setwd("/Users/dtrac/OneDrive/Documents/GitHub/Laboratory/Inesfly_Paint_Bed_Bug_Trial/Pesticide_Detection")
CompVidRep2<- read.csv(CompVidRep2.csv)
getwd()
ls
CompVidRep2<- read.csv(CompVidRep2.csv)
CompVidRep2<- read.csv("CompVidRep2.csv")
CompVidRep2<- read.csv("CompVidRep2.csv")
View(CompVidRep2)
CompiledData <- CompVidRep2
## Finding quadrants
# a = vertical
# b = horizontal
belowa <- which((CompiledData$y) <  (CompiledData$pred1))
abovea <- which((CompiledData$y) >= (CompiledData$pred1))
belowb <- which((CompiledData$y) <  (CompiledData$pred2))
aboveb <- which((CompiledData$y) >= (CompiledData$pred2))
NegSlope <- which(CompiledData$TPX <  CompiledData$BPX )
PosSlope <- which(CompiledData$TPX >= CompiledData$BPX )
# Determine Quadrants change depending on slope of vertical line
# In cases of positive slopes
# Instead of counter-clockwise numbering of quadrants (from the perspective
# of the video, not considering pesticide), quadrants were labeled clockwise
# starting form the top right as 1
CompiledData$quad <- 0
CompiledData$quad[intersect( PosSlope, (intersect(belowa,aboveb)))] <- 1
CompiledData$quad[intersect( PosSlope, (intersect(abovea,aboveb)))] <- 2
CompiledData$quad[intersect( PosSlope, (intersect(belowa,belowb)))] <- 4
CompiledData$quad[intersect( PosSlope, (intersect(abovea,belowb)))] <- 3
CompiledData$quad[intersect( NegSlope, (intersect(abovea,aboveb)))] <- 1
CompiledData$quad[intersect( NegSlope, (intersect(belowa,aboveb)))] <- 2
CompiledData$quad[intersect( NegSlope, (intersect(abovea,belowb)))] <- 4
CompiledData$quad[intersect( NegSlope, (intersect(belowa,belowb)))] <- 3
# Create function that determines which quadrants have pesticide
CompiledData$PQuad <- 0
CompiledData$DishID <- 0
CompiledData$Orientation <- 0
#Table to determine the painted quadrants given orientation
one   <- c(1,2,3,4)
two   <- c(2,3,4,1)
three <- c(3,4,1,2)
four  <- c(4,1,2,3)
OTab  <- data.frame(one, two, three, four)
# Input data from TrayPlace into CompVidRep2
for (i in 1:nrow(CompiledData)) {
# r, t and p are the INDICES within TrayPlace
# by themselves, r, t and p are vectors but we then find the intersection
# of all three to arrive at the id
r <- which(TrayPlace$Repetition == CompiledData$rep[i])
t <- which(TrayPlace$Trial == CompiledData$trial[i])
p <- which(TrayPlace$Position == CompiledData$position[i])
id <- intersect(p, intersect(r, t))
CompiledData$DishID[i] <- TrayPlace$DishID[id]
CompiledData$Orientation[i] <- TrayPlace$Orientation[id]
# Setting up orientations
CompiledData$PQuad[i] <- OTab[CompiledData$Orientation[i],
CompiledData$quad[i]]
}
uno <- which(CompiledData$PQuad == 1)
dos <- which(CompiledData$PQuad == 2)
tres <- which(CompiledData$PQuad == 3)
cuatro <- which(CompiledData$PQuad == 4)
PTrays<- which(CompiledData$DishID <= 6)
CompiledData$PTray <- CompiledData$PQuad*0
CompiledData$PTray[PTrays] <- 1
CompiledData$Pesticide[intersect( PTrays, dos)] <- 1
CompiledData$Pesticide[intersect( PTrays, cuatro)] <- 1
CompiledData$Treat_Quad <- 0
CompiledData$Treat_Quad[union(dos, cuatro)] <- 1
CompiledData$Result <- paste(CompiledData$Treat_Quad,
CompiledData$PTray, sep="-")
CN <- length(which(CompiledData$Result=="0-0"))
CP <- length(which(CompiledData$Result=="0-1"))
TN <- length(which(CompiledData$Result=="1-0"))
TP <- length(which(CompiledData$Result=="1-1"))
sum(CN, CP, TN, TP)
dim(CompiledData)
Result_Mat<-matrix(data=c(CN,CP,TN,TP), nrow = 2, ncol = 2,  byrow = FALSE)
chisq.test(Result_Mat, correct = TRUE)
TrayPlace<- read.csv("TraysRep1y2.csv") # times, dates, humidity quadrant
CompiledData <- CompVidRep2
## Finding quadrants
# a = vertical
# b = horizontal
belowa <- which((CompiledData$y) <  (CompiledData$pred1))
abovea <- which((CompiledData$y) >= (CompiledData$pred1))
belowb <- which((CompiledData$y) <  (CompiledData$pred2))
aboveb <- which((CompiledData$y) >= (CompiledData$pred2))
NegSlope <- which(CompiledData$TPX <  CompiledData$BPX )
PosSlope <- which(CompiledData$TPX >= CompiledData$BPX )
# Determine Quadrants change depending on slope of vertical line
# In cases of positive slopes
# Instead of counter-clockwise numbering of quadrants (from the perspective
# of the video, not considering pesticide), quadrants were labeled clockwise
# starting form the top right as 1
CompiledData$quad <- 0
CompiledData$quad[intersect( PosSlope, (intersect(belowa,aboveb)))] <- 1
CompiledData$quad[intersect( PosSlope, (intersect(abovea,aboveb)))] <- 2
CompiledData$quad[intersect( PosSlope, (intersect(belowa,belowb)))] <- 4
CompiledData$quad[intersect( PosSlope, (intersect(abovea,belowb)))] <- 3
CompiledData$quad[intersect( NegSlope, (intersect(abovea,aboveb)))] <- 1
CompiledData$quad[intersect( NegSlope, (intersect(belowa,aboveb)))] <- 2
CompiledData$quad[intersect( NegSlope, (intersect(abovea,belowb)))] <- 4
CompiledData$quad[intersect( NegSlope, (intersect(belowa,belowb)))] <- 3
# Create function that determines which quadrants have pesticide
CompiledData$PQuad <- 0
CompiledData$DishID <- 0
CompiledData$Orientation <- 0
#Table to determine the painted quadrants given orientation
one   <- c(1,2,3,4)
two   <- c(2,3,4,1)
three <- c(3,4,1,2)
four  <- c(4,1,2,3)
OTab  <- data.frame(one, two, three, four)
# Input data from TrayPlace into CompVidRep2
for (i in 1:nrow(CompiledData)) {
# r, t and p are the INDICES within TrayPlace
# by themselves, r, t and p are vectors but we then find the intersection
# of all three to arrive at the id
r <- which(TrayPlace$Repetition == CompiledData$rep[i])
t <- which(TrayPlace$Trial == CompiledData$trial[i])
p <- which(TrayPlace$Position == CompiledData$position[i])
id <- intersect(p, intersect(r, t))
CompiledData$DishID[i] <- TrayPlace$DishID[id]
CompiledData$Orientation[i] <- TrayPlace$Orientation[id]
# Setting up orientations
CompiledData$PQuad[i] <- OTab[CompiledData$Orientation[i],
CompiledData$quad[i]]
}
uno <- which(CompiledData$PQuad == 1)
dos <- which(CompiledData$PQuad == 2)
tres <- which(CompiledData$PQuad == 3)
cuatro <- which(CompiledData$PQuad == 4)
PTrays<- which(CompiledData$DishID <= 6)
CompiledData$PTray <- CompiledData$PQuad*0
CompiledData$PTray[PTrays] <- 1
CompiledData$Pesticide[intersect( PTrays, dos)] <- 1
CompiledData$Pesticide[intersect( PTrays, cuatro)] <- 1
CompiledData$Treat_Quad <- 0
CompiledData$Treat_Quad[union(dos, cuatro)] <- 1
CompiledData$Result <- paste(CompiledData$Treat_Quad,
CompiledData$PTray, sep="-")
CN <- length(which(CompiledData$Result=="0-0"))
CP <- length(which(CompiledData$Result=="0-1"))
TN <- length(which(CompiledData$Result=="1-0"))
TP <- length(which(CompiledData$Result=="1-1"))
sum(CN, CP, TN, TP)
dim(CompiledData)
Result_Mat<-matrix(data=c(CN,CP,TN,TP), nrow = 2, ncol = 2,  byrow = FALSE)
chisq.test(Result_Mat, correct = TRUE)
?reshape2
cast
?cast
vets<-dcast(CompiledData, idd ~ Treat_Quad , sum)
CompiledData$iid<- paste(CompiledData$rep, CompiledData$trial, CompiledData$camera, CompiledData$DishID)
vets <- dcast(CompiledData, idd ~ Treat_Quad , sum)
vets <- dcast(CompiledData, iid ~ Treat_Quad , sum)
vets <- dcast(CompiledData, Treat_Quad ~ iid , sum)
insectdata<-data.frame(iids)
iids<-unique(CompiledData$iid)
insectdata<-data.frame(iids)
insectdata
CompiledData$iid<- paste(CompiledData$rep, CompiledData$trial, CompiledData$camera, CompiledData$DishID, sep="-")
iids<-unique(CompiledData$iid)
insectdata<-data.frame(iids)
insectdata
#create insect based data frame
insectdata <- data.frame(iids)
##create blank colomns for loop
#The percentage of treatment frame
insectdata$Perc_Treatment_Frames <- insectdata$iids*NA
#Whether or not the tray is exposed to pesticide
insectdata$Pesticide_Tray <- insectdata$iids*NA
#run a loop to create data table to fill
for( i in in 1:length(iids)){
insect<-which(CompiledData$iid==insectdata$iids[i])
treat_quads<-sum(CompiledData$Treat_Quad[insect])
insectdata$Perc_Treattment_Frames[i] <- treat_quads/[length(CompiledData$Treat_Quad[insect])]
insectdata$Pesticide_Tray[i] <- CompiledData$PTray[min(insect)]
}
insectdata$Perc_Treatment_Frames <- c(1:length(insectdata$iids)*NA)
insectdata$Perc_Treatment_Frames
insectdata$Pesticide_Tray <- c(1:length(insectdata$iids)*NA)
#run a loop to create data table to fill
for( i in in 1:length(iids)){
insect<-which(CompiledData$iid==insectdata$iids[i])
treat_quads<-sum(CompiledData$Treat_Quad[insect])
insectdata$Perc_Treattment_Frames[i] <- treat_quads/[length(CompiledData$Treat_Quad[insect])]
insectdata$Pesticide_Tray[i] <- CompiledData$PTray[min(insect)]
}
for( i in 1:length(iids)){
insect<-which(CompiledData$iid==insectdata$iids[i])
treat_quads<-sum(CompiledData$Treat_Quad[insect])
insectdata$Perc_Treattment_Frames[i] <- treat_quads/[length(CompiledData$Treat_Quad[insect])]
insectdata$Pesticide_Tray[i] <- CompiledData$PTray[min(insect)]
}
#run a loop to create data table to fill
for( i in 1:length(iids)){
insect<-which(CompiledData$iid==insectdata$iids[i])
treat_quads<-sum(CompiledData$Treat_Quad[insect])
insectdata$Perc_Treattment_Frames[i] <- treat_quads/[length(CompiledData$Treat_Quad[insect])
insectdata$Pesticide_Tray[i] <- CompiledData$PTray[min(insect)]
}
for( i in 1:length(iids)){
insect<-which(CompiledData$iid==insectdata$iids[i])
treat_quads<-sum(CompiledData$Treat_Quad[insect])
insectdata$Perc_Treattment_Frames[i] <- treat_quads/length(CompiledData$Treat_Quad[insect])
insectdata$Pesticide_Tray[i] <- CompiledData$PTray[min(insect)]
}
View(insectdata)
for( i in 1:length(iids)){
insect<-which(CompiledData$iid==insectdata$iids[i])
treat_quads<-sum(CompiledData$Treat_Quad[insect])
insectdata$Perc_Treatment_Frames[i] <- treat_quads/length(CompiledData$Treat_Quad[insect])
insectdata$Pesticide_Tray[i] <- CompiledData$PTray[min(insect)]
}
View(insectdata)
pesticide <- which(insectdata$Pesticide_Tray==1)
control <- which(insectdata$Pesticide_Tray==0)
t.test(insectdata$Perc_Treatment_Frames[pesticide], insectdata$Perc_Treatment_Frames$control)
t.test(insectdata$Perc_Treatment_Frames[pesticide], insectdata$Perc_Treatment_Frames[control])
t.test
?t.test
