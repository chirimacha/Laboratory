CompiledData$speed<-sqrt((CompiledData$x[cfa]-CompiledData$x[pfa])^2+(CompiledData$y[cfa]-CompiledData$y[pfa])^2)/(cfa-pfa)
CompiledData$speed
CompiledData$speed<-CompiledData$PQuad*0
iia <- which(CompiledData$rep==2)
jia <- which(CompiledData$trial==1)
ija<-intersect(iia, jia)
kia <- which(CompiledData$camera==1)
ijka<-intersect(ija, kia)
lia<-which(CompiledData$trayn==1)
ijkla<-intersect(ijka, lia)
rev_frames<-CompiledData$frame[ijkla]
frmna<-rev_frames[2]
cfra<-which(CompiledData==frmna)
pfmna <- rev_frames[2-1]
pfra<-which(CompiledData==pfmna)
cfa <- intersect(cfra, ijkla)
pfa <- intersect(pfra, ijkla)
CompiledData$speed[cfra]<-sqrt((CompiledData$x[cfa]-CompiledData$x[pfa])^2+(CompiledData$y[cfa]-CompiledData$y[pfa])^2)/(cfa-pfa)
CompiledData$speed[cfa]<-sqrt((CompiledData$x[cfa]-CompiledData$x[pfa])^2+(CompiledData$y[cfa]-CompiledData$y[pfa])^2)/(cfa-pfa)
CompiledData$speed<-CompiledData$PQuad*0
iia <- which(CompiledData$rep==2)
jia <- which(CompiledData$trial==1)
ija<-intersect(iia, jia)
kia <- which(CompiledData$camera==1)
ijka<-intersect(ija, kia)
lia<-which(CompiledData$trayn==1)
ijkla<-intersect(ijka, lia)
rev_frames<-CompiledData$frame[ijkla]
frmna<-rev_frames[2]
cfra<-which(CompiledData==frmna)
pfmna <- rev_frames[2-1]
pfra<-which(CompiledData==pfmna)
cfa <- intersect(cfra, ijkla)
pfa <- intersect(pfra, ijkla)
CompiledData$speed[cfa]<-sqrt((CompiledData$x[cfa]-CompiledData$x[pfa])^2+(CompiledData$y[cfa]-CompiledData$y[pfa])^2)/(cfa-pfa)
View(CompiledData)
#lets look at speed (distance traveled from previous frame)
CompiledData$speed<-CompiledData$PQuad*0
for(i in 2:2){
ii <- which(CompiledData$rep==i)
for(j in 1:6){
ji <- which(CompiledData$trial==j)
ij<-intersect(ii, ji)
for(k in 1:2){
ki <- which(CompiledData$camera==k)
ijk<-intersect(ij, ki)
for(l in 1:6){
li<-which(CompiledData$trayn==l)
ijkl<-intersect(ijk, li)
rev_frames<-CompiledData$frame[ijkl]
for(f in 2:length(rev_frames)){
frmn<-rev_frames[f]
cfr<-which(CompiledData==frmn)
pfmn <- rev_frames[f-1]
pfr<-which(CompiledData==pfmn)
cf <- intersect(cfr, ijkl)
pf <- intersect(pfr, ijkl)
CompiledData$speed[cf]<-sqrt((CompiledData$x[cf]-CompiledData$x[pf])^2+(CompiledData$y[cf]-CompiledData$y[pf])^2)/(cf-pf)
}
}
}
}
}
CompiledData$speed<-CompiledData$PQuad*0
for(i in 2:2){
ii <- which(CompiledData$rep==i)
for(j in 1:6){
ji <- which(CompiledData$trial==j)
ij<-intersect(ii, ji)
for(k in 1:2){
ki <- which(CompiledData$camera==k)
ijk<-intersect(ij, ki)
for(l in 1:6){
li<-which(CompiledData$trayn==l)
ijkl<-intersect(ijk, li)
rev_frames<-CompiledData$frame[ijkl]
print(length(rev_frames))
for(f in 2:length(rev_frames)){
frmn<-rev_frames[f]
cfr<-which(CompiledData==frmn)
pfmn <- rev_frames[f-1]
pfr<-which(CompiledData==pfmn)
cf <- intersect(cfr, ijkl)
pf <- intersect(pfr, ijkl)
# CompiledData$speed[cf]<-sqrt((CompiledData$x[cf]-CompiledData$x[pf])^2+(CompiledData$y[cf]-CompiledData$y[pf])^2)/(cf-pf)
}
}
}
}
}
#lets look at speed (distance traveled from previous frame)
CompiledData$speed<-CompiledData$PQuad*0
for(i in 2:2){
ii <- which(CompiledData$rep==i)
for(j in 1:6){
ji <- which(CompiledData$trial==j)
ij<-intersect(ii, ji)
for(k in 1:2){
ki <- which(CompiledData$camera==k)
ijk<-intersect(ij, ki)
for(l in 1:6){
li<-which(CompiledData$trayn==l)
ijkl<-intersect(ijk, li)
rev_frames<-CompiledData$frame[ijkl]
print(length(rev_frames))
# for(f in 2:length(rev_frames)){
#   frmn<-rev_frames[f]
#   cfr<-which(CompiledData==frmn)
#   pfmn <- rev_frames[f-1]
#   pfr<-which(CompiledData==pfmn)
#   cf <- intersect(cfr, ijkl)
#   pf <- intersect(pfr, ijkl)
# CompiledData$speed[cf]<-sqrt((CompiledData$x[cf]-CompiledData$x[pf])^2+(CompiledData$y[cf]-CompiledData$y[pf])^2)/(cf-pf)
}
}
}
}
#lets look at speed (distance traveled from previous frame)
CompiledData$speed<-CompiledData$PQuad*0
for(i in 2:2){
ii <- which(CompiledData$rep==i)
for(j in 1:6){
ji <- which(CompiledData$trial==j)
ij<-intersect(ii, ji)
for(k in 1:2){
ki <- which(CompiledData$camera==k)
ijk<-intersect(ij, ki)
for(l in 1:6){
li<-which(CompiledData$trayn==l)
ijkl<-intersect(ijk, li)
rev_frames<-CompiledData$frame[ijkl]
print(length(rev_frames))
for(f in 2:length(rev_frames)){
frmn<-rev_frames[f]
cfr<-which(CompiledData==frmn)
pfmn <- rev_frames[f-1]
pfr<-which(CompiledData==pfmn)
cf <- intersect(cfr, ijkl)
pf <- intersect(pfr, ijkl)
print(pf)
#CompiledData$speed[cf]<-sqrt((CompiledData$x[cf]-CompiledData$x[pf])^2+(CompiledData$y[cf]-CompiledData$y[pf])^2)/(cf-pf)
}
}
}
}
}
rev_frames
CompiledData$speed<-CompiledData$PQuad*0
for(i in 2:2){
ii <- which(CompiledData$rep==i)
for(j in 1:6){
ji <- which(CompiledData$trial==j)
ij<-intersect(ii, ji)
for(k in 1:2){
ki <- which(CompiledData$camera==k)
ijk<-intersect(ij, ki)
for(l in 1:6){
li<-which(CompiledData$trayn==l)
ijkl<-intersect(ijk, li)
rev_frames<-CompiledData$frame[ijkl]
print(length(rev_frames))
for(f in 2:length(rev_frames)){
frmn<-rev_frames[f]
cfr<-which(CompiledData==frmn)
lessframes<-which(rev_frames < frmn)
pfmn <- max(rev_frames[lessframes])
pfr<-which(CompiledData==pfmn)
cf <- intersect(cfr, ijkl)
pf <- intersect(pfr, ijkl)
print(pf, ijkl)
#CompiledData$speed[cf]<-sqrt((CompiledData$x[cf]-CompiledData$x[pf])^2+(CompiledData$y[cf]-CompiledData$y[pf])^2)/(cf-pf)
}
}
}
}
}
pf
pfr
ijkf
ijkl
ijkl
pfa
#lets look at speed (distance traveled from previous frame)
CompiledData$speed<-CompiledData$PQuad*0
for(i in 2:2){
ii <- which(CompiledData$rep==i)
for(j in 1:6){
ji <- which(CompiledData$trial==j)
ij<-intersect(ii, ji)
for(k in 1:2){
ki <- which(CompiledData$camera==k)
ijk<-intersect(ij, ki)
for(l in 1:6){
li<-which(CompiledData$trayn==l)
ijkl<-intersect(ijk, li)
rev_frames<-CompiledData$frame[ijkl]
print(length(rev_frames))
for(f in 2:length(rev_frames)){
frmn<-rev_frames[f]
cfr<-which(CompiledData==frmn)
lessframes<-which(rev_frames < frmn)
pfmn <- max(rev_frames[lessframes])
pfr<-which(CompiledData==pfmn)
cf <- intersect(cfr, ijkl)
pf <- intersect(pfr, ijkl)
print(pf, ijkl)
#CompiledData$speed[cf]<-sqrt((CompiledData$x[cf]-CompiledData$x[pf])^2+(CompiledData$y[cf]-CompiledData$y[pf])^2)/(cf-pf)
}
}
}
}
}
print(pfa, ijkla)
print(pfa)
print(ijkla)
#lets look at speed (distance traveled from previous frame)
CompiledData$speed<-CompiledData$PQuad*0
for(i in 2:2){
ii <- which(CompiledData$rep==i)
for(j in 1:6){
ji <- which(CompiledData$trial==j)
ij<-intersect(ii, ji)
for(k in 1:2){
ki <- which(CompiledData$camera==k)
ijk<-intersect(ij, ki)
for(l in 1:6){
li<-which(CompiledData$trayn==l)
ijkl<-intersect(ijk, li)
rev_frames<-CompiledData$frame[ijkl]
print(length(rev_frames))
for(f in 2:length(rev_frames)){
frmn<-rev_frames[f]
cfr<-which(CompiledData==frmn)
lessframes<-which(rev_frames < frmn)
pfmn <- max(rev_frames[lessframes])
pfr<-which(CompiledData==pfmn)
cf <- intersect(cfr, ijkl)
pf <- intersect(pfr, ijkl)
print(ijkl)
print(pf)
#CompiledData$speed[cf]<-sqrt((CompiledData$x[cf]-CompiledData$x[pf])^2+(CompiledData$y[cf]-CompiledData$y[pf])^2)/(cf-pf)
}
}
}
}
}
CompiledData$speed<-CompiledData$PQuad*0
for(i in 2:2){
ii <- which(CompiledData$rep==i)
for(j in 1:6){
ji <- which(CompiledData$trial==j)
ij<-intersect(ii, ji)
for(k in 1:2){
ki <- which(CompiledData$camera==k)
ijk<-intersect(ij, ki)
for(l in 1:6){
li<-which(CompiledData$trayn==l)
ijkl<-intersect(ijk, li)
rev_frames<-CompiledData$frame[ijkl]
print(length(rev_frames))
for(f in 2:length(rev_frames)){
frmn<-rev_frames[f]
cfr<-which(CompiledData==frmn)
lessframes<-which(rev_frames < frmn)
pfmn <- max(rev_frames[lessframes])
pfr<-which(CompiledData==pfmn)
cf <- intersect(cfr, ijkl)
pf <- intersect(pfr, ijkl)
print(paste(i,j,k,l, sep=""))
print(pf)
#CompiledData$speed[cf]<-sqrt((CompiledData$x[cf]-CompiledData$x[pf])^2+(CompiledData$y[cf]-CompiledData$y[pf])^2)/(cf-pf)
}
}
}
}
}
CompiledData$speed<-CompiledData$PQuad*0
for(i in 2:2){
ii <- which(CompiledData$rep==i)
for(j in 1:6){
ji <- which(CompiledData$trial==j)
ij<-intersect(ii, ji)
for(k in 1:2){
ki <- which(CompiledData$camera==k)
ijk<-intersect(ij, ki)
for(l in 1:6){
li<-which(CompiledData$trayn==l)
ijkl<-intersect(ijk, li)
rev_frames<-CompiledData$frame[ijkl]
print(length(rev_frames))
for(f in 2:length(rev_frames)){
frmn<-rev_frames[f]
cfr<-which(CompiledData==frmn)
lessframes<-which(rev_frames < frmn)
pfmn <- max(rev_frames[lessframes])
pfr<-which(CompiledData==pfmn)
cf <- intersect(cfr, ijkl)
pf <- intersect(pfr, ijkl)
print(paste(i,j,k,l, sep=""))
print(cf)
#CompiledData$speed[cf]<-sqrt((CompiledData$x[cf]-CompiledData$x[pf])^2+(CompiledData$y[cf]-CompiledData$y[pf])^2)/(cf-pf)
}
}
}
}
}
for (i in 2:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
temp_name1 <- paste("vidR", i, "T", j, "C", k, sep = "")
video_name <- paste("R", i, "T", j, "C", k, ".mp4", sep = "")
assign(temp_name1, readVid(video_name))
temp_name2 <- paste("CoTbR", i, "T", j, "C", k, sep = "")
csv_name <- paste("CoTbR", i, "T", j, "C", k, ".csv", sep = "")
assign(temp_name2, read.csv(csv_name))
}
}
}
## Cre
for (i in 2:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
#temp_name1 <- paste("vidR", i, "T", j, "C", k, sep = "")
#video_name <- paste("R", i, "T", j, "C", k, ".mp4", sep = "")
#assign(temp_name1, readVid(video_name))
temp_name2 <- paste("CoTbR", i, "T", j, "C", k, sep = "")
csv_name <- paste("CoTbR", i, "T", j, "C", k, ".csv", sep = "")
assign(temp_name2, read.csv(csv_name))
}
}
}
CoTbR2T1C1
for (i in 2:repetition) {
for (j in 1:trial) {
for (k in 1:camera) {
temp_name2 <- paste("CoTbR", i, "T", j, "C", k, sep = "")
csv_name <- paste("CoTbR", i, "T", j, "C", k, ".csv", sep = "")
assign(temp_name2, read.csv(csv_name))
}
}
}
CoTbR2T1C1
?assign
get(CoTbR2T1C1)$MYT
get(CoTbR2T1C1)
get("CoTbR2T1C1")
get("CoTbR2T1C1")$MXL
pointtype<-c(18,20)
sf<-1
fl<-300
plot(x=CompiledData$x, y=CompiledData$y, type="n")
for(i in 2:2){
ii <- which(CompiledData$rep==i)
for(j in 1:6){
ji <- which(CompiledData$trial==j)
ij<-intersect(ii, ji)
for(k in 1:2){
ki <- which(CompiledData$camera==k)
ijk<-intersect(ij, ki)
temp_name <- paste("trackplot", i, j, k,".pdf", sep="")
#pdf(file=temp_name)
plot(x=CompiledData$x, y=CompiledData$y, type="n")
points(x =( 1:length(sf:fl)/5)+200, y = rep(80, times=length(sf:fl)),
col= alpha(topo.colors(n=length(sf:fl)),0.2))
Ctname<-paste("CoTbR", i, "T", j, "C", k, sep = "")
for(l in 1:6){
li<-which(CompiledData$trayn==l)
ijkl<-intersect(ijk, li)
lines(x=c(get(Ctname)$BPX[l],get(Ctname)$TPX[l]), y=c(get(Ctname)$BPY[l],get(Ctname)$BPY[l]), col=6)
for(f in sf:fl){
#tic()
fi <- which(CompiledData$frame==f)
fijkl<-intersect(fi, ijkl)
points(x = CompiledData$x[fijkl], y = CompiledData$y[fijkl],
col = alpha(topo.colors(n=(fl-sf))[f],0.2),
pch=pointtype[CompiledData$PTray[fijkl]+1])
# points(x =( 1:length(frame_limit)/5)+200, y = rep(80, times=length(frame_limit)),
#  col= alpha(topo.colors(n=length(fijkl)),0.2))
#toc()
}
}
#dev.off()
}
}
}
pointtype<-c(18,20)
sf<-1
fl<-300
plot(x=CompiledData$x, y=CompiledData$y, type="n")
for(i in 2:2){
ii <- which(CompiledData$rep==i)
for(j in 1:6){
ji <- which(CompiledData$trial==j)
ij<-intersect(ii, ji)
for(k in 1:2){
ki <- which(CompiledData$camera==k)
ijk<-intersect(ij, ki)
temp_name <- paste("trackplot", i, j, k,".pdf", sep="")
#pdf(file=temp_name)
plot(x=CompiledData$x, y=CompiledData$y, type="n")
points(x =( 1:length(sf:fl)/5)+200, y = rep(80, times=length(sf:fl)),
col= alpha(topo.colors(n=length(sf:fl)),0.2))
Ctname<-paste("CoTbR", i, "T", j, "C", k, sep = "")
for(l in 1:6){
li<-which(CompiledData$trayn==l)
ijkl<-intersect(ijk, li)
lines(x=c(get(Ctname)$BPX[l],get(Ctname)$TPX[l]), y=c(get(Ctname)$BPY[l],get(Ctname)$TPY[l]), col=6)
for(f in sf:fl){
#tic()
fi <- which(CompiledData$frame==f)
fijkl<-intersect(fi, ijkl)
points(x = CompiledData$x[fijkl], y = CompiledData$y[fijkl],
col = alpha(topo.colors(n=(fl-sf))[f],0.2),
pch=pointtype[CompiledData$PTray[fijkl]+1])
# points(x =( 1:length(frame_limit)/5)+200, y = rep(80, times=length(frame_limit)),
#  col= alpha(topo.colors(n=length(fijkl)),0.2))
#toc()
}
}
#dev.off()
}
}
}
CoTbR2T3C2
for(i in 2:2){
ii <- which(CompiledData$rep==i)
for(j in 1:6){
ji <- which(CompiledData$trial==j)
ij<-intersect(ii, ji)
for(k in 1:2){
ki <- which(CompiledData$camera==k)
ijk<-intersect(ij, ki)
temp_name <- paste("trackplot", i, j, k,".pdf", sep="")
#pdf(file=temp_name)
plot(x=CompiledData$x, y=CompiledData$y, type="n")
points(x =( 1:length(sf:fl)/5)+200, y = rep(80, times=length(sf:fl)),
col= alpha(topo.colors(n=length(sf:fl)),0.2))
Ctname<-paste("CoTbR", i, "T", j, "C", k, sep = "")
for(l in 1:6){
li<-which(CompiledData$trayn==l)
ijkl<-intersect(ijk, li)
lines(x=c(get(Ctname)$BPX[l],get(Ctname)$TPX[l]), y=c(get(Ctname)$BPY[l],get(Ctname)$TPY[l]), col=6)
lines(x=c(get(Ctname)$RPX[l],get(Ctname)$LPX[l]), y=c(get(Ctname)$RPY[l],get(Ctname)$LPY[l]), col=6)
for(f in sf:fl){
#tic()
fi <- which(CompiledData$frame==f)
fijkl<-intersect(fi, ijkl)
points(x = CompiledData$x[fijkl], y = CompiledData$y[fijkl],
col = alpha(topo.colors(n=(fl-sf))[f],0.2),
pch=pointtype[CompiledData$PTray[fijkl]+1])
# points(x =( 1:length(frame_limit)/5)+200, y = rep(80, times=length(frame_limit)),
#  col= alpha(topo.colors(n=length(fijkl)),0.2))
#toc()
}
}
#dev.off()
}
}
}
pointtype<-c(18,20)
sf<-1
fl<-300
plot(x=CompiledData$x, y=CompiledData$y, type="n")
for(i in 2:2){
ii <- which(CompiledData$rep==i)
for(j in 1:6){
ji <- which(CompiledData$trial==j)
ij<-intersect(ii, ji)
for(k in 1:2){
ki <- which(CompiledData$camera==k)
ijk<-intersect(ij, ki)
temp_name <- paste("trackplot", i, j, k,".pdf", sep="")
pdf(file=temp_name)
plot(x=CompiledData$x, y=CompiledData$y, type="n")
points(x =( 1:length(sf:fl)/5)+200, y = rep(80, times=length(sf:fl)),
col= alpha(topo.colors(n=length(sf:fl)),0.2))
Ctname<-paste("CoTbR", i, "T", j, "C", k, sep = "")
for(l in 1:6){
li<-which(CompiledData$trayn==l)
ijkl<-intersect(ijk, li)
lines(x=c(get(Ctname)$BPX[l],get(Ctname)$TPX[l]), y=c(get(Ctname)$BPY[l],get(Ctname)$TPY[l]), col=6)
lines(x=c(get(Ctname)$RPX[l],get(Ctname)$LPX[l]), y=c(get(Ctname)$RPY[l],get(Ctname)$LPY[l]), col=6)
for(f in sf:fl){
#tic()
fi <- which(CompiledData$frame==f)
fijkl<-intersect(fi, ijkl)
points(x = CompiledData$x[fijkl], y = CompiledData$y[fijkl],
col = alpha(topo.colors(n=(fl-sf))[f],0.2),
pch=pointtype[CompiledData$PTray[fijkl]+1])
# points(x =( 1:length(frame_limit)/5)+200, y = rep(80, times=length(frame_limit)),
#  col= alpha(topo.colors(n=length(fijkl)),0.2))
#toc()
}
}
dev.off()
}
}
}
TrayPlace
View(TrayPlace)
source('~/GitHub/Laboratory/Inesfly_Paint_Bed_Bug_Trial/Pesticide_Detection/NEW Pesticide Video Processing.R')
c_two<-which(TrayPlace$Position>6)
c_one<-which(TrayPlace$Position<=6)
TrayPlace$camera[c_two]<-2
TrayPlace$camera[c_one]<-1
TrayPlace
source('~/GitHub/Laboratory/Inesfly_Paint_Bed_Bug_Trial/Pesticide_Detection/NEW Pesticide Video Processing.R')
source('~/GitHub/Laboratory/Inesfly_Paint_Bed_Bug_Trial/Pesticide_Detection/NEW Pesticide Video Processing.R')
source('~/GitHub/Laboratory/Inesfly_Paint_Bed_Bug_Trial/Pesticide_Detection/NEW Pesticide Video Processing.R')
source('~/GitHub/Laboratory/Inesfly_Paint_Bed_Bug_Trial/Pesticide_Detection/NEW Pesticide Video Processing.R')
source('~/GitHub/Laboratory/Inesfly_Paint_Bed_Bug_Trial/Pesticide_Detection/NEW Pesticide Video Processing.R')
source('~/GitHub/Laboratory/Inesfly_Paint_Bed_Bug_Trial/Pesticide_Detection/NEW Pesticide Video Processing.R')
