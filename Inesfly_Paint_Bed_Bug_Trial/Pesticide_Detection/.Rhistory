marbugpos <- data.frame()
#Create "mask" that only allows one petri dish to be analyzed at a time
mmat <- matrix(0, nrow = mbg$dim[1], ncol = mbg$dim[2])
#sadly, for each dish we need to define the area by hand.
mmat[150:400, 50:280] <- 1
#go through matrix and ask if it is in or out of the polygon
pmaskm <- (r2img(mmat))
#now bring the mask and the background together
nbgm<-blend(mbg, pmaskm, "*")
imshow(nbgm)
for (i in 1:marchpilot$length){
#extract individual frames
res<-getFrame(marchpilot, i)
#put frame into grey scale.
gryscl <- ddd2d(res)
#mask other petri dishes
mask<-blend(gryscl, pmaskm, "*")
#subtract background from the mask. Only movement will show
sub<-blend(nbgm, mask, "-")
#set a threshold difference to remove changes due to glare/reflection
bw<-thresholding(sub, 70, "binary")
#detect the black blobs that are created. Get coordinates
bugcords<-blobDetector(bw)
# add track # to data frame
bugcords<-mutate(bugcords, frame = i, track = NA)
#determines what points are linked. Optimally each insect given 1 track each
#because there is only one object, we can max out maxDist.
stout<-simpleTracker(past = bugpos, current = bugcords,maxDist=100)
#combine tables previous in the loop.
marchpilot<- rbind(marchpilot, stout)
}
for (i in 1:marchpilot$length){
#extract individual frames
res<-getFrame(marchpilot, i)
#put frame into grey scale.
gryscl <- ddd2d(res)
#mask other petri dishes
mask<-blend(gryscl, pmaskm, "*")
#subtract background from the mask. Only movement will show
sub<-blend(nbgm, mask, "-")
#set a threshold difference to remove changes due to glare/reflection
bw<-thresholding(sub, 70, "binary")
#detect the black blobs that are created. Get coordinates
bugcords<-blobDetector(bw)
# add track # to data frame
bugcords<-mutate(bugcords, frame = i, track = NA)
#determines what points are linked. Optimally each insect given 1 track each
#because there is only one object, we can max out maxDist.
stout<-simpleTracker(past = marbugpos, current = bugcords,maxDist=100)
#combine tables previous in the loop.
marbugpos<- rbind(marbugpos, stout)
}
mmat <- matrix(0, nrow = mbg$dim[1], ncol = mbg$dim[2])
#sadly, for each dish we need to define the area by hand.
mmat[200:600, 50:280] <- 1
mmat[]
#go through matrix and ask if it is in or out of the polygon
pmaskm <- (r2img(mmat))
#now bring the mask and the background together
nbgm<-blend(mbg, pmaskm, "*")
imshow(nbgm)
mbg
imshow(mbg)
mmat <- matrix(0, nrow = mbg$dim[1], ncol = mbg$dim[2])
#sadly, for each dish we need to define the area by hand.
mmat[400:600, 50:280] <- 1
#go through matrix and ask if it is in or out of the polygon
pmaskm <- (r2img(mmat))
#now bring the mask and the background together
nbgm<-blend(mbg, pmaskm, "*")
imshow(nbgm)
mmat <- matrix(0, nrow = mbg$dim[1], ncol = mbg$dim[2])
#sadly, for each dish we need to define the area by hand.
mmat[400:600, 50:280] <- 1
#go through matrix and ask if it is in or out of the polygon
pmaskm <- (r2img(mmat))
imshow(pmaskm)
imshow(mbg)
mbg$dim
mmat <- matrix(0, nrow = mbg$dim[1], ncol = mbg$dim[2])
#sadly, for each dish we need to define the area by hand.
mmat[200:400, 400:5000] <- 1
#go through matrix and ask if it is in or out of the polygon
pmaskm <- (r2img(mmat))
#now bring the mask and the background together
nbgm<-blend(mbg, pmaskm, "*")
imshow(nbgm)
mmat <- matrix(0, nrow = mbg$dim[1], ncol = mbg$dim[2])
#sadly, for each dish we need to define the area by hand.
mmat[200:400, 400:500] <- 1
pmaskm <- (r2img(mmat))
#now bring the mask and the background together
nbgm<-blend(mbg, pmaskm, "*")
imshow(nbgm)
mmat <- matrix(0, nrow = mbg$dim[1], ncol = mbg$dim[2])
#sadly, for each dish we need to define the area by hand.
mmat[350:500, 390:500] <- 1
#go through matrix and ask if it is in or out of the polygon
pmaskm <- (r2img(mmat))
#now bring the mask and the background together
nbgm<-blend(mbg, pmaskm, "*")
imshow(nbgm)
mmat <- matrix(0, nrow = mbg$dim[1], ncol = mbg$dim[2])
#sadly, for each dish we need to define the area by hand.
mmat[350:400, 390:500] <- 1
#go through matrix and ask if it is in or out of the polygon
pmaskm <- (r2img(mmat))
#now bring the mask and the background together
nbgm<-blend(mbg, pmaskm, "*")
imshow(nbgm)
mmat <- matrix(0, nrow = mbg$dim[1], ncol = mbg$dim[2])
#sadly, for each dish we need to define the area by hand.
mmat[200:300, 390:500] <- 1
#go through matrix and ask if it is in or out of the polygon
pmaskm <- (r2img(mmat))
#now bring the mask and the background together
nbgm<-blend(mbg, pmaskm, "*")
imshow(nbgm)
mmat <- matrix(0, nrow = mbg$dim[1], ncol = mbg$dim[2])
#sadly, for each dish we need to define the area by hand.
mmat[200:300, 380:480] <- 1
#go through matrix and ask if it is in or out of the polygon
pmaskm <- (r2img(mmat))
#now bring the mask and the background together
nbgm<-blend(mbg, pmaskm, "*")
imshow(nbgm)
mmat <- matrix(0, nrow = mbg$dim[1], ncol = mbg$dim[2])
#sadly, for each dish we need to define the area by hand.
mmat[150:250, 380:480] <- 1
#go through matrix and ask if it is in or out of the polygon
pmaskm <- (r2img(mmat))
#now bring the mask and the background together
nbgm<-blend(mbg, pmaskm, "*")
imshow(nbgm)
mmat <- matrix(0, nrow = mbg$dim[1], ncol = mbg$dim[2])
#sadly, for each dish we need to define the area by hand.
mmat[150:280, 380:480] <- 1
#go through matrix and ask if it is in or out of the polygon
pmaskm <- (r2img(mmat))
#now bring the mask and the background together
nbgm<-blend(mbg, pmaskm, "*")
imshow(nbgm)
mmat <- matrix(0, nrow = mbg$dim[1], ncol = mbg$dim[2])
#sadly, for each dish we need to define the area by hand.
mmat[150:268, 380:480] <- 1
#go through matrix and ask if it is in or out of the polygon
pmaskm <- (r2img(mmat))
#now bring the mask and the background together
nbgm<-blend(mbg, pmaskm, "*")
imshow(nbgm)
mmat[150:268, 370:480] <- 1
mmat[150:268, 370:480] <- 1
mmat <- matrix(0, nrow = mbg$dim[1], ncol = mbg$dim[2])
#sadly, for each dish we need to define the area by hand.
mmat[150:268, 370:480] <- 1
#go through matrix and ask if it is in or out of the polygon
pmaskm <- (r2img(mmat))
#now bring the mask and the background together
nbgm<-blend(mbg, pmaskm, "*")
imshow(nbgm)
mmat <- matrix(0, nrow = mbg$dim[1], ncol = mbg$dim[2])
#sadly, for each dish we need to define the area by hand.
mmat[150:268, 370:480] <- 1
#go through matrix and ask if it is in or out of the polygon
pmaskm <- (r2img(mmat))
#now bring the mask and the background together
nbgm<-blend(mbg, pmaskm, "*")
imshow(nbg)
mmat <- matrix(0, nrow = mbg$dim[1], ncol = mbg$dim[2])
#sadly, for each dish we need to define the area by hand.
mmat[150:268, 370:480] <- 1
#go through matrix and ask if it is in or out of the polygon
pmaskm <- (r2img(mmat))
#now bring the mask and the background together
nbgm<-blend(mbg, pmaskm, "*")
imshow(mbg)
#Quadrant 2
mmat <- matrix(0, nrow = mbg$dim[1], ncol = mbg$dim[2])
#sadly, for each dish we need to define the area by hand.
mmat[150:268, 370:480] <- 1
#go through matrix and ask if it is in or out of the polygon
pmaskm <- (r2img(mmat))
#now bring the mask and the background together
nbgm<-blend(mbg, pmaskm, "*")
imshow(nbgm)
for (i in 1:marchpilot$length){
#extract individual frames
res<-getFrame(marchpilot, i)
#put frame into grey scale.
gryscl <- ddd2d(res)
#mask other petri dishes
mask<-blend(gryscl, pmaskm, "*")
#subtract background from the mask. Only movement will show
sub<-blend(nbgm, mask, "-")
#set a threshold difference to remove changes due to glare/reflection
bw<-thresholding(sub, 70, "binary")
#detect the black blobs that are created. Get coordinates
bugcords<-blobDetector(bw)
# add track # to data frame
bugcords<-mutate(bugcords, frame = i, track = NA)
#determines what points are linked. Optimally each insect given 1 track each
#because there is only one object, we can max out maxDist.
stout<-simpleTracker(past = marbugpos, current = bugcords,maxDist=100)
#combine tables previous in the loop.
marbugpos<- rbind(marbugpos, stout)
}
marbugpos <- data.frame()
for (i in 1:marchpilot$length){
#extract individual frames
res<-getFrame(marchpilot, i)
#put frame into grey scale.
gryscl <- ddd2d(res)
#mask other petri dishes
mask<-blend(gryscl, pmaskm, "*")
#subtract background from the mask. Only movement will show
sub<-blend(nbgm, mask, "-")
#set a threshold difference to remove changes due to glare/reflection
bw<-thresholding(sub, 70, "binary")
#detect the black blobs that are created. Get coordinates
bugcords<-blobDetector(bw)
# add track # to data frame
bugcords<-mutate(bugcords, frame = i, track = NA)
#determines what points are linked. Optimally each insect given 1 track each
#because there is only one object, we can max out maxDist.
stout<-simpleTracker(past = marbugpos, current = bugcords,maxDist=100)
#combine tables previous in the loop.
marbugpos<- rbind(marbugpos, stout)
}
imshow(bg)
bg <- backgrounder(pilotvidr1, n = 100, method = "mean", color = FALSE)
bugpos<- data.frame()
mat <- matrix(0, nrow = bg$dim[1], ncol = bg$dim[2])
#sadly, for each dish we need to define the area by hand.
mat[150:400, 50:280] <- 1
#go through matrix and ask if it is in or out of the polygon
pmaska <- (r2img(mat))
#now bring the mask and the background together
nbga<-blend(bg, pmaska, "*")
imshow(nbga)
bugpos<- data.frame()
#Loop over each frame in the video.
for (i in 1:pilotvidr1$length){
#extract individual frames
res<-getFrame(pilotvidr1, i)
#put frame into grey scale.
gryscl <- ddd2d(res)
#mask other petri dishes
mask<-blend(gryscl, pmaska, "*")
#subtract background from the mask. Only movement will show
sub<-blend(nbga, mask, "-")
#set a threshold difference to remove changes due to glare/reflection
bw<-thresholding(sub, 70, "binary")
#detect the black blobs that are created. Get coordinates
bugcords<-blobDetector(bw)
# add track # to data frame
bugcords<-mutate(bugcords, frame = i, track = NA)
#determines what points are linked. Optimally each insect given 1 track each
#because there is only one object, we can max out maxDist.
stout<-simpleTracker(past = bugpos, current = bugcords,maxDist=100)
#combine tables previous in the loop.
bugpos<- rbind(bugpos, stout)
}
bugpos
imshow(pmaskm)
for (i in 1:marchpilot$length){
#extract individual frames
res<-getFrame(marchpilot, i)
#put frame into grey scale.
gryscl <- ddd2d(res)
#mask other petri dishes
mask<-blend(gryscl, pmaskm, "*")
#subtract background from the mask. Only movement will show
sub<-blend(nbgm, mask, "-")
#set a threshold difference to remove changes due to glare/reflection
bw<-thresholding(sub, 10, "binary")
#detect the black blobs that are created. Get coordinates
bugcords<-blobDetector(bw)
# add track # to data frame
bugcords<-mutate(bugcords, frame = i, track = NA)
#determines what points are linked. Optimally each insect given 1 track each
#because there is only one object, we can max out maxDist.
stout<-simpleTracker(past = marbugpos, current = bugcords,maxDist=100)
#combine tables previous in the loop.
marbugpos<- rbind(marbugpos, stout)
}
res<-getFrame(marchpilot, 5)
#put frame into grey scale.
gryscl <- ddd2d(res)
#mask other petri dishes
mask<-blend(gryscl, pmaskm, "*")
#subtract background from the mask. Only movement will show
sub<-blend(nbgm, mask, "-")
#set a threshold difference to remove changes due to glare/reflection
bw<-thresholding(sub, 10, "binary")
#detect the black blobs that are created. Get coordinates
bugcords<-blobDetector(bw)
# add track # to data frame
bugcords<-mutate(bugcords, frame = i, track = NA)
bugcords
bw
imshow(bw)
bw<-thresholding(sub, 30, "binary")
imshow(bw)
res<-getFrame(marchpilot, 5)
#put frame into grey scale.
gryscl <- ddd2d(res)
#mask other petri dishes
mask<-blend(gryscl, pmaskm, "*")
#subtract background from the mask. Only movement will show
sub<-blend(nbgm, mask, "-")
#set a threshold difference to remove changes due to glare/reflection
bw<-thresholding(sub, 30, "binary")
#detect the black blobs that are created. Get coordinates
bugcords<-blobDetector(bw)
# add track # to data frame
bugcords<-mutate(bugcords, frame = i, track = NA)
bugcords
for (i in 1:marchpilot$length){
#extract individual frames
res<-getFrame(marchpilot, i)
#put frame into grey scale.
gryscl <- ddd2d(res)
#mask other petri dishes
mask<-blend(gryscl, pmaskm, "*")
#subtract background from the mask. Only movement will show
sub<-blend(nbgm, mask, "-")
#set a threshold difference to remove changes due to glare/reflection
bw<-thresholding(sub, 30, "binary")
#detect the black blobs that are created. Get coordinates
bugcords<-blobDetector(bw)
# add track # to data frame
bugcords<-mutate(bugcords, frame = i, track = NA)
#determines what points are linked. Optimally each insect given 1 track each
#because there is only one object, we can max out maxDist.
stout<-simpleTracker(past = marbugpos, current = bugcords,maxDist=100)
#combine tables previous in the loop.
marbugpos<- rbind(marbugpos, stout)
}
warnings
marbugpos
res<-getFrame(marchpilot, 5)
#put frame into grey scale.
gryscl <- ddd2d(res)
#mask other petri dishes
mask<-blend(gryscl, pmaskm, "*")
#subtract background from the mask. Only movement will show
sub<-blend(nbgm, mask, "-")
#set a threshold difference to remove changes due to glare/reflection
bw<-thresholding(sub, 30, "binary")
imshow(bw)
imshow(sub)
mask<-blend(gryscl, pmaskm, "*")
imshow(sub)
imshow(mask)
imshow(sub)
imshow(bw)
or (i in 1:marchpilot$length){
#extract individual frames
res<-getFrame(marchpilot, i)
#put frame into grey scale.
gryscl <- ddd2d(res)
#mask other petri dishes
mask<-blend(gryscl, pmaskm, "*")
#subtract background from the mask. Only movement will show
sub<-blend(nbgm, mask, "-")
#set a threshold difference to remove changes due to glare/reflection
bw<-thresholding(sub, 50, "binary")
#detect the black blobs that are created. Get coordinates
bugcords<-blobDetector(bw)
# add track # to data frame
bugcords<-mutate(bugcords, frame = i, track = NA)
#determines what points are linked. Optimally each insect given 1 track each
#because there is only one object, we can max out maxDist.
stout<-simpleTracker(past = marbugpos, current = bugcords,maxDist=100)
#combine tables previous in the loop.
marbugpos<- rbind(marbugpos, stout)
}
for (i in 1:marchpilot$length){
#extract individual frames
res<-getFrame(marchpilot, i)
#put frame into grey scale.
gryscl <- ddd2d(res)
#mask other petri dishes
mask<-blend(gryscl, pmaskm, "*")
#subtract background from the mask. Only movement will show
sub<-blend(nbgm, mask, "-")
#set a threshold difference to remove changes due to glare/reflection
bw<-thresholding(sub, 50, "binary")
#detect the black blobs that are created. Get coordinates
bugcords<-blobDetector(bw)
# add track # to data frame
bugcords<-mutate(bugcords, frame = i, track = NA)
#determines what points are linked. Optimally each insect given 1 track each
#because there is only one object, we can max out maxDist.
stout<-simpleTracker(past = marbugpos, current = bugcords,maxDist=100)
#combine tables previous in the loop.
marbugpos<- rbind(marbugpos, stout)
}
for (i in 1:20){
#extract individual frames
res<-getFrame(marchpilot, i)
#put frame into grey scale.
gryscl <- ddd2d(res)
#mask other petri dishes
mask<-blend(gryscl, pmaskm, "*")
#subtract background from the mask. Only movement will show
sub<-blend(nbgm, mask, "-")
#set a threshold difference to remove changes due to glare/reflection
bw<-thresholding(sub, 50, "binary")
#detect the black blobs that are created. Get coordinates
bugcords<-blobDetector(bw)
# add track # to data frame
bugcords<-mutate(bugcords, frame = i, track = NA)
#determines what points are linked. Optimally each insect given 1 track each
#because there is only one object, we can max out maxDist.
stout<-simpleTracker(past = marbugpos, current = bugcords,maxDist=100)
#combine tables previous in the loop.
marbugpos<- rbind(marbugpos, stout)
}
warnings()
marbugpos
warnings()
for (i in 1:pilotvidr1$length){
#extract individual frames
res<-getFrame(pilotvidr1, i)
#put frame into grey scale.
gryscl <- ddd2d(res)
#mask other petri dishes
mask<-blend(gryscl, pmaska, "*")
#subtract background from the mask. Only movement will show
sub<-blend(nbga, mask, "-")
#set a threshold difference to remove changes due to glare/reflection
bw<-thresholding(sub, 70, "binary")
#detect the black blobs that are created. Get coordinates
bugcords<-blobDetector(bw)
# add track # to data frame
bugcords<-mutate(bugcords, frame = i, track = NA)
#determines what points are linked. Optimally each insect given 1 track each
#because there is only one object, we can max out maxDist.
stout<-simpleTracker(past = bugpos, current = bugcords,maxDist=100)
#combine tables previous in the loop.
bugpos<- rbind(bugpos, stout)
}
for (i in 1:pilotvidr1$length){
#extract individual frames
res<-getFrame(pilotvidr1, i)
#put frame into grey scale.
gryscl <- ddd2d(res)
#mask other petri dishes
mask<-blend(gryscl, pmaska, "*")
#subtract background from the mask. Only movement will show
sub<-blend(nbga, mask, "-")
#set a threshold difference to remove changes due to glare/reflection
bw<-thresholding(sub, 70, "binary")
#detect the black blobs that are created. Get coordinates
bugcords<-blobDetector(bw)
# add track # to data frame
bugcords<-mutate(bugcords, frame = i, track = NA)
#determines what points are linked. Optimally each insect given 1 track each
#because there is only one object, we can max out maxDist.
stout<-simpleTracker(past = bugpos, current = bugcords,maxDist=100)
#combine tables previous in the loop.
bugpos<- rbind(bugpos, stout)
}
blank <- blending(bg, bg, "-")
blank <- blend(bg, bg, "-")
blobdetector(blank)
blobDetector(blank)
?blobDetector
for (i in 1:pilotvidr1$length){
#extract individual frames
res<-getFrame(pilotvidr1, i)
#put frame into grey scale.
gryscl <- ddd2d(res)
#mask other petri dishes
mask<-blend(gryscl, pmaska, "*")
#subtract background from the mask. Only movement will show
sub<-blend(nbga, mask, "-")
#set a threshold difference to remove changes due to glare/reflection
bw<-thresholding(sub, 70, "binary")
#detect the black blobs that are created. Get coordinates
bugcords<-blobDetector(bw)
# add track # to data frame
bugcords<-mutate(bugcords, frame = i, track = NA)
#determines what points are linked. Optimally each insect given 1 track each
#because there is only one object, we can max out maxDist.
stout<-simpleTracker(past = bugpos, current = bugcords,maxDist=100)
#combine tables previous in the loop.
bugpos<- rbind(bugpos, stout)
}
#Loop over each frame in the video.
for (i in 1:pilotvidr1$length){
#extract individual frames
res<-getFrame(pilotvidr1, i)
#put frame into grey scale.
gryscl <- ddd2d(res)
#mask other petri dishes
mask<-blend(gryscl, pmaska, "*")
#subtract background from the mask. Only movement will show
sub<-blend(nbga, mask, "-")
#set a threshold difference to remove changes due to glare/reflection
bw<-thresholding(sub, 70, "binary")
#detect the black blobs that are created. Get coordinates
bugcords<-blobDetector(bw)
# add track # to data frame
bugcords<-mutate(bugcords, frame = i, track = NA)
#determines what points are linked. Optimally each insect given 1 track each
#because there is only one object, we can max out maxDist.
stout<-simpleTracker(past = bugpos, current = bugcords,maxDist=100)
#combine tables previous in the loop.
bugpos<- rbind(bugpos, stout)
}
