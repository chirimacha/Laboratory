#turn off pdf or jpeg
#Plot Prop Proportion living (alive+knockdown)
quadsum$exp.time <- revalue(quadsum$exp.time, c("01H" = "1",
"03H" = "3",
"06H" = "6",
"24H" = "24"))
pdf("TABLES_GRAPHS/Bioassay_Array/Bioassay_Graphs_Array_Quads.pdf", width = 6,
height = 9)
#jpeg("TABLES_GRAPHS/Bioassay_Array/Bioassay_Graphs_Array_Quads.jpeg", width = 6,
#     height = 9, units = "in", res = 300)
dap <- unique(quadsum$days.after.paint)
dap <- dap[order(dap)]
ext <- unique(quadsum$exp.time)
par(mfrow = c(4,3), oma = c(1,1,2,1)) #4 across 3
for(k in 1:length(ext)){
tsdap <- which(quadsum$exp.time == ext[k])
for(j in 1:length(dap)){
tsext <- which(quadsum$days.after.paint == dap[j])
tsde <- intersect(tsdap, tsext)
#d <- "days"
#if(dap[j] == 1){d <- "day"}
plot(y = quadsum$prop.alive, x = quadsum$day,
pch = quadsum$pch, col = quadsum$paint,
type = "n", #main = as.character(paste("J =", ext[k], "hrs:", "K =", dap[j],
#            d, sep = " ")),
ylab = "Proportion Alive", xlab = "Days Since Exposure",
xaxt = 'n', yaxt = 'n')
udays <- c( 0, 7, 14, 21, 28)
axis( 2, at = c(0:5 / 5), las = 2,
labels = as.character(c(0:5 / 5)))
axis( 1, at = udays, labels = udays)
quads.tmp <- unique(quadsum$TreatQuad[tsde])
for(i in 1:length(quads.tmp)){
tr <- which(quadsum$TreatQuad == quads.tmp[i])
temp <- quadsum[tr,]
points(y = temp$prop.liv, x = temp$day, pch = temp$pch[1],
col = temp$paint[1])
lines(y = temp$prop.liv, x = temp$day, pch = temp$pch[1],
col = temp$paint[1])
}
}
}
#title
mtext("Proportion of Alive Bugs", side = 3, line = 0, outer = TRUE, cex = 1.2)
#Top Headings
mtext("1 Day After Painting", side = 3, line =-2 , outer = TRUE, cex=0.8, at = 0.18)
mtext("90 days after painting", side = 3, line =-2 , outer = TRUE, cex=0.8, at = 0.50)
mtext("180 days after painting", side = 3, line =-2 , outer = TRUE, cex=0.8, at = 0.84)
#side headings
mtext("Exposed 1 Hour", side = 2, line = -0.2, outer = T, at = 0.938, adj = 1, cex = 0.8)
mtext("Exposed 3 Hours", side = 2, line = -0.2, outer =T, at = 0.69, adj = 1, cex = 0.8)
mtext("Exposed 6 Hours", side = 2, line = -0.2, outer = T, at = 0.4392, adj = 1, cex = 0.8)
mtext("Exposed 24 Hours", side = 2, line = -0.2, outer = T, at = 0.198, adj = 1, cex = 0.8)
#turn off pdf or jpeg
dev.off()
quads
treatment
treatments
length(treatments)*4
length(quads)
survdiff(IndTab$Surv[onfcon] ~ IndTab$paint[onfcon]+IndTab$TreatQuad[onfcon])
### To compare curves we need to do a log-rank test, which in R requiress us to
##transform data into a Survival Object
##This requires us to have a time (start of interval), time2(end of interval),
## as well as the event we care about,ie, death.
#put status and interval together so they can be used in same function
#indexs are not being found
DataMelt$UID <- paste(DataMelt$INSECT, DataMelt$days.after.paint, sep="-")
DataMelt$day <- as.numeric(DataMelt$day)
#Remove day 0 and 2, so that each data is the same.
ceros <- which(DataMelt$day == 0)
twos <- which(DataMelt$day == 2)
xtra <- union(ceros, twos)
nodata<-which(DataMelt$status == "")
rdc<- union(xtra,nodata)
rMelt <- DataMelt[-rdc,]
UID<-unique(DataMelt$UID)
SurvTab<-data.frame(UID)
fillTime <- function(UIDs){
indexs <- which(rMelt$UID == UIDs)
if(length(indexs) == 0){print("index not found")}
subtab <- rMelt[indexs,]
if(sum(subtab$dead) == 0){
output<- max(subtab$day)
}
else{
deaths <- which(subtab$dead == 1)
output <- min(subtab$day[deaths])
}
return(output)
}
fillTime.test <- function(UIDs){
indexs <- which(rMelt$UID == UIDs)
if(length(indexs) == 0){print("index not found")}
subtab <- rMelt[indexs,]
if(sum(subtab$dead) == 0){
output<- 1
}
else{
deaths <- which(subtab$dead == 1)
output <- 2
}
return(output)
}
#Beginging of interval
fillTimeTwo <- function(UIDs){
indexs <- which(rMelt$UID == UIDs)
if(length(indexs) == 0){print("index not found")}
subtab <- rMelt[indexs,]
livs <- which(subtab$dead == 0)
n <- length(subtab$day)
if(sum(subtab$dead) <  n ) {
output <- max(subtab$day[livs])}
#<- sort(subtab$day, decreasing = FALSE)[length(livs)]}
if(sum(subtab$dead) == n){output <- 0}
if(sum(subtab$dead) == 0){output <- sort(c(subtab$day), decreasing = FALSE)[n-1]}
return(output)
}
fillTimeTwo.test <- function(UIDs){
indexs <- which(rMelt$UID == UIDs)
if(length(indexs) == 0){print("index not found")}
subtab <- rMelt[indexs,]
livs <- which(subtab$dead == 0)
n <- length(subtab$day)
if(sum(subtab$dead) <  n ) {
output <- 1}
#<- sort(subtab$day, decreasing = FALSE)[length(livs)-1]}
if(sum(subtab$dead) == n){output <- 2}
if(sum(subtab$dead) == 0){output <- 3}
return(output)
}
#interval is sometimes (0:2 not 0:1 or 1:2) It appears all 1's are there, but not
fillStat <- function(UIDs){
indexs <- which(rMelt$UID == UIDs)
if(length(indexs) == 0){print("index not found")}
subtab <- rMelt[indexs,]
if(sum(subtab$dead) < 1){
output <- 0
}
else{
output <- 1
}
return(output)
}
thirdtest <- function(UIDs){
indexs <- which(rMelt$UID == UIDs)
output <- length(indexs)
}
fourtest <- function(UIDs){
indexs <- which(rMelt$UID == UIDs)
subtab <- rMelt[indexs,]
livs <- which(subtab$dead == 0)
n <- length(subtab$day)
output <- paste(n, length(livs), sep = "-")
}
SurvTab$Status <- sapply(SurvTab$UID, FUN = fillStat)
SurvTab$Time <- as.numeric(sapply(SurvTab$UID, FUN = fillTime))
SurvTab$strTime <-as.numeric(sapply(SurvTab$UID, FUN = fillTimeTwo))
SurvTab$Test1 <- sapply(SurvTab$UID, FUN = fillTime.test)
SurvTab$Test2 <- sapply(SurvTab$UID, FUN = fillTimeTwo.test)
SurvTab$Test3 <- sapply(SurvTab$UID, FUN = thirdtest)
SurvTab$Test4 <- sapply(SurvTab$UID, FUN = fourtest)
#Now we have the data we can make the survival object
SurvTab$Surv <- Surv(time = SurvTab$Time, event = SurvTab$Status)
SurvTab$Surv2 <- Surv(time = SurvTab$strTime, time2 = SurvTab$Time,
event = SurvTab$Status, type = "interval")
# fst<-which(DataMelt$UID == DataMelt$UID[1])
# DataMelt[fst,]
#
# naa <- which(is.na(SurvTab$Surv2)==TRUE)
# errortab<-SurvTab[naa,]
# View(errortab)
# probData1<-which(DataMelt$UID == errortab$UID[1])
# probData2<-which(DataMelt$UID == errortab$UID[2])
# probData2<-which(DataMelt$UID == errortab$UID[3])
#
# View(DataMelt[probData1,])
# View(DataMelt[probData2,])
# View(DataMelt[probData2,])
initial <- which(DataMelt$day == 1)
init.data <- DataMelt[initial,]
#Merge Surv data with factor data
IndTab <- merge(SurvTab, init.data,by = "UID")
###############################################################################
###Now we can actually start analysis
#but day is IV.
#so make indicators for both variables for connections
don <- which(IndTab$days.after.paint == 1)
dni <- which(IndTab$days.after.paint == 90)
doe <- which(IndTab$days.after.paint == 180)
##It should be powered to compare the curves between
#5A and Control at each time point.
#so create paint indicators
ifa <- which(IndTab$paint == "5A")
ico <- which(IndTab$paint == "CO")
icf <- which(IndTab$paint == "CF")
#create exposure time indicators
oneh <- which(IndTab$exp.time == "01H")
thrh <- which(IndTab$exp.time == "03H")
sixh <- which(IndTab$exp.time == "06H")
tweh <- which(IndTab$exp.time == "24H")
##join indicators as appropriate
#5A and Controls for comp
ifc <- union(ifa, ico)
icc <- union(icf, ico)
iff <- union(ifa, icf)
#intersect paint and exposure
fcon <- intersect(ifc, oneh)
fcth <- intersect(ifc, thrh)
fcsi <- intersect(ifc, sixh)
fctw <- intersect(ifc, tweh)
cctw <- intersect(icc, tweh)
fftw <- intersect(iff, tweh)
#interset above with days since paint.
onfcon <- intersect(fcon, don)
onfcth <- intersect(fcth, don)
onfcsi <- intersect(fcsi, don)
onfctw <- intersect(fctw, don)
oncctw <- intersect(cctw, don)
onfftw <- intersect(fftw, don)
nifcon <- intersect(fcon, dni)
nifcth <- intersect(fcth, dni)
nifcsi <- intersect(fcsi, dni)
nifctw <- intersect(fctw, dni)
nicctw <- intersect(cctw, dni)
nifftw <- intersect(fftw, dni)
oefcon <- intersect(fcon, doe)
oefcth <- intersect(fcth, doe)
oefcsi <- intersect(fcsi, doe)
oefctw <- intersect(fctw, doe)
oecctw <- intersect(cctw, doe)
oefftw <- intersect(fftw, doe)
#I need to look into how to compare for 24hrs, 5A an Cf to con
#w/o comparing to each other.
survdiff(IndTab$Surv2[onfcon] ~ IndTab$paint[onfcon], rho = 1)
survdiff(IndTab$Surv2[onfcon] ~ IndTab$paint[onfcon], rho = 0)
coxph(IndTab$Surv2[onfcon] ~ IndTab$paint[onfcon])
ictest(IndTab$Surv2[onfcon] ~ IndTab$paint[onfcon], rho = 0)
#Conventional Log-rank
survdiff(IndTab$Surv[onfcon] ~ IndTab$paint[onfcon]+IndTab$TreatQuad[onfcon])
?survdiff
### To compare curves we need to do a log-rank test, which in R requiress us to
##transform data into a Survival Object
##This requires us to have a time (start of interval), time2(end of interval),
## as well as the event we care about,ie, death.
#put status and interval together so they can be used in same function
#indexs are not being found
DataMelt$UID <- paste(DataMelt$INSECT, DataMelt$days.after.paint, sep="-")
DataMelt$day <- as.numeric(DataMelt$day)
#Remove day 0 and 2, so that each data is the same.
ceros <- which(DataMelt$day == 0)
twos <- which(DataMelt$day == 2)
xtra <- union(ceros, twos)
nodata<-which(DataMelt$status == "")
rdc<- union(xtra,nodata)
rMelt <- DataMelt[-rdc,]
UID<-unique(DataMelt$UID)
SurvTab<-data.frame(UID)
fillTime <- function(UIDs){
indexs <- which(rMelt$UID == UIDs)
if(length(indexs) == 0){print("index not found")}
subtab <- rMelt[indexs,]
if(sum(subtab$dead) == 0){
output<- max(subtab$day)
}
else{
deaths <- which(subtab$dead == 1)
output <- min(subtab$day[deaths])
}
return(output)
}
fillTime.test <- function(UIDs){
indexs <- which(rMelt$UID == UIDs)
if(length(indexs) == 0){print("index not found")}
subtab <- rMelt[indexs,]
if(sum(subtab$dead) == 0){
output<- 1
}
else{
deaths <- which(subtab$dead == 1)
output <- 2
}
return(output)
}
#Beginging of interval
fillTimeTwo <- function(UIDs){
indexs <- which(rMelt$UID == UIDs)
if(length(indexs) == 0){print("index not found")}
subtab <- rMelt[indexs,]
livs <- which(subtab$dead == 0)
n <- length(subtab$day)
if(sum(subtab$dead) <  n ) {
output <- max(subtab$day[livs])}
#<- sort(subtab$day, decreasing = FALSE)[length(livs)]}
if(sum(subtab$dead) == n){output <- 0}
if(sum(subtab$dead) == 0){output <- sort(c(subtab$day), decreasing = FALSE)[n-1]}
return(output)
}
fillTimeTwo.test <- function(UIDs){
indexs <- which(rMelt$UID == UIDs)
if(length(indexs) == 0){print("index not found")}
subtab <- rMelt[indexs,]
livs <- which(subtab$dead == 0)
n <- length(subtab$day)
if(sum(subtab$dead) <  n ) {
output <- 1}
#<- sort(subtab$day, decreasing = FALSE)[length(livs)-1]}
if(sum(subtab$dead) == n){output <- 2}
if(sum(subtab$dead) == 0){output <- 3}
return(output)
}
#interval is sometimes (0:2 not 0:1 or 1:2) It appears all 1's are there, but not
fillStat <- function(UIDs){
indexs <- which(rMelt$UID == UIDs)
if(length(indexs) == 0){print("index not found")}
subtab <- rMelt[indexs,]
if(sum(subtab$dead) < 1){
output <- 0
}
else{
output <- 1
}
return(output)
}
thirdtest <- function(UIDs){
indexs <- which(rMelt$UID == UIDs)
output <- length(indexs)
}
fourtest <- function(UIDs){
indexs <- which(rMelt$UID == UIDs)
subtab <- rMelt[indexs,]
livs <- which(subtab$dead == 0)
n <- length(subtab$day)
output <- paste(n, length(livs), sep = "-")
}
SurvTab$Status <- sapply(SurvTab$UID, FUN = fillStat)
SurvTab$Time <- as.numeric(sapply(SurvTab$UID, FUN = fillTime))
SurvTab$strTime <-as.numeric(sapply(SurvTab$UID, FUN = fillTimeTwo))
SurvTab$Test1 <- sapply(SurvTab$UID, FUN = fillTime.test)
SurvTab$Test2 <- sapply(SurvTab$UID, FUN = fillTimeTwo.test)
SurvTab$Test3 <- sapply(SurvTab$UID, FUN = thirdtest)
SurvTab$Test4 <- sapply(SurvTab$UID, FUN = fourtest)
#Now we have the data we can make the survival object
SurvTab$Surv <- Surv(time = SurvTab$Time, event = SurvTab$Status)
SurvTab$Surv2 <- Surv(time = SurvTab$strTime, time2 = SurvTab$Time,
event = SurvTab$Status, type = "interval")
# fst<-which(DataMelt$UID == DataMelt$UID[1])
# DataMelt[fst,]
#
# naa <- which(is.na(SurvTab$Surv2)==TRUE)
# errortab<-SurvTab[naa,]
# View(errortab)
# probData1<-which(DataMelt$UID == errortab$UID[1])
# probData2<-which(DataMelt$UID == errortab$UID[2])
# probData2<-which(DataMelt$UID == errortab$UID[3])
#
# View(DataMelt[probData1,])
# View(DataMelt[probData2,])
# View(DataMelt[probData2,])
initial <- which(DataMelt$day == 1)
init.data <- DataMelt[initial,]
#Merge Surv data with factor data
IndTab <- merge(SurvTab, init.data,by = "UID")
###############################################################################
###Now we can actually start analysis
#but day is IV.
#so make indicators for both variables for connections
don <- which(IndTab$days.after.paint == 1)
dni <- which(IndTab$days.after.paint == 90)
doe <- which(IndTab$days.after.paint == 180)
##It should be powered to compare the curves between
#5A and Control at each time point.
#so create paint indicators
ifa <- which(IndTab$paint == "5A")
ico <- which(IndTab$paint == "CO")
icf <- which(IndTab$paint == "CF")
#create exposure time indicators
oneh <- which(IndTab$exp.time == "01H")
thrh <- which(IndTab$exp.time == "03H")
sixh <- which(IndTab$exp.time == "06H")
tweh <- which(IndTab$exp.time == "24H")
##join indicators as appropriate
#5A and Controls for comp
ifc <- union(ifa, ico)
icc <- union(icf, ico)
iff <- union(ifa, icf)
#intersect paint and exposure
fcon <- intersect(ifc, oneh)
fcth <- intersect(ifc, thrh)
fcsi <- intersect(ifc, sixh)
fctw <- intersect(ifc, tweh)
cctw <- intersect(icc, tweh)
fftw <- intersect(iff, tweh)
#interset above with days since paint.
onfcon <- intersect(fcon, don)
onfcth <- intersect(fcth, don)
onfcsi <- intersect(fcsi, don)
onfctw <- intersect(fctw, don)
oncctw <- intersect(cctw, don)
onfftw <- intersect(fftw, don)
nifcon <- intersect(fcon, dni)
nifcth <- intersect(fcth, dni)
nifcsi <- intersect(fcsi, dni)
nifctw <- intersect(fctw, dni)
nicctw <- intersect(cctw, dni)
nifftw <- intersect(fftw, dni)
oefcon <- intersect(fcon, doe)
oefcth <- intersect(fcth, doe)
oefcsi <- intersect(fcsi, doe)
oefctw <- intersect(fctw, doe)
oecctw <- intersect(cctw, doe)
oefftw <- intersect(fftw, doe)
#I need to look into how to compare for 24hrs, 5A an Cf to con
#w/o comparing to each other.
survdiff(IndTab$Surv2[onfcon] ~ IndTab$paint[onfcon], rho = 1)
survdiff(IndTab$Surv2[onfcon] ~ IndTab$paint[onfcon], rho = 0)
coxph(IndTab$Surv2[onfcon] ~ IndTab$paint[onfcon])
ictest(IndTab$Surv2[onfcon] ~ IndTab$paint[onfcon], rho = 0)
#Conventional Log-rank
survdiff(IndTab$Surv[onfcon] ~ IndTab$paint[onfcon], strata= IndTab$TreatQuad[onfcon])
survdiff(IndTab$Surv[onfcon] ~ IndTab$paint[onfcon], strata= IndTab$TreatQuad[onfcon])
survdiff(IndTab$Surv[onfcon] ~ IndTab$paint[onfcon])
summary(survdiff(IndTab$Surv[onfcon] ~ IndTab$paint[onfcon]))
survdiff(IndTab$Surv[onfcon] ~ IndTab$paint[onfcon] + strata(IndTab$TreatQuad[onfcon])
)
survdiff(IndTab$Surv[onfcon] ~ IndTab$paint[onfcon] + strata(IndTab$TreatQuad[onfcon]))
coxph(IndTab$Surv[onfcon] ~ IndTab$paint[onfcon]+IndTab$TreatQuad[onfcon])
coxph(IndTab$Surv[onfcon] ~ IndTab$paint[onfcon]+cluster(IndTab$TreatQuad[onfcon]))
coxph(IndTab$Surv[onfcon] ~ IndTab$paint[onfcon]))
coxph(IndTab$Surv[onfcon] ~ IndTab$paint[onfcon])
coxph(IndTab$Surv[onfcon] ~ IndTab$paint[onfcon])
IndTab$Surv[onfcon]
coxph(IndTab$Surv[onfcon] ~ IndTab$paint[onfcon])
coxph(IndTab$Surv[nifcon] ~ IndTab$paint[nifcon])
xtabs(~paint, data = IndTab[onficon])
coxph(IndTab$Surv[nifcon] ~ IndTab$paint[nifcon])
coxph(IndTab$Surv ~ IndTab$treatment+cluster(IndTab$TreatQuad))
coxph(IndTab$Surv ~ IndTab$treatment+ IndTab$paint +cluster(IndTab$TreatQuad))
coxph(IndTab$Surv ~ IndTab$days.after.paint+ IndTab$paint +cluster(IndTab$TreatQuad))
coxph(IndTab$Surv ~ IndTab$days.after.paint+ IndTab$day+ IndTab$paint +cluster(IndTab$TreatQuad))4
coxph(IndTab$Surv ~ IndTab$days.after.paint+ IndTab$day+ IndTab$paint +cluster(IndTab$TreatQuad))
coxph(IndTab$Surv ~ IndTab$days.after.paint+ IndTab$exp.time+ IndTab$paint +cluster(IndTab$TreatQuad))
IndTab$days.after.paint <- factor(days.after.paint)
IndTab$days.after.paint <- factor(IndTab$days.after.paint)
coxph(IndTab$Surv ~ IndTab$treatment+ IndTab$paint +cluster(IndTab$TreatQuad))
coxph(IndTab$Surv ~ IndTab$treatment+ IndTab$paint +cluster(IndTab$TreatQuad))
coxph(IndTab$Surv ~ IndTab$days.after.paint+IndTrab$exp.time+ IndTab$paint +cluster(IndTab$TreatQuad))
coxph(IndTab$Surv ~ IndTab$days.after.paint+IndTab$exp.time+ IndTab$paint +cluster(IndTab$TreatQuad))
?coxph
?stargazer
coxm<-coxph(IndTab$Surv ~ IndTab$days.after.paint+IndTab$exp.time+ IndTab$paint +cluster(IndTab$TreatQuad))
stargazer(coxm)
stargazer(coxm, type ="html", out = "cox_model.html")
stargazer(coxm, type ="text", out = "cox_model.txt")
coxm
summary(coxm)
?coxph
?surv_test
install.packages("coin")
library(coin)
version()
version?
)
version
coin
?coin
?surv_test
stm <- surv_test(IndTab$Surv[oefcon] ~ IndTab$paint[oefcon]|IndTab$TreatQuad[oefcon]))
stm <- surv_test(IndTab$Surv[oefcon] ~ IndTab$paint[oefcon]|IndTab$TreatQuad[oefcon])
IndTab$TreatQuad
class(IndTab$TreatQuad)
IndTab$TreatQuad <- factor(IndTab$TreatQuad)
stm <- surv_test(IndTab$Surv[oefcon] ~ IndTab$paint[oefcon]|IndTab$TreatQuad[oefcon])
stm <- surv_test(IndTab$Surv[oefcon] ~ IndTab$paint[oefcon])
?logrank_test
stm <- logrank_test(IndTab$Surv[oefcon] ~ IndTab$paint[oefcon])
stm
stm <- logrank_test(IndTab$Surv[oefcon] ~ IndTab$paint[oefcon]|IndTab$TreatQuad[oefcon])
?interval
ictest(IndTab$Surv2[onfftw] ~ IndTab$paint[onfftw] + cluster(IndTab$TreatQuad), scores = "logrank1")
ictest(IndTab$Surv2[onfftw] ~ IndTab$paint[onfftw] + cluster(IndTab$TreatQuad[onfftw]), scores = "logrank1")
ictest(IndTab$Surv2[onfftw] ~ IndTab$paint[onfftw] + cluster(IndTab$TreatQuad[onfftw]), scores = "logrank1")
ictest(IndTab$Surv2[onfftw] ~ IndTab$paint[onfftw] + cluster(IndTab$TreatQuad[onfftw]), scores = "logrank1")
ictest(IndTab$Surv2[onfftw] ~ IndTab$paint[onfftw], scores = "logrank1")
survdiff(IndTab$Surv2[onfcon] ~ IndTab$paint[onfcon]+ cluster(IndTab$TreatQuad[onfcon], rho = 1)
)
survdiff(IndTab$Surv2[onfcon] ~ IndTab$paint[onfcon]+ cluster(IndTab$TreatQuad[onfcon]))
survdiff(IndTab$Surv[onfcon] ~ IndTab$paint[onfcon]+ cluster(IndTab$TreatQuad[onfcon]))
survdiff(IndTab$Surv[onfcth] ~ IndTab$paint[onfcth]+ cluster(IndTab$TreatQuad[onfcth]))
survdiff(IndTab$Surv[onfcon] ~ IndTab$paint[onfcon]+ cluster(IndTab$TreatQuad[onfcon]))
survdiff(IndTab$Surv[onfcon] ~ IndTab$paint[onfcon]+ cluster(IndTab$TreatQuad[onfcon]))
survdiff(IndTab$Surv[onfcth] ~ IndTab$paint[onfcth]+ cluster(IndTab$TreatQuad[onfcth]))
survdiff(IndTab$Surv[onfcth] ~ IndTab$paint[onfcth]+ cluster(IndTab$TreatQuad[onfcth]))
survdiff(IndTab$Surv[onfcth] ~ IndTab$paint[onfcth]+ cluster(IndTab$TreatQuad[onfcth]))
survdiff(IndTab$Surv[onfcsi] ~ IndTab$paint[onfcsi]+ cluster(IndTab$TreatQuad[onfcsi]))
survdiff(IndTab$Surv[onfctw] ~ IndTab$paint[onfctw]+ cluster(IndTab$TreatQuad[onfctw]))
survdiff(IndTab$Surv[oncctw] ~ IndTab$paint[oncctw]+ cluster(IndTab$TreatQuad[oncctw]))
survdiff(IndTab$Surv[nifcon] ~ IndTab$paint[nifcon]+ cluster(IndTab$TreatQuad[nifcon]))
survdiff(IndTab$Surv[nifcth] ~ IndTab$paint[nifcth]+ cluster(IndTab$TreatQuad[nifcth]))
survdiff(IndTab$Surv[nifcsi] ~ IndTab$paint[nifcsi]+ cluster(IndTab$TreatQuad[nifcsi]))
survdiff(IndTab$Surv[nifctw] ~ IndTab$paint[nifctw]+ cluster(IndTab$TreatQuad[nifctw]))
survdiff(IndTab$Surv[nicctw] ~ IndTab$paint[nicctw]+ cluster(IndTab$TreatQuad[nicctw]))
survdiff(IndTab$Surv[nicctw] ~ IndTab$paint[nicctw]+ cluster(IndTab$TreatQuad[nicctw]))
survdiff(IndTab$Surv[oefcon] ~ IndTab$paint[oefcon]+ cluster(IndTab$TreatQuad[oefcon]))
survdiff(IndTab$Surv[oefcth] ~ IndTab$paint[oefcth]+ cluster(IndTab$TreatQuad[oefcth]))
survdiff(IndTab$Surv[oefcsi] ~ IndTab$paint[oefcsi]+ cluster(IndTab$TreatQuad[oefcsi]))
survdiff(IndTab$Surv[oefctw] ~ IndTab$paint[oefctw]+ cluster(IndTab$TreatQuad[oefctw]))
survdiff(IndTab$Surv[oecctw] ~ IndTab$paint[oecctw]+ cluster(IndTab$TreatQuad[oecctw]))
survdiff(IndTab$Surv[onfftw] ~ IndTab$paint[onfftw]+ cluster(IndTab$TreatQuad[onfftw]))
survdiff(IndTab$Surv[onfftw] ~ IndTab$paint[onfftw]+ cluster(IndTab$TreatQuad[onfftw]))
survdiff(IndTab$Surv[nifftw] ~ IndTab$paint[nifftw]+ cluster(IndTab$TreatQuad[nifftw]))
survdiff(IndTab$Surv[oefftw] ~ IndTab$paint[oefftw]+ cluster(IndTab$TreatQuad[oefftw]))
