data=Compile[enona,])+geom_point(data=Compile[enona,])
eggtempavhigh<-eggtempavhigh+ggtitle("Number of Eggs Laid by Avg High Temp and Infection Status")
eggtempavhigh<-eggtempavhigh+facet_grid(. ~infected)+geom_smooth(method= "lm")
eggtempavhigh
#eggs by average low hum
eggtempavlow<-ggplot(aes( y= eggs, x= avtemplow, na.rm=TRUE),
data=Compile[enona,])+geom_point(data=Compile[enona,])
eggtempavlow<-eggtempavlow+ggtitle("Number of Eggs Laid by Avg Low Temperature and Infection Status")
eggtempavlow<-eggtempavlow+facet_grid(. ~infected)+geom_smooth(method= "lm")
eggtempavlow
#eggs by week max high
eggtemphigh<-ggplot(aes( y= eggs, x= tempmax, na.rm=TRUE),
data=Compile[enona,])+geom_point(data=Compile[enona,])
eggtemphigh<-eggtemphigh+ggtitle("Number of Eggs Laid by Max Temperature and Infection Status")
eggtemphigh<-eggtemphigh+facet_grid(. ~infected)+geom_smooth(method= "lm")
eggtemphigh
#eggs by week low high
eggtemplow<-ggplot(aes( y= eggs, x= tempmin, na.rm=TRUE),
data=Compile[enona,])+geom_point(data=Compile[enona,])
eggtemplow<-egghumlow+ggtitle("Number of Eggs Laid by Low Temperature and Infection Status")
eggtemplow<-egghumlow+facet_grid(. ~infected)+geom_smooth(method= "lm")
eggtemplow
#eggs by temp diff
eggtempdiff<-ggplot(aes( y= eggs, x= tempdiff, na.rm=TRUE),
data=Compile[enona,])+geom_point(data=Compile[enona,])
eggtempdiff<-eggtempdiff+ggtitle("Number of Eggs Laid by Largest Temperature Difference and Infection Status")
eggtempdiff<-eggtempdiff+facet_grid(. ~infected)+geom_smooth(method= "lm")
eggtempdiff
Compile$avtemp <- as.numeric(Compile$avtemp)
eggtem<-ggplot(aes( y= eggs, x= avtemp, na.rm=TRUE),
data=Compile[enona,])+geom_point(data=Compile[enona,])
eggtem<-eggtem+ggtitle("Number of Eggs Laid by Temperature and Infection Status")
eggtem<-eggtem+facet_grid(. ~infected)+geom_smooth(method= "lm")
eggtem
#lets compare to see what would be best for model
#these don't have as important interactions
lmavtemp<-lm(eggs~avtemp, data=Compile) #Rsq=0.017
lmavtemphigh<-lm(eggs~avtemphigh, data=Compile)#Rsq=0.02
lmavtemplow<-lm(eggs~avtemplow, data=Compile)#Rsq=0.010
lmavmin<-lm(eggs~tempmin, data=Compile)#Rsq=0.011
lmtempmax<-lm(eggs~tempmax, data=Compile)#Rsq=0.010
lmtempdiff<-lm(eggs~tempdiff, data=Compile)#Rsq=0.009
mavtemp<-glm(eggs~avtemp+infected, data=Compile) #AIC=13900
mavtemphigh<-glm(eggs~avtemphigh*infected, data=Compile)#AIC=13900
mavtemplow<-glm(eggs~avtemplow*infected, data=Compile)#AIC=13920
mavmin<-glm(eggs~tempmin*infected, data=Compile)
mtempmax<-glm(eggs~tempmax*infected, data=Compile)
mtempdiff<-glm(eggs~tempdiff*infected, data=Compile)
###################
#Now for hatching
#hatch by humidity
humhatch<-lm(Compile$hatch ~Compile$avhum)
plot(Compile$avhum, Compile$hatch,
main="Hatching by Humidity", ylab="Number of Eggs",
xlab="Humidity(%)")
#hatch by average hum
hchhum<-ggplot(aes( y= hatch, x= avhum, na.rm=TRUE),
data=Compile[hnona,])+geom_point(data=Compile[hnona,])
hchhum<-hchhum+ggtitle("Number of Eggs Hatched by Humidity and Infection Status")
hchhum<-hchhum+facet_grid(. ~infected)+geom_smooth(method= "lm")
hchhum
#hatch average high hum
hchhumavhigh<-ggplot(aes( y= hatch, x= avhumhigh, na.rm=TRUE),
data=Compile[hnona,])+geom_point(data=Compile[hnona,])
hchhumavhigh<-hchhumavhigh+ggtitle("Number of Eggs Hatched by Max Humidity and Infection Status")
hchhumavhigh<-hchhumavhigh+facet_grid(. ~infected)+geom_smooth(method= "lm")
hchhumavhigh
#hatch by average low hum
hchhumavlow<-ggplot(aes( y= hatch, x= avhumlow, na.rm=TRUE),
data=Compile[hnona,])+geom_point(data=Compile[hnona,])
hchhumavlow<-hchhumavlow+ggtitle("Number of Eggs Hatched by Average Low Humidity and Infection Status")
hchhumavlow<-hchhumavlow+facet_grid(. ~infected)+geom_smooth(method= "lm")
hchhumavlow
#hatch by week max high
hchhumhigh<-ggplot(aes( y= hatch, x= hummax, na.rm=TRUE),
data=Compile[hnona,])+geom_point(data=Compile[hnona,])
hchhumhigh<-hchhumhigh+ggtitle("Number of Eggs Hatched by Max Humidity and Infection Status")
hchhumhigh<-hchhumhigh+facet_grid(. ~infected)+geom_smooth(method= "lm")
hchhumhigh
#hatch by week low high
hchhumlow<-ggplot(aes( y= hatch, x= hummin, na.rm=TRUE),
data=Compile[hnona,])+geom_point(data=Compile[hnona,])
hchhumlow<-hchhumlow+ggtitle("Number of Eggs Hatched by Low Humidity and Infection Status")
hchhumlow<-hchhumlow+facet_grid(. ~infected)+geom_smooth(method= "lm")
hchhumlow
#hatch by hum diff
hchhumdiff<-ggplot(aes( y= hatch, x= humdiff, na.rm=TRUE),
data=Compile[hnona,])+geom_point(data=Compile[hnona,])
hchhumdiff<-hchhumdiff+ggtitle("Number of Eggs Hatced by Largest Humidity Difference and Infection Status")
hchhumdiff<-hchhumdiff+facet_grid(. ~infected)+geom_smooth(method= "lm")
hchhumdiff
############################
#hatch by temp
temphatch<-lm(Compile$hatch ~Compile$avtemp)
plot(Compile$avtemp, Compile$hatch,
main="Hatching by Temperature", ylab="Number of Eggs",
xlab="Temperature(C)")
#hatch by average temp
hchtemp<-ggplot(aes( y= hatch, x= avtemp, na.rm=TRUE),
data=Compile[hnona,])+geom_point(data=Compile[hnona,])
hchtemp<-hchtemp+ggtitle("Number of Eggs Hatched by Temp and Infection Status")
hchtemp<-hchtemp+facet_grid(. ~infected)+geom_smooth(method= "lm")
hchtemp
#hatch average high temp
hchtempavhigh<-ggplot(aes( y= hatch, x= avtemphigh, na.rm=TRUE),
data=Compile[hnona,])+geom_point(data=Compile[hnona,])
hchtempavhigh<-hchtempavhigh+ggtitle("Number of Eggs Hatched by Max Temp and Infection Status")
hchtempavhigh<-hchtempavhigh+facet_grid(. ~infected)+geom_smooth(method= "lm")
hchtempavhigh
#hatch by average low temp
hchtempavlow<-ggplot(aes( y= hatch, x= avtemplow, na.rm=TRUE),
data=Compile[hnona,])+geom_point(data=Compile[hnona,])
hchtempavlow<-hchtempavlow+ggtitle("Number of Eggs Hatched by Average Low Temp and Infection Status")
hchtempavlow<-hchtempavlow+facet_grid(. ~infected)+geom_smooth(method= "lm")
hchtempavlow
#hatch by week max high
hchtemphigh<-ggplot(aes( y= hatch, x= tempmax, na.rm=TRUE),
data=Compile[hnona,])+geom_point(data=Compile[hnona,])
hchtemphigh<-hchtemphigh+ggtitle("Number of Eggs Hatched by Max Temp and Infection Status")
hchtemphigh<-hchtemphigh+facet_grid(. ~infected)+geom_smooth(method= "lm")
hchtemphigh
#hatch by week min low
hchtemplow<-ggplot(aes( y= hatch, x= tempmin, na.rm=TRUE),
data=Compile[hnona,])+geom_point(data=Compile[hnona,])
hchtemplow<-hchtemplow+ggtitle("Number of Eggs Hatched by Low Temp and Infection Status")
hchtemplow<-hchtemplow+facet_grid(. ~infected)+geom_smooth(method= "lm")
hchtemplow
#hatch by hum diff
hchtempdiff<-ggplot(aes( y= hatch, x= tempdiff, na.rm=TRUE),
data=Compile[hnona,])+geom_point(data=Compile[hnona,])
hchtempdiff<-hchtempdiff+ggtitle("Number of Eggs Hatced by Largest Temp Difference and Infection Status")
hchtempdiff<-hchtempdiff+facet_grid(. ~infected)+geom_smooth(method= "lm")
hchtempdiff
################################
# ##For each time line
# glm(cases~rhs(data$year,2003)+lhs(data$year,2003)+ offset(log(population)), data=data,
#subset=28:36, family=poisson())
#Now lets make a graph of Eggs by week
infected<-which(Compile$infected==1)
controled<-which(Compile$infected==0)
uniquebugs<-unique(Compile$id)
plot(Compile$week[infected], Compile$eggs[infected]+rnorm(length(Compile$eggs[infected]), 0.5, 1), col="red")
#Now lets make a graphs o week and date by eggs of infected insects
infected<-which(Compile$infected==1)
controled<-which(Compile$infected==0)
uniquebugs<-unique(Compile$id)
plot(Compile$week[infected], Compile$eggs[infected], col="red")
plot(Compile$date[infected], Compile$eggs[infected], col="red")
#Compare infected hatch and by week.
par(mfrow=c(2,4))
#infected
#pdf(file="graphs/EggsandHatchvsWeekboxanddotplots.pdf")
plot(Compile$week[infected], Compile$eggs[infected], main="Infected Eggs Laid by Week",
ylab="Weeks", xlab="Eggs")
boxplot(Compile$eggs[infected] ~c(Compile$week[infected]), main="Infected Eggs Laid by Week",
ylab="Weeks", xlab="Eggs")
plot(Compile$week[infected], Compile$hatch[infected], main="Infected Eggs Hatched by Week",
ylab="Weeks", xlab="Eggs")
boxplot(Compile$hatch[infected] ~Compile$week[infected], main="Infected Eggs Hatched by Week",
ylab="Weeks", xlab="Eggs")
#not infected
plot(Compile$week[controled], Compile$eggs[controled], main="Control Eggs Laid by Week",
ylab="Weeks", xlab="Eggs")
boxplot(Compile$eggs[controled] ~Compile$week[controled], main="Control Eggs Laid by Week",
ylab="Weeks", xlab="Eggs")
plot(Compile$week[controled], Compile$hatch[controled], main="Control Eggs Hatched by Week",
ylab="Weeks", xlab="Eggs")
boxplot(Compile$hatch[controled] ~Compile$week[controled], main="Control Eggs Hatched by Week",
ylab="Weeks", xlab="Eggs")
##create a table for total eggs and hatch for each female.
#make two rows to fil(l
Compile$eggs<-as.numeric(Compile$eggs)
Compile$egg_total<-Compile$eggs*NA
Compile$hatch_total<-Compile$eggs*NA
#create loop that does calculation
for (i in 1:max(Compile$idnum)){
is<-which(Compile$idnum==i)
toteggs<-sum(Compile$eggs[is], na.rm=TRUE)
tothatches<-sum(Compile$hatch[is], na.rm=TRUE)
Compile$egg_total[is]<-toteggs
Compile$hatch_total[is]<-tothatches
}
#for histogram create unique
dayone <- which(Compile$week==1)
#par(mfrow=c(1,1))
pdf("egg_total_hist.pdf")
hist(Compile$egg_total[dayone], breaks=max(Compile$egg_total[dayone]))
#dev.off()
#dev.off()
#create a factor for mice so that
mice<-unique(Compile$mouse)
mouseidnum<-c(1:length(mice))
mousetable<-data.frame(mice,mouseidnum)
mousetable$mouseidnum<-as.factor(mousetable$mouseidnum)
Compile$mouseidnum<-Compile$trial*0
for(i in 1:length(mice)){
micenumi<-which(mousetable$mouseidnum==i)
micematch<-which(Compile$mouse==mousetable$mice[micenumi])
Compile$mouseidnum[micematch]<-i
}
write.csv(Compile,"CompiledFertilityData.csv")
##create total values for each insect
#create rows to fill by loop
#make two rows to fil(l
Compile$lifespan<-Compile$eggs*NA
Compile$avtemp_total<-Compile$eggs*NA
Compile$avtemplow_total<-Compile$eggs*NA
Compile$avhightemp_total<-Compile$eggs*NA
Compile$avhighhum_total<-Compile$eggs*NA
Compile$hightemp_total<-Compile$eggs*NA
Compile$highhum_total<-Compile$eggs*NA
Compile$lowtemp_total<-Compile$eggs*NA
Compile$lowtemp_total<-Compile$eggs*NA
max(Compile$date)
min(Compile$date)
max(Compile$date)-min(Compile$date)
max(Compile$week)-min(Compile$week)
bugone<-which(Compile$idnum==1)
buggy<-Compile[bugone,]
View(buggy)
bugone<-which(Compile$idnum==1)
buggy<-Compile[bugone,]
squashed<-which(buggy$alive==0)
min(buggy$week[squashed])
Compile$weekn <- as.numeric(Compile$week)
#create a test
bugone <- which(Compile$idnum==1)
buggy <- Compile[bugone,]
squashed <- which(buggy$alive==0)
min(buggy$week[squashed])
Compile$weekn <- as.numeric(Compile$week)
#create a test
bugone <- which(Compile$idnum==1)
buggy <- Compile[bugone,]
squashed <- which(buggy$alive==0)
min(buggy$weekn[squashed])
for (i in 1:max(Compile$idnum)) {
is<-which(Compile$idnum==i)
#average temperatures
avgt<-mean(Compile$avtemp[is], na.rm=TRUE)
avght<-mean(Compile$avtemphigh[is], na.rm=TRUE)
avglt<-mean(Compile$avtemplow[is], na.rm=TRUE)
#average humidity
avgh<-mean(Compile$avhum[is], na.rm=TRUE)
avghh<-mean(Compile$avhumhigh[is], na.rm=TRUE)
avglh<-mean(Compile$avhumlow[is], na.rm=TRUE)
#Max and min Temp
maxt <- max(Compile$tempmax[is], na.rm=TRUE)
mint <- min(Compile$tempmin[is], na.rm=TRUE)
#Max and min hum
maxh <- max(Compile$hummax[is], na.rm=TRUE)
minh <- min(Compile$tempmin[is], na.rm=TRUE)
#Longevity
Compile$weekn <- as.numeric(Compile$week)
#create a test
squashed <- which(Compile$alive[is]==0)
min(Compile$weekn[squashed])
#Put the calculated items into the appropriate vectors of data frame
Compile$lifespan[is]<-
Compile$avtemp_total[is]<-avgt
Compile$avlowtemp_total[is]<-avglt
Compile$avhightemp_total[is]<-avght
Compile$avhum_total[is]<-avgh
Compile$avlowhum_total[is]<-avhlh
Compile$avhighhum_total[is]<-avhhh
Compile$hightemp_total[is]<-maxt
Compile$highhum_total[is]<-maxh
Compile$lowtemp_total[is]<-mint
Compile$lowtemp_total[is]<-minh
}
for (i in 1:max(Compile$idnum)) {
is<-which(Compile$idnum==i)
#average temperatures
avgt<-mean(Compile$avtemp[is], na.rm=TRUE)
avght<-mean(Compile$avtemphigh[is], na.rm=TRUE)
avglt<-mean(Compile$avtemplow[is], na.rm=TRUE)
#average humidity
avgh<-mean(Compile$avhum[is], na.rm=TRUE)
avghh<-mean(Compile$avhumhigh[is], na.rm=TRUE)
avglh<-mean(Compile$avhumlow[is], na.rm=TRUE)
#Max and min Temp
maxt <- max(Compile$tempmax[is], na.rm=TRUE)
mint <- min(Compile$tempmin[is], na.rm=TRUE)
#Max and min hum
maxh <- max(Compile$hummax[is], na.rm=TRUE)
minh <- min(Compile$tempmin[is], na.rm=TRUE)
#Longevity
Compile$weekn <- as.numeric(Compile$week)
#create a test
squashed <- which(Compile$alive[is]==0)
ls<-min(Compile$weekn[squashed])
#Put the calculated items into the appropriate vectors of data frame
Compile$lifespan[is]<-ls
Compile$avtemp_total[is]<-avgt
Compile$avlowtemp_total[is]<-avglt
Compile$avhightemp_total[is]<-avght
Compile$avhum_total[is]<-avgh
Compile$avlowhum_total[is]<-avhlh
Compile$avhighhum_total[is]<-avhhh
Compile$hightemp_total[is]<-maxt
Compile$highhum_total[is]<-maxh
Compile$lowtemp_total[is]<-mint
Compile$lowtemp_total[is]<-minh
}
###This code cleans up the data for the bed bug inesfly paint study
##Install and load necessary packages
#Install packages
#install.packages(c("reshape","survival","tables"))
#load packages
library(reshape)
library(survival) #for cox proportional hazaard
library(tables)
library(doBy)#use summaryBy function
library(ggplot2)
##set up the working directory
setwd("C:/Users/tradylan/Documents/Laboratory/Inesfly_Paint_Bed_Bug_Trial")
###bring in data
#for exposure 1 day post paint with individual measurements
D1Ind <- read.csv("DATA/Inesfly_Ind_1D.csv")
#for exposure 1 day post paint with jar counts
D1Jar <- read.csv("DATA/Inesfly_Jar_1D.csv")
#bring in temperature data
TEMPHUM<- read.csv("DATA/InesflyTempHum.csv")
#bring in paint data
PAINTDIST<- read.csv("DATA/InesflyPaintDistribution.csv")
##Bring in Pilot
Pilot1D<-read.csv("DATA/InesflyPilot_1D.csv")
Pilot100D<-read.csv("DATA/InesflyPilot_100D.csv")
##
#Split the unicode into relevant information for Individual observations
D1Ind$INSECT <- as.character(D1Ind$INSECT)
D1Ind$TIME <- substr(D1Ind$INSECT, 1, 3)
D1Ind$TREATMENT <- substr(D1Ind$INSECT, 5, 6)
D1Ind$QUAD <- substr(D1Ind$INSECT, 8, 8)
#D1Ind$NUM <- substr(D1Ind$INSECT, 10, 11)
D1Ind$EXPOSE<-substr(D1Ind$INSECT, 1, 6)
#Split the exposure code into relevant information for
#the group level observations
#substring that character to split the exposure time by paint
igr <- grep("5A",D1Jar$Exposure)
cloro <- grep("CF", D1Jar$Exposure )
control <- grep("CO", D1Jar$Exposure )
D1Jar$paint <- (c(1:length(D1Jar$Exposure))*0)
D1Jar$paint[igr] <- "5A"
D1Jar$paint[cloro] <- "CF"
D1Jar$paint[control] <- "CO"
#and by length of time
#make vector of indecies for each time
oneh <- grep("1",D1Jar$Exposure)
threeh <- grep("3", D1Jar$Exposure )
sixh <- grep("6", D1Jar$Exposure )
oned <- grep("24", D1Jar$Exposure )
#make a blank table
D1Jar$time <- c(1:length(D1Jar$Exposure))*0
#Insert the corresponding time into the table
D1Jar$time[oneh] <- 1
D1Jar$time[threeh] <- 3
D1Jar$time[sixh] <- 6
D1Jar$time[oned] <- 24
#Remove blank column
chop <- which(names(D1Ind)=="X")
D1Ind <- D1Ind[,-chop]
#In order to get to cox test, reshape the data.
LD1Ind<-melt(D1Ind, id=c("INSECT","STAGE","TIME","EXPOSE", "QUAD", "NOTES",
"TREATMENT"))
#the variable needs to be turned into a date object
#so first make it a character
LD1Ind$variable<-as.character(LD1Ind$variable)
#remove the X's
LD1Ind$variable <- gsub("X","",LD1Ind$variable)
#replace the "." with "-"
LD1Ind$variable <- gsub("[.]","-", LD1Ind$variable)
LD1Ind$variable<-as.Date(LD1Ind$variable)
#to prevent confusion lets rename "variable" to "date"
chngname<-which(names(LD1Ind)=="variable")
names(LD1Ind)[chngname] <- "DATE"
#lets also rename "value" to "status"
chval<-which(names(LD1Ind)=="value")
names(LD1Ind)[chval] <- "STATUS"
#==============================================================================
###Now that we have the data in a usable table, lets split the status into binary
#find
alive <- which(LD1Ind$STATUS== "A")
knockdown <- which(LD1Ind$STATUS=="K")
dead <- which(LD1Ind$STATUS=="D")
unviable <- c(dead, knockdown)
living <- c(alive, knockdown)
##create columns
#make Quad numeric in order to create blank columns
LD1Ind$QUAD<-as.numeric(LD1Ind$QUAD)
#create blank columns for each status.
LD1Ind$alive <- LD1Ind$QUAD*0
LD1Ind$alive[alive] <- 1
LD1Ind$knockdown <- LD1Ind$QUAD*0
LD1Ind$knockdown[knockdown] <- 1
LD1Ind$dead <- LD1Ind$QUAD*0
LD1Ind$dead[dead] <- 1
LD1Ind$unviable <- LD1Ind$QUAD*0
LD1Ind$unviable[unviable] <- 1
LD1Ind$living <- LD1Ind$QUAD*0
LD1Ind$living[living] <- 1
#==============================================================================
##Lets clean up the data so that we get smooth transitions
#If dead, then becomes knockdown mark as knock down.
#also consider case where knock down went to alive.
#consider removing 2015-09-11 and 13 since data not available for 24hr.
#also add back collective data to 1H-5A 2015-09-2015
#==============================================================================
#lets do simple calculations finding the number and proportion by group
##Use the summary By funciton on Expose and Date to get counts
treatmentsum<-summaryBy(alive+dead+knockdown+unviable+living~EXPOSE+DATE+
TIME+TREATMENT,data=LD1Ind, FUN=sum,na.rm=TRUE,
keep.names=TRUE)
#create column for total insect
treatmentsum$totalbug<-(treatmentsum$alive+treatmentsum$unviable)
#remove rows with totalbug=0
nobug<-which(treatmentsum$totalbug==0)
treatmentsum<-treatmentsum[-nobug,]
##add rows for total on each treatment and the total for each day
#treatment
sumpaint <- summaryBy(alive+dead+knockdown+unviable+living+totalbug~TREATMENT+DATE,
data=treatmentsum, FUN=sum,na.rm=TRUE, keep.names=TRUE)
#day
sumtdate <-summaryBy(alive+dead+knockdown+unviable+living+totalbug~DATE,
data=treatmentsum, FUN=sum,na.rm=TRUE, keep.names=TRUE)
##now add empty rows so you can join both tables together.
#treatment
sumpaint$EXPOSE<-sumpaint$alive*NA
#sumpaint$DATE<-sumpaint$alive*NA
#sumpaint$DATE<-as.Date(sumpaint$DATE, origin="1970-01-01")
sumpaint$TIME<-sumpaint$alive*NA
#DATE
sumtdate$EXPOSE<-sumtdate$alive*NA
sumtdate$TREATMENT<-sumtdate$alive*NA
sumtdate$TIME<-sumtdate$alive*NA
##join the three tables together
joined<-rbind(treatmentsum, sumtdate)
sumtab<-rbind(joined, sumpaint)
#make proportionality
treatmentsum$palive<-treatmentsum$alive/treatmentsum$totalbug
treatmentsum$pdead<-treatmentsum$dead/treatmentsum$totalbug
treatmentsum$pKD<-treatmentsum$knockdown/treatmentsum$totalbug
treatmentsum$pUV<- treatmentsum$unviable/treatmentsum$totalbug
treatmentsum$pliving<-treatmentsum$living/treatmentsum$totalbug
#==============================================================================
#Create Nice table with summary
#==============================================================================
###Lets create curves showing the proportion of status seperated by treatment.
#Create indecies for each paint
fiveA <-which(treatmentsum$TREATMENT=="5A")
cnt <- which(treatmentsum$TREATMENT=="CO")
Clf <- which(treatmentsum$TREATMENT=="CF")
##Make plots
#pdf()
#5a
par(mfrow=c(1,3))
a<-ggplot(data= treatmentsum[fiveA,], aes( y=pdead , x= DATE, group= TIME, color=TIME,
na.rm=TRUE))+geom_line()+geom_point()
a<-a+ggtitle("5A-IGR")
a<-a+scale_fill_manual(values=c("blue", "red"))
a
#control
b<-ggplot(data= treatmentsum[cnt,], aes( y=pdead , x= DATE, group= TIME, color=TIME,
na.rm=TRUE))+geom_line()+geom_point()
b<-b+ggtitle("Control")
b<-b+scale_fill_manual(values=c("blue", "red"))
b
#cf
c<-ggplot(data= treatmentsum[Clf,], aes( y=pdead , x= DATE, group= TIME, color=TIME,
na.rm=TRUE))+geom_line()+geom_point()
c<-c+ggtitle("Clorofenapyr")
c<-c+scale_fill_manual(values=c("blue", "red"))
c
#dev.off()
#Clorofenapyr
par(mfrwo=c(1,1))
##Lets plot death and unviable by time on each data set
#DEATH
pdf("TABLES_GRAPHS/DeathCurv.pdf")
g<-ggplot(data= treatmentsum, aes( y=pdead , x= DATE, group= EXPOSE, color=EXPOSE,
na.rm=TRUE))+geom_line()+geom_point()
g<-g+ggtitle("Percentage Dead Over Time")+ylab("Percent Dead")
g<-g+scale_fill_manual(values=c("blue", "red"))
g
#dev.off()
#Unviable
#pdf("PerUV.pdf")
h<-ggplot(data= treatmentsum, aes( y=pUV , x= DATE, group= EXPOSE, color=EXPOSE,
na.rm=TRUE))+geom_line()+geom_point()
h<-h+ggtitle("Percentage Unviable Over Time")+ylab("Percentage Dead or Knockdown")
h<-h+scale_fill_manual(values=c("blue", "red"))
h
dev.off()
a<-(27.8^2)+(4.9^2)
a<-(27.8^2)+(4.9^2)
2^2
a<-((27.8^2)+(4.9^2))
a
b<-((32.7^2))
b-a
a-b
(17.8^2)+(9.3^2)+(9.1^2)+(7.3^2)+(4.9^2)+(4.5^2)+(4.3^2)+(4.1^2)+(3.6^2)
33^2
a<-((17.8^2)+(4.9^2))
b-a
b<-((22.7^2))
b-a
> (17.8^2)+(9.3^2)+(9.1^2)+(7.3^2)+(4.9^2)+(4.5^2)+(4.3^2)+(4.1^2)+(3.6^2)+(33^2)
(17.8^2)+(9.3^2)+(9.1^2)+(7.3^2)+(4.9^2)+(4.5^2)+(4.3^2)+(4.1^2)+(3.6^2)+(33^2)
(17.8^2)+(9.3^2)+(9.1^2)+(7.3^2)+(4.9^2)+(4.5^2)+(4.3^2)+(4.1^2)+(3.6^2)+(3^2)+(3^2)+(3^2)+(3^2)+(3^2)+(3^2)+(3^2)+(3^2)+(3^2)+(3^2)+(3^2)
(17.8)+(9.3)+(9.1)+(7.3)+(4.9)+(4.5)+(4.3)+(4.1)+(3.6)+(3)+(3)+(3)+(3)+(3)+(3)+(3)+(3)+(3)+(3)+(3)
(17.8^2)+(9.3^2)+(9.1^2)+(7.3^2)+(4.9^2)+(4.5^2)+(4.3^2)+(4.1^2)+(3.6^2)+(3^2)+(3^2)+(3^2)+(3^2)+(3^2)+(3^2)+(3^2)+(3^2)+(3^2)+(3^2)+(3^2)+(2.1^2)
