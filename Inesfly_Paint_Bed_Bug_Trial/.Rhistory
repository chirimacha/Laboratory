a <- available.packages()
head(rownames(a), 3)
install.packages("slidify")
install.packages(c("ggplot2", "devtools"))
install.packages("slidify")
source("http://bioconductor.org/bioLite.R")
biocLite()
library(ggplot2)
search()
"2015-03-23"+30
a<-as.Date("2015-03-23")
a+40
+90
a+90
a+100
-7
a+93
x<-c(0,1,2,NA, FALSE)
x
is.na(x[3])
requiredPackages <- c("XML"
,"doParallel", "lubridate","PBSmapping","plyr","inline","Rcpp"
)
packages <- requiredPackages[!(requiredPackages %in% rownames(installed.packages()))]
if(length(packages) > 0) {
install.packages(packages)
}
fa<-1100+200+26150+2000+2865
fa
2*32315
fees<-((1958+370+168+250)*2)+150
fees
fees+health+rent
fees<-((1958+370+168+250)*2)+150
health<-1570*2
rent<-4326*2
fees+health+rent
tuition(21088*2)
fa<-(1100+200+26150+2000+2865)*2
fa
*
tuition<-(21088*2)
fees<-((1958+370+168+250)*2)+150
health<-1570*2
rent<-4326*2
expense<-fees+health+rent
expenses
expense
expense+tuition
y<-expense+tuition
fa-y
tuition
health+fees
fees
?binom.test
bisampsize<-function(m){
((1.96/m)^2)*0.25
}
bisampsize(0.5)
bisampsize<-function(m){
((1.96/m)^2)*0.25
}
bisampsize(0.25)
bisampsize<-function(m){
((1.96/m)^2)*0.25
}
bisampsize(0.20)
1/12
3/12
binom.power
library(binom)
install.packages(binom)
install.packages("binom")
version
x4 <- sample(1:10, 5, replace=T)
x4
tray1<-sample(1:4, 4)
tray1`
r
)
q
;
''
'
""
)
asdf
104r
+
)
""
'
''
''
sample(1:4, 4)
sample(1:4, 4)
tray1<-
sample(1:4,4)
tray2<-sample(1:4,4)
tray3<-sample(1:4,4)
tray4<-sample(1:4,4)
tray1
tray2
tray3
tray4
###This code cleans up the data for the bed bug inesfly paint study
##Install and load necessary packages
#Install packages
#install.packages("reshape")
#load packages
library(reshape)
##set up the working directory
setwd("C:/Users/tradylan/Documents/Laboratory/Inesfly_Paint_Bed_Bug_Trial")
###bring in data
#for exposure 1 day post paint with individual measurements
D1Ind <- read.csv("DATA/Inesfly_Ind_1D.csv")
#for exposure 1 day post paint with jar counts
D1Jar <- read.csv("DATA/Inesfly_Jar_1D.csv")
#bring in temperature data
TEMPHUM<- read.csv("DATA/InesflyTempHum.csv")
#bring in paint data
PAINTDIST<- read.csv("DATA/InesflyPaintDistribution.csv")
##Bring in Pilot
Pilot1D<-read.csv("DATA/InesflyPilot_1D.csv")
Pilot100D<-read.csv("DATA/InesflyPilot_100D.csv")
##
#Split the unicode into relevant information for Individual observations
D1Ind$INSECT <- as.character(D1Ind$INSECT)
D1Ind$EXPOSE <- substr(D1Ind$INSECT, 1, 3)
D1Ind$TREATMENT <- substr(D1Ind$INSECT, 5, 6)
D1Ind$QUAD <- substr(D1Ind$INSECT, 8, 8)
#D1Ind$NUM <- substr(D1Ind$INSECT, 10, 11)
#Split the exposure code into relevant information for
#the group level observations
#substring that character to split the exposure time by paint
igr <- grep("5A",D1Jar$Exposure)
cloro <- grep("CF", D1Jar$Exposure )
control <- grep("CO", D1Jar$Exposure )
D1Jar$paint<-(c(1:length(D1Jar$Exposure))*0)
D1Jar$paint[igr]<- "5A"
D1Jar$paint[cloro]<- "CF"
D1Jar$paint[control]<- "CO"
#and by length of time
#make vector of indecies for each time
oneh <- grep("1",D1Jar$Exposure)
threeh <- grep("3", D1Jar$Exposure )
sixh <- grep("6", D1Jar$Exposure )
oned<- grep("24", D1Jar$Exposure )
#make a blank table
D1Jar$time<-c(1:length(D1Jar$Exposure))*0
#Insert the corresponding time into the table
D1Jar$time[oneh]<- 1
D1Jar$time[threeh]<- 3
D1Jar$time[sixh]<- 6
D1Jar$time[oned] <- 24
#Remove blank column
chop<-which(names(D1Ind)=="X")
D1Ind<-D1Ind[,-chop]
#In order to get to cox test, reshape the data.
LD1Ind<-melt(D1Ind, id=c("INSECT","STAGE", "EXPOSE", "QUAD", "NOTES",
"TREATMENT"))
#the variable needs to be turned into a date object
#so first make it a character
LD1Ind$variable<-as.character(LD1Ind$variable)
#remove the X's
LD1Ind$variable <- gsub("X","",LD1Ind$variable)
#replace the "." with "-"
LD1Ind$variable <- gsub("[.]","-", LD1Ind$variable)
LD1Ind$variable<-as.Date(LD1Ind$variable)
#to prevent confusion lets rename "variable" to "date"
chngname<-which(names(LD1Ind)=="variable")
names(LD1Ind)[chngname] <- "DATE"
#lets also rename "value" to "status"
chval<-which(names(LD1Ind)=="value")
names(LD1Ind)[chval] <- "STATUS"
alive <- which(LD1Ind$STATUS==A)
knockdown <- which(LD1Ind$STATUS==K)
dead <- which(LD1Ind$STATUS==D)
unviable <- c(dead, knockdown)
living <- c(alive, knockdown)
#create columns
LD1Ind$alive[alive] <- 1
LD1Ind$knockdown[knockdown] <- 1
LD1Ind$dead[dead] <- 1
LD1Ind$unviable[unviable] <- 1
LD1Ind$living[living] <- 1
alive <- which(LD1Ind$STATUS== "A")
knockdown <- which(LD1Ind$STATUS=="K")
dead <- which(LD1Ind$STATUS=="D")
unviable <- c(dead, knockdown)
living <- c(alive, knockdown)
LD1Ind$alive[alive] <- 1
LD1Ind$knockdown[knockdown] <- 1
LD1Ind$dead[dead] <- 1
LD1Ind$unviable[unviable] <- 1
LD1Ind$living[living] <- 1
knockdown
LD1Ind$alive[alive] <- 1
LD1Ind$knockdown[knockdown] <- 1
LD1Ind$dead[dead] <- 1
LD1Ind$unviable[unviable] <- 1
LD1Ind$living[living] <- 1
alive <- which(LD1Ind$STATUS== "A")
knockdown <- which(LD1Ind$STATUS=="K")
dead <- which(LD1Ind$STATUS=="D")
unviable <- c(dead, knockdown)
living <- c(alive, knockdown)
View(LD1Ind)
LD1Ind$QUAD<-as.numeric(LD1Ind$QUAD)
alive <- which(LD1Ind$STATUS== "A")
knockdown <- which(LD1Ind$STATUS=="K")
dead <- which(LD1Ind$STATUS=="D")
unviable <- c(dead, knockdown)
living <- c(alive, knockdown)
##create columns
#make Quad numeric in order to create blank columns
LD1Ind$QUAD<-as.numeric(LD1Ind$QUAD)
LD1Ind$alive <- LD1Ind$QUAD*0
LD1Ind$alive[alive] <- 1
LD1Ind$alive <- LD1Ind$QUAD*0
LD1Ind$alive[alive] <- 1
LD1Ind$knockdown <- LD1Ind$QUAD*0
LD1Ind$knockdown[knockdown] <- 1
LD1Ind$dead <- LD1Ind$QUAD*0
LD1Ind$dead[dead] <- 1
LD1Ind$unviable <- LD1Ind$QUAD*0
LD1Ind$unviable[unviable] <- 1
LD1Ind$living <- LD1Ind$QUAD*0
LD1Ind$living[living] <- 1
View(LD1Ind)
?coxph
library(coxph)
library(survival) #for cox proportional hazaard
library(tables)
install.packages("tables")
library(tables)
D1Ind$INSECT <- as.character(D1Ind$INSECT)
D1Ind$TIME <- substr(D1Ind$INSECT, 1, 3)
D1Ind$TREATMENT <- substr(D1Ind$INSECT, 5, 6)
D1Ind$QUAD <- substr(D1Ind$INSECT, 8, 8)
#D1Ind$NUM <- substr(D1Ind$INSECT, 10, 11)
D1Ind$EXPOSE<-substr(D1Ind$INSECT, 1, 6)
View(LD1Ind)
LD1Ind<-melt(D1Ind, id=c("INSECT","STAGE","TIME","EXPOSE", "QUAD", "NOTES",
"TREATMENT"))
View(LD1Ind)
#the variable needs to be turned into a date object
#so first make it a character
LD1Ind$variable<-as.character(LD1Ind$variable)
#remove the X's
LD1Ind$variable <- gsub("X","",LD1Ind$variable)
#replace the "." with "-"
LD1Ind$variable <- gsub("[.]","-", LD1Ind$variable)
LD1Ind$variable<-as.Date(LD1Ind$variable)
#to prevent confusion lets rename "variable" to "date"
chngname<-which(names(LD1Ind)=="variable")
names(LD1Ind)[chngname] <- "DATE"
#lets also rename "value" to "status"
chval<-which(names(LD1Ind)=="value")
names(LD1Ind)[chval] <- "STATUS"
#==============================================================================
###Now that we have the data in a usable table, lets split the status into binary
#find
alive <- which(LD1Ind$STATUS== "A")
knockdown <- which(LD1Ind$STATUS=="K")
dead <- which(LD1Ind$STATUS=="D")
unviable <- c(dead, knockdown)
living <- c(alive, knockdown)
##create columns
#make Quad numeric in order to create blank columns
LD1Ind$QUAD<-as.numeric(LD1Ind$QUAD)
#create blank columns for each status.
LD1Ind$alive <- LD1Ind$QUAD*0
LD1Ind$alive[alive] <- 1
LD1Ind$knockdown <- LD1Ind$QUAD*0
LD1Ind$knockdown[knockdown] <- 1
LD1Ind$dead <- LD1Ind$QUAD*0
LD1Ind$dead[dead] <- 1
LD1Ind$unviable <- LD1Ind$QUAD*0
LD1Ind$unviable[unviable] <- 1
LD1Ind$living <- LD1Ind$QUAD*0
LD1Ind$living[living] <- 1
###first create a data frame to store the information
eachtreatment<-unique(LD1Ind$EXPOSE)
alltogether<-c(eachtreatment, "5A-Tot", "Con-Total", "Cloro-Tot")
alltogether
DayOneSum<-data.farme(alltogether)
DayOneSum<-data.frame(alltogether)
?summaryBy
??summaryBy
sumna<-function(counted){
sum(counted, na.rm==T)
}
sumna(LD1Ind$alive)
sum(LD1Ind$alive, na.rm=TRUE)
sumna<-function(counted){
counts<-sum(counted, na.rm==T)
counts
}
sumna(LD1Ind$alive)
