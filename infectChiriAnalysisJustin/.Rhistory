# Get the currect username
userName <- strsplit(args[i], "_")[[1]][1]
#===================================================================================
#  Part II: Get the visit data and output it
#===================================================================================
diaData <- getDiaData(activedata, userName, day)
filename <- file.path(visit_direc, paste0("visitResult_", day, ".csv"))
write.table(diaData, filename, row.names = F)
#===================================================================================
#  Part III: Get the path map and output it
#===================================================================================
setwd(path_direc)
pdf(file=paste("mapResult_", day, ".pdf", sep=""),width=20, height=15)
drawPaths(activedata, userName, day, mr)
dev.off()
}
close(conn)
}
#=======NUMBER OF HOUSES BY PREDICTED COLOR BY DAY=======#
##WE WANT TO KNOW HOW MANY HOUSES OF EACH COLOR HAS EACH INSPECTOR BY DAY====###
set.seed(1)
homeDir <- path.expand('~')
setwd(homeDir) #sets the base path to the user's home directory, even in Windows.
# Sources
source(file.path(homeDir, "PETM-shiny/shiny/controller/global.R"))
source(file.path(homeDir, "PETM-shiny/casaSecreta/loadSaveMethodsCasaSecreta.R"))
# Libraries
library(RMySQL)
# Active data
LoadDataAPP <- function(databaseName = "Chagas_Arequipa", tableName="APP_INSPECTIONS") {
#Esta funcion retorna un los datos que se ingresaron en el APP
#
#ARGS
# databaseName = Nombre de la base de datos
# tableName = Nombre de la tabla
#
#RETURNS
# datos_app = datos ingresados por los usuarios en campo al APP
#
# Connect to the database
db <-
dbConnect(
MySQL(),
dbname = databaseName,
host = dbGlobalConfig$host,
port = dbGlobalConfig$port,
user = dbGlobalConfig$user,
password = dbGlobalConfig$password
)
# Construct the fetching query
query <- sprintf("SELECT * FROM %s", tableName)
# Submit the fetch query and disconnect
datos_app <- dbGetQuery(db, query)
#Desconectarnos de la base de datos
dbDisconnect(db)
return(datos_app)
}
getnumberofhousesbycolor<-function(){
user<-toString(readline(prompt="Enter user (e.g. mar): "))
date <- toString(readline(prompt="Enter date (e.g. 2017-12-15): "))
activedata <- LoadDataAPP()
activedata$FECHA <- as.character(activedata$FECHA)
activedata$FECHA <- gsub(' ', '', activedata$FECHA)
activedata$UNI_CODE <- as.character(activedata$UNI_CODE)
activedata$UNI_CODE <- gsub(' ', '', activedata$UNI_CODE)
activedata$STATUS_INSPECCION <- as.character(activedata$STATUS_INSPECCION)
activedata$STATUS_INSPECCION <- gsub(' ', '', activedata$STATUS_INSPECCION)
activedata$TEST_DATA <- as.character(activedata$TEST_DATA)
activedata$TEST_DATA <- gsub(' ', '', activedata$TEST_DATA)
activedata <- activedata[which(activedata$TEST_DATA == "0"),]
keep <- c("USER_NAME", "UNI_CODE", "FECHA", "STATUS_INSPECCION", "PREDICTED_COLOR")
activedata <- activedata[keep]
activedata$USER_NAME <- as.character(activedata$USER_NAME)
activedata$USER_NAME <- gsub(' ', '', activedata$USER_NAME)
activedata$UNI_CODE <- as.character(activedata$UNI_CODE)
activedata$UNI_CODE <- gsub(' ', '', activedata$UNI_CODE)
activedata$FECHA <- as.character(activedata$FECHA)
activedata$FECHA <- gsub(' ', '', activedata$FECHA)
activedata$STATUS_INSPECCION <- as.character(activedata$STATUS_INSPECCION)
activedata$STATUS_INSPECCION <- gsub(' ', '', activedata$STATUS_INSPECCION)
activedata$PREDICTED_COLOR <- as.character(activedata$PREDICTED_COLOR)
activedata$PREDICTED_COLOR <- gsub(' ', '', activedata$PREDICTED_COLOR)
sz1<-(user)
activedata <- activedata[which((activedata$USER_NAME == sz1) &
(activedata$STATUS_INSPECCION == "inspeccion" | activedata$STATUS_INSPECCION == "I") &
activedata$FECHA == date),]
activedata$count<-unlist(1)
activedata<-as.data.table(activedata)
activedata<-activedata[PREDICTED_COLOR=='#BD0026',PREDICTED_COLOR:='Highest']
activedata<-activedata[PREDICTED_COLOR=='#F03B20',PREDICTED_COLOR:='High']
activedata<-activedata[PREDICTED_COLOR=='#FD8D3C',PREDICTED_COLOR:='Medium']
activedata<-activedata[PREDICTED_COLOR=='#FECC5C',PREDICTED_COLOR:='Low']
activedata<-activedata[PREDICTED_COLOR=='#FFFFB2',PREDICTED_COLOR:='Lowest']
activedata<-aggregate(count~PREDICTED_COLOR,data = activedata,FUN = sum)
print(activedata)
filename <- file.path("~/PETM-shiny/casaSecreta/numero de casas por color_cayma/", paste("CCOLOR_RESULTS_", sz1, "_", date, "_TODAYS.DATE.", Sys.Date(), ".csv", sep=""))
write.table(activedata, filename, row.names = F)
}
colorcasapordia()
getnumberofhousesbycolor()
library(devtools)
library(sp)
library(videoplayR)
library(splancs)
devtools::install_github("swarm-lab/videoplayR")
install.packages("splancs")
library(videoplayR)
library(splancs)
library(devtools)
library(sp)
library(videoplayR)
library(splancs)
?poly
?getpoly
POLYDAY5CAM1 <- getpoly(quiet=FALSE)
getpoly(quiet=FALSE)
plot.new()
getpoly(quiet=FALSE)
test <- getpoly(quiet=FALSE)
input_direc <- "~/PETM-shiny/autoModel/searchZones/Z20CAY/modelResults/"
output_direc <- "~/PETM-shiny/autoModel/searchZones/Z20CAY/modelResults/"
correctQuantiles <- function() {
setwd(input_direc)
locFileName <- toString(readline(prompt="IMPORTANT: Do not use quotes in entry.
\nPlease enter file to change quantiles: "))
modelOutput <- read.csv(paste0(locFileName, ".csv"),sep=" ")
# If it is over 20%, then we need to change 20% of the values
# Loop will terminate when there are no values over 20%
uniqueProbs <- unique(modelOutput$probability)
while (TRUE %in% ((table(modelOutput$probability) / nrow(modelOutput)) >= 0.2)) {
print("hi")
for (i in 1:length(uniqueProbs)) {
check <- uniqueProbs[i]
countCheck <- sum(modelOutput$probability == check)
percentH <- (countCheck / nrow(modelOutput))
sameProbVec <- which(modelOutput$probability == check)
if (percentH >= 0.20 && percentH < 0.40) {
# divide in two
fiftyPercent <- floor(0.50 * countCheck)
for (j in 1:fiftyPercent) {
modelOutput$probability[sameProbVec[j]] <-
modelOutput$probability[sameProbVec[j]] + 0.0000000000001
}
}
else if (percentH >= 0.40 && percentH < 0.60) {
# divide in three
thirtythreePercent <- floor(0.33 * countCheck)
for (j in 1:thirtythreePercent) {
modelOutput$probability[sameProbVec[j]] <-
modelOutput$probability[sameProbVec[j]] + 0.0000000000001
}
for (k in (thirtythreePercent + 1):(thirtythreePercent * 2)) {
modelOutput$probability[sameProbVec[k]] <-
modelOutput$probability[sameProbVec[k]] + 0.0000000000002
}
}
else if (percentH >= 0.60 && percentH < 0.80) {
# divide in four
twentyfivePercent <- floor(0.25 * countCheck)
for (j in 1:twentyfivePercent) {
modelOutput$probability[sameProbVec[j]] <-
modelOutput$probability[sameProbVec[j]] + 0.0000000000001
}
for (k in (twentyfivePercent + 1):(twentyfivePercent * 2)) {
modelOutput$probability[sameProbVec[k]] <-
modelOutput$probability[sameProbVec[k]] + 0.0000000000002
}
for (l in ((twentyfivePercent * 2) + 1):(twentyfivePercent * 3)) {
modelOutput$probability[sameProbVec[l]] <-
modelOutput$probability[sameProbVec[l]] + 0.0000000000003
}
}
else if (percentH >= 0.80) {
# divide in five
twentyPercent <- floor(0.20 * countCheck)
for (j in 1:twentyPercent) {
modelOutput$probability[sameProbVec[j]] <-
modelOutput$probability[sameProbVec[j]] + 0.0000000000001
}
for (k in (twentyPercent + 1):(twentyPercent * 2)) {
modelOutput$probability[sameProbVec[k]] <-
modelOutput$probability[sameProbVec[k]] + 0.0000000000002
}
for (l in ((twentyPercent * 2) + 1):(twentyPercent * 3)) {
modelOutput$probability[sameProbVec[l]] <-
modelOutput$probability[sameProbVec[l]] + 0.0000000000003
}
for (m in ((twentyPercent * 3) + 1):(twentyPercent * 4)) {
modelOutput$probability[sameProbVec[m]] <-
modelOutput$probability[sameProbVec[m]] + 0.0000000000004
}
}
# reset the unique probs vector
uniqueProbs <- unique(modelOutput$probability)
}
}
# write new file
filename <- file.path(output_direc, paste(locFileName, ".corrquant.csv", sep=""))
write.table(modelOutput, filename, row.names = F)
}
correctQuantiles()
input_direc <- "~/PETM-shiny/autoModel/searchZones/Z15CAY/modelResults/"
output_direc <- "~/PETM-shiny/autoModel/searchZones/Z15CAY/modelResults/"
correctQuantiles <- function() {
setwd(input_direc)
locFileName <- toString(readline(prompt="IMPORTANT: Do not use quotes in entry.
\nPlease enter file to change quantiles: "))
modelOutput <- read.csv(paste0(locFileName, ".csv"),sep=" ")
# If it is over 20%, then we need to change 20% of the values
# Loop will terminate when there are no values over 20%
uniqueProbs <- unique(modelOutput$probability)
while (TRUE %in% ((table(modelOutput$probability) / nrow(modelOutput)) >= 0.2)) {
print("hi")
for (i in 1:length(uniqueProbs)) {
check <- uniqueProbs[i]
countCheck <- sum(modelOutput$probability == check)
percentH <- (countCheck / nrow(modelOutput))
sameProbVec <- which(modelOutput$probability == check)
if (percentH >= 0.20 && percentH < 0.40) {
# divide in two
fiftyPercent <- floor(0.50 * countCheck)
for (j in 1:fiftyPercent) {
modelOutput$probability[sameProbVec[j]] <-
modelOutput$probability[sameProbVec[j]] + 0.0000000000001
}
}
else if (percentH >= 0.40 && percentH < 0.60) {
# divide in three
thirtythreePercent <- floor(0.33 * countCheck)
for (j in 1:thirtythreePercent) {
modelOutput$probability[sameProbVec[j]] <-
modelOutput$probability[sameProbVec[j]] + 0.0000000000001
}
for (k in (thirtythreePercent + 1):(thirtythreePercent * 2)) {
modelOutput$probability[sameProbVec[k]] <-
modelOutput$probability[sameProbVec[k]] + 0.0000000000002
}
}
else if (percentH >= 0.60 && percentH < 0.80) {
# divide in four
twentyfivePercent <- floor(0.25 * countCheck)
for (j in 1:twentyfivePercent) {
modelOutput$probability[sameProbVec[j]] <-
modelOutput$probability[sameProbVec[j]] + 0.0000000000001
}
for (k in (twentyfivePercent + 1):(twentyfivePercent * 2)) {
modelOutput$probability[sameProbVec[k]] <-
modelOutput$probability[sameProbVec[k]] + 0.0000000000002
}
for (l in ((twentyfivePercent * 2) + 1):(twentyfivePercent * 3)) {
modelOutput$probability[sameProbVec[l]] <-
modelOutput$probability[sameProbVec[l]] + 0.0000000000003
}
}
else if (percentH >= 0.80) {
# divide in five
twentyPercent <- floor(0.20 * countCheck)
for (j in 1:twentyPercent) {
modelOutput$probability[sameProbVec[j]] <-
modelOutput$probability[sameProbVec[j]] + 0.0000000000001
}
for (k in (twentyPercent + 1):(twentyPercent * 2)) {
modelOutput$probability[sameProbVec[k]] <-
modelOutput$probability[sameProbVec[k]] + 0.0000000000002
}
for (l in ((twentyPercent * 2) + 1):(twentyPercent * 3)) {
modelOutput$probability[sameProbVec[l]] <-
modelOutput$probability[sameProbVec[l]] + 0.0000000000003
}
for (m in ((twentyPercent * 3) + 1):(twentyPercent * 4)) {
modelOutput$probability[sameProbVec[m]] <-
modelOutput$probability[sameProbVec[m]] + 0.0000000000004
}
}
# reset the unique probs vector
uniqueProbs <- unique(modelOutput$probability)
}
}
# write new file
filename <- file.path(output_direc, paste(locFileName, ".corrquant.csv", sep=""))
write.table(modelOutput, filename, row.names = F)
}
correctQuantiles()
input_direc <- "~/PETM-shiny/autoModel/searchZones/Z3CAY/modelResults/"
output_direc <- "~/PETM-shiny/autoModel/searchZones/Z3CAY/modelResults/"
correctQuantiles <- function() {
setwd(input_direc)
locFileName <- toString(readline(prompt="IMPORTANT: Do not use quotes in entry.
\nPlease enter file to change quantiles: "))
modelOutput <- read.csv(paste0(locFileName, ".csv"),sep=" ")
# If it is over 20%, then we need to change 20% of the values
# Loop will terminate when there are no values over 20%
uniqueProbs <- unique(modelOutput$probability)
while (TRUE %in% ((table(modelOutput$probability) / nrow(modelOutput)) >= 0.2)) {
print("hi")
for (i in 1:length(uniqueProbs)) {
check <- uniqueProbs[i]
countCheck <- sum(modelOutput$probability == check)
percentH <- (countCheck / nrow(modelOutput))
sameProbVec <- which(modelOutput$probability == check)
if (percentH >= 0.20 && percentH < 0.40) {
# divide in two
fiftyPercent <- floor(0.50 * countCheck)
for (j in 1:fiftyPercent) {
modelOutput$probability[sameProbVec[j]] <-
modelOutput$probability[sameProbVec[j]] + 0.0000000000001
}
}
else if (percentH >= 0.40 && percentH < 0.60) {
# divide in three
thirtythreePercent <- floor(0.33 * countCheck)
for (j in 1:thirtythreePercent) {
modelOutput$probability[sameProbVec[j]] <-
modelOutput$probability[sameProbVec[j]] + 0.0000000000001
}
for (k in (thirtythreePercent + 1):(thirtythreePercent * 2)) {
modelOutput$probability[sameProbVec[k]] <-
modelOutput$probability[sameProbVec[k]] + 0.0000000000002
}
}
else if (percentH >= 0.60 && percentH < 0.80) {
# divide in four
twentyfivePercent <- floor(0.25 * countCheck)
for (j in 1:twentyfivePercent) {
modelOutput$probability[sameProbVec[j]] <-
modelOutput$probability[sameProbVec[j]] + 0.0000000000001
}
for (k in (twentyfivePercent + 1):(twentyfivePercent * 2)) {
modelOutput$probability[sameProbVec[k]] <-
modelOutput$probability[sameProbVec[k]] + 0.0000000000002
}
for (l in ((twentyfivePercent * 2) + 1):(twentyfivePercent * 3)) {
modelOutput$probability[sameProbVec[l]] <-
modelOutput$probability[sameProbVec[l]] + 0.0000000000003
}
}
else if (percentH >= 0.80) {
# divide in five
twentyPercent <- floor(0.20 * countCheck)
for (j in 1:twentyPercent) {
modelOutput$probability[sameProbVec[j]] <-
modelOutput$probability[sameProbVec[j]] + 0.0000000000001
}
for (k in (twentyPercent + 1):(twentyPercent * 2)) {
modelOutput$probability[sameProbVec[k]] <-
modelOutput$probability[sameProbVec[k]] + 0.0000000000002
}
for (l in ((twentyPercent * 2) + 1):(twentyPercent * 3)) {
modelOutput$probability[sameProbVec[l]] <-
modelOutput$probability[sameProbVec[l]] + 0.0000000000003
}
for (m in ((twentyPercent * 3) + 1):(twentyPercent * 4)) {
modelOutput$probability[sameProbVec[m]] <-
modelOutput$probability[sameProbVec[m]] + 0.0000000000004
}
}
# reset the unique probs vector
uniqueProbs <- unique(modelOutput$probability)
}
}
# write new file
filename <- file.path(output_direc, paste(locFileName, ".corrquant.csv", sep=""))
write.table(modelOutput, filename, row.names = F)
}
correctQuantiles()
set.seed(1)
if(!require(binr)){install.packages("binr", repos="http://cran.rstudio.com/", dependencies=TRUE)}
if(!require(leaflet)){install.packages("leaflet", repos="http://cran.rstudio.com/", dependencies=TRUE)}
if(!require(RColorBrewer)){install.packages("RColorBrewer", repos="http://cran.rstudio.com/", dependencies=TRUE)}
if(!require(png)){install.packages("png", repos="http://cran.rstudio.com/", dependencies=TRUE)}
if(!require(devtools)){install.packages("devtools", repos="http://cran.rstudio.com/", dependencies=TRUE)}
if(!require(Matrix)){install.packages("Matrix", repos="http://cran.rstudio.com/", dependencies=TRUE)}
if(!require(crayon)){install.packages("crayon", repos="http://cran.rstudio.com/", dependencies=TRUE)}
if(!require(sp)){install.packages("sp", repos="http://cran.rstudio.com/", dependencies=TRUE)}
if(!require(dplyr)){install.packages("dplyr", repos="http://cran.rstudio.com/", dependencies=TRUE)}
if(!require(RMySQL)){install.packages("RMySQL", repos="http://cran.rstudio.com/", type='source')}
if(!require(INLA)){install.packages("INLA", repos="https://www.math.ntnu.no/inla/R/stable", dependencies=TRUE)}
if(!require(grid)){install.packages("grid", repos="http://cran.rstudio.com/", dependencies=TRUE)}
if(!require(lattice)){install.packages("lattice", repos="http://cran.rstudio.com/", dependencies=TRUE)}
if(!require(ggplot2)){install.packages("ggplot2", repos="http://cran.rstudio.com/", dependencies=TRUE)}
if(!require(gridExtra)){install.packages("gridExtra", repos="http://cran.rstudio.com/", dependencies=TRUE)}
if(!require(DBI)){install.packages("DBI", repos="http://cran.rstudio.com/", dependencies=TRUE)}
library(binr)
library(leaflet)
library(RColorBrewer)
library(png)
library(devtools)
library(Matrix)
library(crayon)
library(sp)
library(dplyr)
library(RMySQL)
library(INLA)
library(grid)
library(lattice)
library(ggplot2)
library(gridExtra)
library(DBI)
dbGlobalConfig = list(
"host" = "rds-mysql-chagasshiny.cforr6pcj6sb.us-west-2.rds.amazonaws.com",
"port" = 3306,
"user"             = "masterUser",
"password"         = "ChagasShiny1!",
"databaseName"     = "Chagas_Arequipa",
"authDatabaseName" = 'Chagas_Arequipa' #potentially a separate DB from the databases for data
)
homeDir <- path.expand('~')
setwd(homeDir)
source(file.path(homeDir, "PETM-shiny/shiny/controller/palettes.R"))
source(file.path(homeDir, "PETM-shiny/shiny/controller/global.R"))
source(file.path(homeDir, "PETM-shiny/autoModel/model/FunctionCreateColTime.R"))
source(file.path(homeDir, "PETM-shiny/autoModel/model/plotOnlyCakeLayerFigure.R"))
source(file.path(homeDir, "PETM-shiny/autoModel/searchZones/getSearchZones/getSearchZones.R"))
View(C10PAU)
POLYDAY5CAM1 <- getpoly(quiet=FALSE)
POLYDAY5CAM1
View(POLYDAY5CAM1)
View(POLYDAY5CAM1[,1])
POLYDAY5CAM1[,1]
POLYDAY5CAM1[1,1]
#=======NUMBER OF HOUSES BY PREDICTED COLOR BY DAY=======#
##WE WANT TO KNOW HOW MANY HOUSES OF EACH COLOR HAS EACH INSPECTOR BY DAY====###
set.seed(1)
homeDir <- path.expand('~')
setwd(homeDir) #sets the base path to the user's home directory, even in Windows.
# Sources
source(file.path(homeDir, "PETM-shiny/shiny/controller/global.R"))
source(file.path(homeDir, "PETM-shiny/casaSecreta/loadSaveMethodsCasaSecreta.R"))
# Libraries
library(RMySQL)
# Active data
LoadDataAPP <- function(databaseName = "Chagas_Arequipa", tableName="APP_INSPECTIONS") {
#Esta funcion retorna un los datos que se ingresaron en el APP
#
#ARGS
# databaseName = Nombre de la base de datos
# tableName = Nombre de la tabla
#
#RETURNS
# datos_app = datos ingresados por los usuarios en campo al APP
#
# Connect to the database
db <-
dbConnect(
MySQL(),
dbname = databaseName,
host = dbGlobalConfig$host,
port = dbGlobalConfig$port,
user = dbGlobalConfig$user,
password = dbGlobalConfig$password
)
# Construct the fetching query
query <- sprintf("SELECT * FROM %s", tableName)
# Submit the fetch query and disconnect
datos_app <- dbGetQuery(db, query)
#Desconectarnos de la base de datos
dbDisconnect(db)
return(datos_app)
}
getnumberofhousesbycolor<-function(){
user<-toString(readline(prompt="Enter user (e.g. mar): "))
date <- toString(readline(prompt="Enter date (e.g. 2017-12-15): "))
activedata <- LoadDataAPP()
activedata$FECHA <- as.character(activedata$FECHA)
activedata$FECHA <- gsub(' ', '', activedata$FECHA)
activedata$UNI_CODE <- as.character(activedata$UNI_CODE)
activedata$UNI_CODE <- gsub(' ', '', activedata$UNI_CODE)
activedata$STATUS_INSPECCION <- as.character(activedata$STATUS_INSPECCION)
activedata$STATUS_INSPECCION <- gsub(' ', '', activedata$STATUS_INSPECCION)
activedata$TEST_DATA <- as.character(activedata$TEST_DATA)
activedata$TEST_DATA <- gsub(' ', '', activedata$TEST_DATA)
activedata <- activedata[which(activedata$TEST_DATA == "0"),]
keep <- c("USER_NAME", "UNI_CODE", "FECHA", "STATUS_INSPECCION", "PREDICTED_COLOR")
activedata <- activedata[keep]
activedata$USER_NAME <- as.character(activedata$USER_NAME)
activedata$USER_NAME <- gsub(' ', '', activedata$USER_NAME)
activedata$UNI_CODE <- as.character(activedata$UNI_CODE)
activedata$UNI_CODE <- gsub(' ', '', activedata$UNI_CODE)
activedata$FECHA <- as.character(activedata$FECHA)
activedata$FECHA <- gsub(' ', '', activedata$FECHA)
activedata$STATUS_INSPECCION <- as.character(activedata$STATUS_INSPECCION)
activedata$STATUS_INSPECCION <- gsub(' ', '', activedata$STATUS_INSPECCION)
activedata$PREDICTED_COLOR <- as.character(activedata$PREDICTED_COLOR)
activedata$PREDICTED_COLOR <- gsub(' ', '', activedata$PREDICTED_COLOR)
sz1<-(user)
activedata <- activedata[which((activedata$USER_NAME == sz1) &
(activedata$STATUS_INSPECCION == "inspeccion" | activedata$STATUS_INSPECCION == "I") &
activedata$FECHA == date),]
activedata$count<-unlist(1)
activedata<-as.data.table(activedata)
activedata<-activedata[PREDICTED_COLOR=='#BD0026',PREDICTED_COLOR:='Highest']
activedata<-activedata[PREDICTED_COLOR=='#F03B20',PREDICTED_COLOR:='High']
activedata<-activedata[PREDICTED_COLOR=='#FD8D3C',PREDICTED_COLOR:='Medium']
activedata<-activedata[PREDICTED_COLOR=='#FECC5C',PREDICTED_COLOR:='Low']
activedata<-activedata[PREDICTED_COLOR=='#FFFFB2',PREDICTED_COLOR:='Lowest']
activedata<-aggregate(count~PREDICTED_COLOR,data = activedata,FUN = sum)
print(activedata)
filename <- file.path("~/PETM-shiny/casaSecreta/numero de casas por color_cayma/", paste("CCOLOR_RESULTS_", sz1, "_", date, "_TODAYS.DATE.", Sys.Date(), ".csv", sep=""))
write.table(activedata, filename, row.names = F)
}
getnumberofhousesbycolor()
setwd("~/Desktop/Laboratory/infectChiriAnalysis")
h1 <- read.csv("hour1.csv", sep=" ")
h2 <- read.csv("hour2.csv", sep=" ")
data <- read.csv("rawData.csv", sep=" ")
View(data)
filename <- file.path(output_direc, paste("rawData.csv", sep=","))
output_direc <- "~/Desktop/Laboratory/infectChiriAnalysis"
filename <- file.path(output_direc, paste("rawData.csv", sep=","))
write.table(data, filename, row.names = F)
filename <- file.path(output_direc, paste("rawData.csv", sep=""))
write.csv(data, filename, row.names = F)
