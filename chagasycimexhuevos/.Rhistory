tray4<-sample(1:4,4)
tray1
tray2
tray3
tray4
quiz<-81.5*15
mid<-84*30
quiz+mid
quiz<-81.5*.15
mid<-84*.30
quiz+mid
100-37.4
quiz<-81.5*.15
mid<-84*.25
hw1<-6*.1
quiz+mid+hw1
.8*50
rnorm(4,4)
sample(1:4,4)
sample(1:4,4)
sample(1:4,4)
sample(1:4,4)
library(reshape)
library(survival) #for cox proportional hazaard
library(tables)
library(doBy)#use summaryBy function
library(ggplot2)
##set up the working directory
setwd("C:/Users/tradylan/Documents/Laboratory/Inesfly_Paint_Bed_Bug_Trial")
###bring in data
#for exposure 1 day post paint with individual measurements
D1Ind <- read.csv("DATA/Inesfly_Ind_1D.csv")
#for exposure 1 day post paint with jar counts
D1Jar <- read.csv("DATA/Inesfly_Jar_1D.csv")
#bring in temperature data
TEMPHUM<- read.csv("DATA/InesflyTempHum.csv")
#bring in paint data
PAINTDIST<- read.csv("DATA/InesflyPaintDistribution.csv")
##Bring in Pilot
Pilot1D<-read.csv("DATA/InesflyPilot_1D.csv")
Pilot100D<-read.csv("DATA/InesflyPilot_100D.csv")
##
#Split the unicode into relevant information for Individual observations
D1Ind$INSECT <- as.character(D1Ind$INSECT)
D1Ind$TIME <- substr(D1Ind$INSECT, 1, 3)
D1Ind$TREATMENT <- substr(D1Ind$INSECT, 5, 6)
D1Ind$QUAD <- substr(D1Ind$INSECT, 8, 8)
#D1Ind$NUM <- substr(D1Ind$INSECT, 10, 11)
D1Ind$EXPOSE<-substr(D1Ind$INSECT, 1, 6)
#Split the exposure code into relevant information for
#the group level observations
#substring that character to split the exposure time by paint
igr <- grep("5A",D1Jar$Exposure)
cloro <- grep("CF", D1Jar$Exposure )
control <- grep("CO", D1Jar$Exposure )
D1Jar$paint <- (c(1:length(D1Jar$Exposure))*0)
D1Jar$paint[igr] <- "5A"
D1Jar$paint[cloro] <- "CF"
D1Jar$paint[control] <- "CO"
#and by length of time
#make vector of indecies for each time
oneh <- grep("1",D1Jar$Exposure)
threeh <- grep("3", D1Jar$Exposure )
sixh <- grep("6", D1Jar$Exposure )
oned <- grep("24", D1Jar$Exposure )
#make a blank table
D1Jar$time <- c(1:length(D1Jar$Exposure))*0
#Insert the corresponding time into the table
D1Jar$time[oneh] <- 1
D1Jar$time[threeh] <- 3
D1Jar$time[sixh] <- 6
D1Jar$time[oned] <- 24
#Remove blank column
chop <- which(names(D1Ind)=="X")
D1Ind <- D1Ind[,-chop]
#In order to get to cox test, reshape the data.
LD1Ind<-melt(D1Ind, id=c("INSECT","STAGE","TIME","EXPOSE", "QUAD", "NOTES",
"TREATMENT"))
#the variable needs to be turned into a date object
#so first make it a character
LD1Ind$variable<-as.character(LD1Ind$variable)
#remove the X's
LD1Ind$variable <- gsub("X","",LD1Ind$variable)
#replace the "." with "-"
LD1Ind$variable <- gsub("[.]","-", LD1Ind$variable)
LD1Ind$variable<-as.Date(LD1Ind$variable)
#to prevent confusion lets rename "variable" to "date"
chngname<-which(names(LD1Ind)=="variable")
names(LD1Ind)[chngname] <- "DATE"
#lets also rename "value" to "status"
chval<-which(names(LD1Ind)=="value")
names(LD1Ind)[chval] <- "STATUS"
#==============================================================================
###Now that we have the data in a usable table, lets split the status into binary
#find
alive <- which(LD1Ind$STATUS== "A")
knockdown <- which(LD1Ind$STATUS=="K")
dead <- which(LD1Ind$STATUS=="D")
unviable <- c(dead, knockdown)
living <- c(alive, knockdown)
##create columns
#make Quad numeric in order to create blank columns
LD1Ind$QUAD<-as.numeric(LD1Ind$QUAD)
#create blank columns for each status.
LD1Ind$alive <- LD1Ind$QUAD*0
LD1Ind$alive[alive] <- 1
LD1Ind$knockdown <- LD1Ind$QUAD*0
LD1Ind$knockdown[knockdown] <- 1
LD1Ind$dead <- LD1Ind$QUAD*0
LD1Ind$dead[dead] <- 1
LD1Ind$unviable <- LD1Ind$QUAD*0
LD1Ind$unviable[unviable] <- 1
LD1Ind$living <- LD1Ind$QUAD*0
LD1Ind$living[living] <- 1
#==============================================================================
##Lets clean up the data so that we get smooth transitions
#If dead, then becomes knockdown mark as knock down.
#also consider case where knock down went to alive.
#consider removing 2015-09-11 and 13 since data not available for 24hr.
#also add back collective data to 1H-5A 2015-09-2015
#==============================================================================
#lets do simple calculations finding the number and proportion by group
##Use the summary By funciton on Expose and Date to get counts
treatmentsum<-summaryBy(alive+dead+knockdown+unviable+living~EXPOSE+DATE+
TIME+TREATMENT,data=LD1Ind, FUN=sum,na.rm=TRUE,
keep.names=TRUE)
#create column for total insect
treatmentsum$totalbug<-(treatmentsum$alive+treatmentsum$unviable)
#remove rows with totalbug=0
nobug<-which(treatmentsum$totalbug==0)
treatmentsum<-treatmentsum[-nobug,]
##add rows for total on each treatment and the total for each day
#treatment
sumpaint <- summaryBy(alive+dead+knockdown+unviable+living+totalbug~TREATMENT+DATE,
data=treatmentsum, FUN=sum,na.rm=TRUE, keep.names=TRUE)
#day
sumtdate <-summaryBy(alive+dead+knockdown+unviable+living+totalbug~DATE,
data=treatmentsum, FUN=sum,na.rm=TRUE, keep.names=TRUE)
##now add empty rows so you can join both tables together.
#treatment
sumpaint$EXPOSE<-sumpaint$alive*NA
#sumpaint$DATE<-sumpaint$alive*NA
#sumpaint$DATE<-as.Date(sumpaint$DATE, origin="1970-01-01")
sumpaint$TIME<-sumpaint$alive*NA
#DATE
sumtdate$EXPOSE<-sumtdate$alive*NA
sumtdate$TREATMENT<-sumtdate$alive*NA
sumtdate$TIME<-sumtdate$alive*NA
##join the three tables together
joined<-rbind(treatmentsum, sumtdate)
sumtab<-rbind(joined, sumpaint)
#make proportionality
treatmentsum$palive<-treatmentsum$alive/treatmentsum$totalbug
treatmentsum$pdead<-treatmentsum$dead/treatmentsum$totalbug
treatmentsum$pKD<-treatmentsum$knockdown/treatmentsum$totalbug
treatmentsum$pUV<- treatmentsum$unviable/treatmentsum$totalbug
treatmentsum$pliving<-treatmentsum$living/treatmentsum$totalbug
#==============================================================================
#Create Nice table with summary
#==============================================================================
###Lets create curves showing the proportion of status seperated by treatment.
#Create indecies for each paint
fiveA <-which(treatmentsum$TREATMENT=="5A")
cnt <- which(treatmentsum$TREATMENT=="CO")
Clf <- which(treatmentsum$TREATMENT=="CF")
names(LD1Ind)
LD1Ind$dead
names(LD1Ind)
LD1Ind$TIME
Date
LD1Ind$DATE
Surv(time=DATE, event=dead, type=counting )
Surv(time=DATE, event=dead, type=counting, data=LD1Ind )
Surv(time=LD1Ind$DATE, event=LD1Ind$dead)
LDInd$Data<-as.Julian$LDIND$DATE
LDInd$Data<-as.Jullian$LDIND$DATE
?as.Date
LDInd$Datastuff<-julian(LD1IND$DATE)
LDInd$Datastuff<-julian(LD1Ind$DATE)
Datastuff<-julian(LD1Ind$DATE)
Datastuff
LD1Ind$julian<-julian(LD1Ind$DATE)
LD1Ind$julian
LD1Ind$DAY<-as.numeric(LD1Ind$julian-min(LD1Ind$Julian))
min(LD1Ind$julian)
LD1Ind$DAY<-as.numeric(LD1Ind$julian-min(LD1Ind$julian))
LD1Ind$DAY
Surv(time=DAY, event=dead)
Surv(time=LD1Ind$DAY, event=LD1Ind$dead)
?Surv
heart
with(lung, Surv(time, status))
dim(with(lung, Surv(time, status)))
VIew(with(lung, Surv(time, status)))
View(with(lung, Surv(time, status)))
?"survival
""
"
?survival
??survival
futime
lung
View(lung)
library(survival)
?lung
names(LD1Ind)
Cl1Ind<-LD1Ind
x
x<-0
if x==0, y<-2
if (x==0) y<-2
y
x<-c(0,1,2)
if (x==0) y<-2
deadobs<-which(Cl1Ind$dead==0)
Cl1Ind$INSECT[deadobs]
View(Cl1Ind$INSECT[deadobs])
D1Ind
View(D1Ind)
days<-unique(Cl1Ind$DAYS)
days
Cl1Ind
names(Cl1Ind)
days<-unique(Cl1Ind$DAY)
days
mday<-max(days)
days<-unique(Cl1Ind$DAY)
mday<-max(days)
deadobs<-which(Cl1Ind$dead==0)
Cl1Ind$DAY[deadobs]
days<-unique(Cl1Ind$DAY)
mday<-max(days)
deadobs<-which(Cl1Ind$dead==1)
Cl1Ind$DAY[deadobs]
Cl1Ind$INSECT[deadobs]
?if
)
?if
?
2
1
five
lunch
lung
? lung
? if
""
which(days)<mday
which(days < mday)
mday
days
?intersect
which(days)==1
which(days)==7
which(days==7)
days[4+1]
inx<-Cl1Ind$INSECT[5]
inx
which(Cl1Ind$INSECT=="01H-5A-1-05")
testobs
days<-unique(Cl1Ind$DAY)
mday<-max(days)
deadobs<-which(Cl1Ind$dead==1)
nmax<-which(Cl1Ind$DAY)<mday
testobs<-intersect(deadobs, nmax)
days<-unique(Cl1Ind$DAY)
mday<-max(days)
deadobs<-which(Cl1Ind$dead==1)
nmax<-which(Cl1Ind$DAY < mday)
testobs<-intersect(deadobs, nmax)
testobs[1]
testobs[10]
length(testobs)
x<-5
if(x==5){y<-2, z<-3}
if(x==5){y<-2 z<-3}
if(x==5{
if(x==5){
y<-3
z<-4}
z
y
x<-2
if(x==5){
y<-9
z<-20}
y
z
names(ClInd$dead)
names(Cl1Ind$dead)
names(Cl1Ind)
Cl1Ind
Cl1Ind$STATUS
x
if(x != 5){p=2}
p
names(Cl1Ind)
Cl1Ind$CC<-Cl1Ind$STAGE*NA
Cl1Ind$CC<-Cl1Ind$dead*NA
Cl1Ind$CC
days<-unique(Cl1Ind$DAY)
mday<-max(days)
deadobs<-which(Cl1Ind$dead==1)
nmax<-which(Cl1Ind$DAY < mday)
testobs<-intersect(deadobs, nmax)
Cl1Ind$CC<-Cl1Ind$STAGE*NA
for(i in 1:length(testobs)){
d<-Cl1Ind$DAY[testobs[i]]
n<-which(days==d)
nx<-days[n+1]
ins<-Cl1Ind$INSECT[testobs[i]]
ains<-which(Cl1Ind$INSECT==ins)
anx<-which(Cl1Ind$DAY==nx)
nextobv<-intersect(ains, anx)
if(Cl1Ind$STATUS[testobs[i]] != Cl1Ind$STATUS[nextobv]){
Cl1Ind$STATUS[testobs[i]]<- Cl1Ind$STATUS[nextobv]
Cl1Ind$dead[testobs[i]]<- Cl1Ind$dead[nextobv]
Cl1Ind$alive[testobs[i]]<- Cl1Ind$alive[nextobv]
Cl1Ind$knockdown[testobs[i]]<- Cl1Ind$knowkdown[nextobv]
Cl1Ind$unviable[testobs[i]]<- Cl1Ind$unviable[nextobv]
Cl1Ind$living[testobs[i]]<- Cl1Ind$living[nextobv]
Cl1Ind$CC[testobs[i]]<-"STATUS CHANGED IN CODE- Died later than originally recorded"
}
}
Cl1Ind<-LD1Ind
#If dead, then becomes knockdown mark as knock down.
#create vector of unique days
days<-unique(Cl1Ind$DAY)
mday<-max(days)
deadobs<-which(Cl1Ind$dead==1)
nmax<-which(Cl1Ind$DAY < mday)
testobs<-intersect(deadobs, nmax)
Cl1Ind$CC<-Cl1Ind$STAGE*NA
for(i in 1:length(testobs)){
d<-Cl1Ind$DAY[testobs[i]]
n<-which(days==d)
nx<-days[n+1]
ins<-Cl1Ind$INSECT[testobs[i]]
ains<-which(Cl1Ind$INSECT==ins)
anx<-which(Cl1Ind$DAY==nx)
nextobv<-intersect(ains, anx)
if(Cl1Ind$STATUS[testobs[i]] != Cl1Ind$STATUS[nextobv]){
Cl1Ind$STATUS[testobs[i]]<- Cl1Ind$STATUS[nextobv]
Cl1Ind$dead[testobs[i]]<- Cl1Ind$dead[nextobv]
Cl1Ind$alive[testobs[i]]<- Cl1Ind$alive[nextobv]
Cl1Ind$knockdown[testobs[i]]<- Cl1Ind$knockdown[nextobv]
Cl1Ind$unviable[testobs[i]]<- Cl1Ind$unviable[nextobv]
Cl1Ind$living[testobs[i]]<- Cl1Ind$living[nextobv]
Cl1Ind$CC[testobs[i]]<-"STATUS CHANGED IN CODE- Died later than originally recorded"
}
}
View(Cl1Ind)
which(Cl1Ind$CC=="STATUS CHANGED IN CODE- Died later than originally recorded")
length(which(Cl1Ind$CC=="STATUS CHANGED IN CODE- Died later than originally recorded"))
which(LD90Ind$INSECT=="LD90Ind$INSECT[3]")
which(LD1Ind$INSECT=="LD1Ind$INSECT[3]")
which(LD1Ind$INSECT==LD1Ind$INSECT[3])
bug<-which(Cl1Ind$CC=="STATUS CHANGED IN CODE- Died later than originally recorded")
Cl1Ind$INSECT[bug]
unique(Cl1Ind$INSECT[bug])
library(lubridate) #para extracting dates
library(reshape2) #para make the wide data into long data
library(vioplot)
library(matrixStats)
library(ggplot2)
library(plyr)  #para rbind.fill function
library(geeM)
library(MASS)
library(lmtest)
#library(pscl)
library(survival)
library(doBy)
library(Rmisc) #summarySE command
setwd("c:\\Users\\tradylan\\Documents\\Laboratory\\chagasycimexhuevos")
cimfertpilot <- read.csv("Cimex_FertP_update12_3.csv")
#Original Found https://docs.google.com/spreadsheets/d/1E-GRO1_Ybrgqj0wjgz5s9YHY1KwJUVPov0I2PwgC2CQ/edit
cimfert1 <- read.csv("Cimex_FertR1_8_12.csv")
##https://docs.google.com/spreadsheets/d/1iDBITasgMrbmwGJJSwsPkcal1b7b3kdfmviRtw8wbqA/edit#gid=709304485
cimfert2 <- read.csv("Cimex_FertR2_8_12.csv")
#https://docs.google.com/spreadsheets/d/13RvsL-uZaKgJPN3RBf8nTlsR8BQ6U-BrEQ_7BmxYgsI/edit
#Bring in Mortality Data
mortR1 <- read.csv("Cimex_Mortality_R1.csv")
mortR2 <- read.csv("Cimex_Mortality_R2.csv")
#another tab in the two R1 and R2 Google docs above.
#bring in temperature and humidity data.
#the pilot has the temp and RH data for all sections
tempRH <- read.csv("TEMP_Y_RH.csv")
#from same table as above.
###Put all the data together.
##Create a table with all the insects.
#first create marker so we can identify each trial.
cimfertpilot$trial <- 0
cimfert1$trial <- 1
cimfert2$trial <- 2
#bring the tables together.".fill" allows different table lengths fill w/ NA
cimfert<-rbind.fill(cimfert2, cimfert1, cimfertpilot)
#create unicode for insect pair
cimfert$ID <- paste(cimfert$Nro_.pareja, cimfert$trial, sep="-")
#create column that specifies specific mouse
cimfert$raton <-paste(cimfert$Procedencia, cimfert$trial, sep="-")
#first use Procedencia to get certain groups
ControlP <- which(cimfert$Procedencia=="CO")
InfectPA <- which(cimfert$Procedencia=="I-R1")
InfectPB <- which(cimfert$Procedencia=="I-R2")
ControlA <- which(cimfert$Procedencia=="CO-A")
ControlB <- which(cimfert$Procedencia=="CO-B")
InfectA <- which(cimfert$Procedencia=="I-A")
InfectB <- which(cimfert$Procedencia=="I-B")
##Now create some indexes using the mouse.
#the R stands for which Rep it was in. RA is rep 1 and RB is rep2.
#r doesn't like numbers in the names
InfectARA <-which(cimfert$raton=="I-A-1")
InfectARB <-which(cimfert$raton=="I-A-2")
InfectBRA <-which(cimfert$raton=="I-B-1")
InfectBRB <-which(cimfert$raton=="I-B-2")
ControlARA <- which(cimfert$raton=="CO-A-1")
ControlARB <- which(cimfert$raton=="CO-A-2")
ControlBRA <- which(cimfert$raton=="CO-B-1")
ControlBRB <- which(cimfert$raton=="CO-B-2")
#group the appropriate ones for later usage
tot<-c(1:length(cimfert$raton))
controls <- c(ControlP, ControlA, ControlB)
infect <- c(InfectPA, InfectPB, InfectA, InfectB)
InfectP <- c(InfectPA, InfectPB)
InfectRA <- c(InfectARA, InfectBRA)
InfectRB <- c(InfectARB, InfectBRB)
ControlRA <- c(ControlARA, ControlBRA)
ControlRB <- c(ControlARB, ControlBRB)
#make column designating infected/control
cimfert$infected[infect]<-1
cimfert$infected[controls]<-0
#find which columns are hatch and which are eggs.
postura<-which(substr(names(cimfert), nchar(names(cimfert)), nchar(names(cimfert)))=="p")
viabilidad <-which(substr(names(cimfert), nchar(names(cimfert)), nchar(names(cimfert)))=="v")
#make id numbers for analysis(character string doesn't play friendly with other pkgs)
cimfert$idnum<-c(1:length(cimfert$ID))
#We need to create outputs for the data.
blank <- (1:(length(postura)*length(cimfert$Procedencia))*0)
Compile <- data.frame(blank,0,0,0,0,0,0, 0, 0, 0, 0, 0, 0)
Compile <- rename(Compile, replace = c("blank"="id", "X0"="parents","X0.1"="infected","X0.2"="start",
"X0.3"="week", "X0.4"="date", "X0.5"="eggs", "X0.6"="hatch", "X0.7"="alive",
"X0.8"="mouse", "X0.9"="procedencia", "X0.10"="trial", "X0.11"="idnum"))
#if adding colums, be sure that you capitalize the Xx
#make sure the cimfert columns are characters or they will not transfer.
cimfert$Nro_.pareja <- as.character(cimfert$Nro_.pareja)
cimfert$Procedencia <- as.character(cimfert$Procedencia)
cimfert$Fecha_Inicio_.Pareja <-as.character(cimfert$Fecha_Inicio_.Pareja)
#now we need to create a nested loop to get the data into a new data frame
for (d in 1:(length(postura))){
for (i in 1:(length(cimfert$s1_p))){ #i for each insect
Compile$week[i+((d-1)*length(cimfert$ID))] <- d
Compile$trial[i+((d-1)*length(cimfert$ID))] <- cimfert$trial[i]
Compile$mouse[i+((d-1)*length(cimfert$ID))] <- cimfert$raton[i]
Compile$id[i+((d-1)*length(cimfert$ID))] <- cimfert$ID[i]
Compile$parents[i+((d-1)*length(cimfert$ID))] <- cimfert$Nro_.pareja[i]
Compile$procedencia[i+((d-1)*length(cimfert$ID))] <- cimfert$Procedencia[i]
Compile$infected[i+((d-1)*length(cimfert$ID))] <- cimfert$infected[i]
Compile$start[i+((d-1)*length(cimfert$ID))] <- cimfert$Fecha_Inicio_.Pareja[i]
Compile$hatch[i+((d-1)*length(cimfert$ID))] <-cimfert[i,(2*d+3)]
Compile$eggs[i+((d-1)*length(cimfert$ID))]<-cimfert[i,(2*d+2)]
Compile$idnum[i+((d-1)*length(cimfert$ID))] <- cimfert$idnum[i]
}
}
#We need to make a colum for alive
#I need to check with them to ensure correct interpretation
#for (i in 1:length(Compile$week))
#if(Compile$week[i] >= Compile$death[i]){
#    Compile$alive[i]<-0
#  } else(Compile$alive[i]<-1)
#This is assumes that if a number is entered the insect was alive during that week.\
Compile$eggs<-as.numeric(Compile$eggs)
dead<-which(is.na(Compile$eggs)==TRUE)
alive<-which(is.na(Compile$eggs)==FALSE)
Compile$alive[dead]<-0
Compile$alive[alive]<-1
#make a column with the percent viability
Compile$perferc<-(Compile$hatch/Compile$eggs)
#Now that table is made, make date so that humidity and temperature data can be easily entered.
Compile$start <- parse_date_time(Compile$start, "dmy", tz="EST")
Compile$start <- as.Date(Compile$start)
Compile$date <- (Compile$start+(Compile$week*7))
###add temperature and humidity values.
#make the tempRH also date format
tempRH$FECHA <- parse_date_time(tempRH$FECHA, "dmy", tz="EST")
tempRH$FECHA <- as.Date(tempRH$FECHA)
#Once we have full data, we justneed to comment out the following line.
pilot <- which(Compile$trial==0)
repone <- which(Compile$trial==1)
reptwo <- which(Compile$trial==2)
#Compile<-Compile[pilot,]
#-----------------------------
#Now lets not look at the number of eggs but the number of leg laying events.
events <- function(x){
if(is.na(x)==TRUE){
event <-NA
} else if(x == 0){
event <- 0
} else if(x >=1){
event <- 1}
event
}
#egg events
Compile$eggevent<- (1:length(Compile$eggs))*NA
eggs <- as.list(Compile$eggs)
Compile$eggevent<-sapply(eggs, events)
Compile$eggevent <- as.numeric(Compile$eggevent)
#hatch events
Compile$hatchevent<- (1:length(Compile$hatch))*NA
hatch <- as.list(Compile$hatch)
Compile$hatchevent <-sapply(hatch, events)
Compile$hatchevent <- as.numeric(Compile$hatchevent)
View(Compile)
