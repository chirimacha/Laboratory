# #create model to add regression line to line graphs
# eggweek<-lm(Compile$eggs ~Compile$week)
# hatchweek<-lm(Compile$hatch ~Compile$week)
# #line graph for eggs laid by week
# plot(Compile$week, Compile$eggs+rnorm(length(Compile$eggs), 0, 0.5), main="Eggs by Week")
# abline(eggweek)
# #box plot for eggs laid
# boxplot(Compile$eggs ~Compile$week, main="Eggs by Week")
# #Line graph for eggs laid by week
# plot(Compile$week, Compile$hatch+rnorm(length(Compile$hatch), 0, 0.5), main="Hatching by Week")
# abline(hatchweek)
# #box plot for eggs hatched
# boxplot(Compile$hatch ~Compile$week, main="Hatching by Week")
#
# par(mfrow=c(1,1))
# #pdf("graphs/NmbEggsByDateBox.pdf")
# boxplot(Compile$eggs ~Compile$date, main="Eggs by Date")
# #dev.off()
#
# #pdf("graphs/NmbHtchByDateBox.pdf")
# boxplot(Compile$hatch ~Compile$date, main="Hatching by Date")
# #dev.off()
#
# ##lets makle a combined plot of the two groups together
# enona<-which(is.na(Compile$eggs)==FALSE)
# hnona<-which(is.na(Compile$hatch)==FALSE)
# Compile$infected<-as.factor(Compile$infected)
# Compile$week<-as.factor(Compile$week)
#
# #the box plot for eggs laid
# par(mfrow=c(1,1))
# #pdf("graphs/NumEggsLaidByWeekYInfyCntlBox.pdf")
# g<-ggplot(aes( y= eggs, x= week, fill = infected, na.rm=TRUE),
#        data= Compile[enona,]) +geom_boxplot(data=Compile[enona,])
# g<-g+ggtitle("Distribution of Number of Eggs Laid by Infection Status Each Week")+
#   xlab("Week") +
#   ylab("Number of Eggs Laid")
# g<-g+scale_fill_manual(values=c("#00CCFF", "#990000"),name="Infection Status", labels=c("Controls", "Infected"))
# #g<-g+ scale_color_discrete(name="Infection Status", labels=c("Controls", "Infected"))
# #g<-g+scale_x_continuous(breaks=seq(0, 38, 2))
# #g<-g+scale_x_discrete(labels=c("", seq())
# g
#
#
# #ggsave(g, file="BoxPlotDistNumEggLaidbyInfectionStatusbyWeek.jpeg", units= "cm",
# #   width = 26.4, height= 15.875)
# #dev.off()
#
#
# #create graph that show average
# weekinfsum<-summarySE(Compile, measurevar="eggs", groupvars=c("infected", "week"), na.rm=TRUE)
#
# #Change working directory for easy access to draft writers
# setwd("c:\\Users\\tradylan\\Dropbox\\cruzi_on_lifetables\\paper_draft\\Figuras\\figura_5_AverageEggsLaid")
# #setwd("c:\\Users\\tradylan\\Documents\\Laboratory\\chagasycimexhuevos\\graphs")
#
# #save as csv so figure can easily be recreated on its own.
# #write.csv(weekinfsum,"DataforFig5.csv")
#
# ##to save as pdf
# #pdf("graphs/AvNumEggsLaidByWeekYInfyLineCI.pdf")
# pdf("AvNumEggsLaidByWeekYInfyLineCI.pdf")
#
# #Code to create figure in ggplot
# g2 <- ggplot(weekinfsum, aes(x=week, y=eggs, color=infected)) +
#   geom_errorbar(aes(ymin=eggs-ci, ymax=eggs+ci, group=infected, color=infected),
#                 width=.1)+
#   geom_line(aes(group=infected)) +
#   ggtitle("Average Number of Eggs Laid from Living Insects By Week")+
#   xlab("Week") +
#   ylab("Average Number of Eggs Laid")+
#   scale_color_discrete(name="Infection Status", labels=c("Controls", "Infected"),h= c(250, 3))+
#   geom_point()+
#   theme(legend.position=c(0.9, 0.9))
# g2
#
# dev.off()
# ##save as various file types
# #JPEG
# ggsave(g2, file="AvNumEggsLaidByWeekYInfyLineCI.jpeg", units= "cm",
#   width = 26.4, height= 15.875)
#
# #BMP
# ggsave(g2, file="AvNumEggsLaidByWeekYInfyLineCI.bmp", units= "cm",
#  width = 26.4, height= 15.875)
#
# #GIF
# #ggsave(g2, file="AvNumEggsLaidByWeekYInfyLineCI.gif", units= "cm",
# # width = 26.4, height= 15.875)
#
# #TIFF
# ggsave(g2, file="AvNumEggsLaidByWeekYInfyLineCI.tiff", units= "cm",
#  width = 26.4, height= 15.875)
#
# #EPS
# ggsave(g2, file="AvNumEggsLaidByWeekYInfyLineCI.eps", units= "cm",
#  width = 26.4, height= 15.875)
#
# #SVG
# ggsave(g2, file="AvNumEggsLaidByWeekYInfyLineCI.svg", units= "cm",
#  width = 26.4, height= 15.875)
#
# #png
# ggsave(g2, file="AvNumEggsLaidByWeekYInfyLineCI.png", units= "cm",
#  width = 26.4, height= 15.875)
#
#
#
# #hatch plot
# #pdf("graphs/NumEggsHtchByWeekyInfyCntrlBox.pdf")
# h<-ggplot(aes( y= hatch, x= week, fill = infected, na.rm=TRUE),
#        data= Compile[hnona,])+geom_boxplot(data=Compile[hnona,])
# h<-h+ggtitle("Distribution of Number of Eggs Hatched by Infection Status in Bugs that Laid Eggs")
# h<-h+scale_fill_manual(values=c("#00CCFF", "#990000"))
# h
#
# #ggsave(h, file="BoxPlotDistNumEggHtvhbyInfectionStatusbyWeek.jpeg", units= "cm",
#        #width = 26.4, height= 15.875)
# #dev.off()
#
# #h2: Hatchrate Plot
# #make a hatch rate
# Compile$hatchrate<-Compile$hatch/Compile$eggs
# #Make a summary table
# hatchratesum<-summarySE(Compile, measurevar="hatchrate", groupvars=c("infected", "week"), na.rm=TRUE)
# #replace the Inf'swith NA's
# hatchratesum$hatchrate[which(is.infinite(hatchratesum$hatchrate)==TRUE)]<-NA
# #write.csv(hatchratesum,"DataforFig6.csv")
#
# #Plot the average and 95% Confidence Interval
# #change working directory
# setwd("c:\\Users\\tradylan\\Dropbox\\cruzi_on_lifetables\\paper_draft\\Figuras\\figura_6_AverageHatchRate")
#
# pdf("AvHatchrateByWeekYInfyLineCI.pdf")
# h2 <- ggplot(hatchratesum, aes(x=week, y=hatchrate, color=infected)) +
#   geom_errorbar(aes(ymin=hatchrate-ci, ymax=hatchrate+ci, group=infected, color=infected),
#                 width=.1)+
#   geom_line(aes(group=infected)) +
#   ggtitle("Average Percentage of Eggs that Hatched by Week")+
#   xlab("Week") +
#   ylab("Average Percentage of Eggs that Hatched")+
#   scale_color_discrete(name="Infection Status", labels=c("Controls", "Infected"), h= c(250, 3))+
#   geom_point()+
#   theme(legend.position=c(0.9, 0.9))+
#   scale_y_continuous(breaks=seq(-3, 3, 0.5))
# h2
# dev.off()
# ##save as other various file types.
# #JPEG
# ggsave(h2, file="AvHatchrateByWeekYInfyLineCI.jpeg", units= "cm",
#   width = 26.4, height= 15.875)
#
# #BMP
# ggsave(h2, file="AvHatchrateByWeekYInfyLineCI.bmp", units= "cm",
#  width = 26.4, height= 15.875)
#
# #TIFF
# ggsave(h2, file="AvHatchrateByWeekYInfyLineCI.tiff", units= "cm",
#  width = 26.4, height= 15.875)
#
# #EPS
# ggsave(h2, file="AvHatchrateByWeekYInfyLineCI.eps", units= "cm",
#  width = 26.4, height= 15.875)
#
# #SVG
# ggsave(h2, file="AvHatchrateByWeekYInfyLineCI.svg", units= "cm",
#  width = 26.4, height= 15.875)
#
# #png
# ggsave(h2, file="AvHatchrateByWeekYInfyLineCI.png", units= "cm",
#  width = 26.4, height= 15.875)
#
#
# #h3: Hatchrate Plot by trial
# #Make a summary table
# hatchratetrial<-summarySE(Compile, measurevar="hatchrate", groupvars=c("infected", "week", "trial"), na.rm=TRUE)
# #replace the inf with NA
# hatchratetrial$hatchrate[which(is.infinite(hatchratetrial$hatchrate)==TRUE)]<-NA
# par(mfrow=c(3,1))
# pdf("graphs/AvHatchrateByWeekYInfyTrialLineCIReps.pdf")
#
# #rep Pilot
# h3a <- ggplot(hatchratetrial[which(hatchratetrial$trial==0),], aes(x=week, y=hatchrate, color=infected)) +
#   geom_errorbar(aes(ymin=hatchrate-ci, ymax=hatchrate+ci, group=infected, color=infected),
#                 width=.1)+
#   geom_line(aes(group=c(infected))) +
#   ggtitle("Average Hatch Rate Each Week By Insects that Laid in Pilot")+
#   xlab("Week") +
#   ylab("Average Percentage of Eggs that Hatched")+
#   scale_color_discrete(name="Infection Status", labels=c("Controls", "Infected"), h= c(250, 3))+
#   geom_point()
# h3a
# #Rep 1
# h3b <- ggplot(hatchratetrial[which(hatchratetrial$trial==1),], aes(x=week, y=hatchrate, color=infected)) +
#   geom_errorbar(aes(ymin=hatchrate-ci, ymax=hatchrate+ci, group=infected, color=infected),
#                 width=.1)+
#   geom_line(aes(group=c(infected))) +
#   ggtitle("Average Hatch Rate Each Week By Insects that Laid in Rep 1")+
#   xlab("Week") +
#   ylab("Average Percentage of Eggs that Hatched")+
#   scale_color_discrete(name="Infection Status", labels=c("Controls", "Infected"), h= c(250, 3))+
#   geom_point()
# h3b
# #Rep 2
# h3c <- ggplot(hatchratetrial[which(hatchratetrial$trial==2),], aes(x=week, y=hatchrate, color=infected)) +
#   geom_errorbar(aes(ymin=hatchrate-ci, ymax=hatchrate+ci, group=infected, color=infected),
#                 width=.1)+
#   geom_line(aes(group=c(infected))) +
#   ggtitle("Average Hatch Rate Each Week By Insects that Laid in Rep 2")+
#   xlab("Week") +
#   ylab("Average Percentage of Eggs that Hatched")+
#   scale_color_discrete(name="Infection Status", labels=c("Controls", "Infected"), h= c(250, 3))+
#   geom_point()
# h3c
#
#
# dev.off()
#
# par(mfrow=c(1,1))
#create a factor id for mice
mice<-unique(Compile$mouse)
mouseidnum<-c(1:length(mice))
mousetable<-data.frame(mice,mouseidnum)
mousetable$mouseidnum<-as.factor(mousetable$mouseidnum)
Compile$mouseidnum<-Compile$trial*0
for(i in 1:length(mice)){
micenumi<-which(mousetable$mouseidnum==i)
micematch<-which(Compile$mouse==mousetable$mice[micenumi])
Compile$mouseidnum[micematch]<-i
}
###create values that summarize across insect's life
# #create rows to fill by loop
Compile$lifespan<-Compile$eggs*NA
Compile$egg_total<-Compile$eggs*NA
Compile$hatch_total<-Compile$eggs*NA
Compile$avmaxtemp<-Compile$eggs*NA
Compile$avmintemp<-Compile$eggs*NA
Compile$avmaxhum<-Compile$eggs*NA
Compile$avminhum<-Compile$eggs*NA
Compile$havmaxtemp<-Compile$eggs*NA
Compile$havmintemp<-Compile$eggs*NA
Compile$havmaxhum<-Compile$eggs*NA
Compile$havminhum<-Compile$eggs*NA
#in temperature dataset make temperature and humidity values numeric
tempRH$TEMP.MAX..Â.C.<-as.numeric(tempRH$TEMP.MAX..Â.C.)
tempRH$TEMP.MIN..Â.C.<-as.numeric(tempRH$TEMP.MIN..Â.C.)
tempRH$HR.MAX....<-as.numeric(tempRH$HR.MAX....)
tempRH$HR.MIN....<-as.numeric(tempRH$HR.MIN....)
# #identify living observations so temperatures while the
# #insect is dead does not have affect
lives <- which(Compile$alive==1)
#identify observations that have eggs laid
eggslaid <- which(Compile$eggs > 0)
# #loop over each insect and calculate lifespan and temperature variables
for (i in 1:max(Compile$idnum)) {
ids<-which(Compile$idnum==i)
#Sum eggs laid and hatched across life of bug
Compile$egg_total[ids]<-sum(Compile$eggs[ids], na.rm=TRUE)
Compile$hatch_total[ids]<-sum(Compile$hatch[ids], na.rm=TRUE)
is <- intersect(ids, lives)#that way you don't add dead times to observations
#the number of observations while alive == lifespan
ls<-length
Compile$lifespan[ids]<-ls
#identify the first and last observations in [is]
fst<-is[1]
lst<-is[ls]
#identify first and last date for each insect.
begin<-(Compile$start[fst])
end<-Compile$date[lst]
a<-which(tempRH$FECHA==begin)
b<-which(tempRH$FECHA==end)
#Use dates to find values from temperature and humidity data
#average over the life of the bug.
avmaxtemp1<-mean(tempRH$TEMP.MAX..Â.C.[a:b], na.rm=TRUE)
avmintemp1<-mean(tempRH$TEMP.MIN..Â.C.[a:b], na.rm=TRUE)
avmaxhum1<-mean(tempRH$HR.MAX....[a:b], na.rm=TRUE)
avminhum1<-mean(tempRH$HR.MIN....[a:b], na.rm=TRUE)
#Now add summarized temperature values to Compile
Compile$avmaxtemp[ids]<-avmaxtemp1
Compile$avmintemp[ids]<-avmintemp1
Compile$avmaxhum[ids]<-avmaxhum1
Compile$avminhum[ids]<-avminhum1
}
#now make a similar calculation for humidity, only using weeks where eggs were laid
for (i in 1:max(Compile$idnum)) {
ids<-which(Compile$idnum==i)
leggs <- intersect(ids, eggslaid)
if(length(leggs) > 0){
#create a list of dates
FECHA<-NA
for (j in 1:length(leggs)){
endings <- Compile$date[leggs[j]]
beginings <- (Compile$date[leggs[j]])-6
moredates<-(beginings:endings)
FECHA<-c(FECHA, moredates)
}
num<-1:length(FECHA)
datetable<-data.frame(num, FECHA)
#merge temperature data onto datetable
temptable<-merge(datetable, tempRH, by="FECHA", all.x=TRUE)
#take the average of each of these columns
havmaxtemp1 <- mean(temptable$TEMP.MAX..Â.C., na.rm=TRUE)
havmintemp1 <- mean(temptable$TEMP.MIN..Â.C., na.rm=TRUE)
havmaxhum1 <- mean(temptable$HR.MAX...., na.rm=TRUE)
havminhum1 <- mean(temptable$HR.MIN...., na.rm=TRUE)
#Now add these to Compile
Compile$havmaxtemp[ids] <- havmaxtemp1
Compile$havmintemp[ids] <- havmintemp1
Compile$havmaxhum[ids] <- havmaxhum1
Compile$havminhum[ids] <- havminhum1
}
}
#finally lets reduce the table down to only the lifespan data
#this is the same as only taking the first week of dtaa
weekone<-which(Compile$week==1)
FFdata<-Compile[weekone,]
#and then removing duplicate or week specific columns
FFdata$id<- NULL
FFdata$sdweek<- NULL
FFdata$procedencia<- NULL
FFdata$mouse<- NULL
FFdata$alive<- NULL
FFdata$date<- NULL
FFdata$week<- NULL
FFdata$start<- NULL
FFdata$id<- NULL
FFdata$parents<- NULL
FFdata$eggs<- NULL
FFdata$hatch<- NULL
#save as a csv
#write.csv("FertilityFecundityFinalData.csv")
plot(FFdata$lifespan, FFdata$egg_total)
for (i in 1:max(Compile$idnum)) {
ids<-which(Compile$idnum==i)
#Sum eggs laid and hatched across life of bug
Compile$egg_total[ids]<-sum(Compile$eggs[ids], na.rm=TRUE)
Compile$hatch_total[ids]<-sum(Compile$hatch[ids], na.rm=TRUE)
is <- intersect(ids, lives)#that way you don't add dead times to observations
#the number of observations while alive == lifespan
ls<-length
Compile$lifespan[ids]<-ls
#identify the first and last observations in [is]
fst<-is[1]
lst<-is[ls]
#identify first and last date for each insect.
begin<-(Compile$start[fst])
end<-Compile$date[lst]
a<-which(tempRH$FECHA==begin)
b<-which(tempRH$FECHA==end)
#Use dates to find values from temperature and humidity data
#average over the life of the bug.
avmaxtemp1<-mean(tempRH$TEMP.MAX..Â.C.[a:b], na.rm=TRUE)
avmintemp1<-mean(tempRH$TEMP.MIN..Â.C.[a:b], na.rm=TRUE)
avmaxhum1<-mean(tempRH$HR.MAX....[a:b], na.rm=TRUE)
avminhum1<-mean(tempRH$HR.MIN....[a:b], na.rm=TRUE)
#Now add summarized temperature values to Compile
Compile$avmaxtemp[ids]<-avmaxtemp1
Compile$avmintemp[ids]<-avmintemp1
Compile$avmaxhum[ids]<-avmaxhum1
Compile$avminhum[ids]<-avminhum1
}
for (i in 1:max(Compile$idnum)) {
ids<-which(Compile$idnum==i)
#Sum eggs laid and hatched across life of bug
Compile$egg_total[ids]<-sum(Compile$eggs[ids], na.rm=TRUE)
Compile$hatch_total[ids]<-sum(Compile$hatch[ids], na.rm=TRUE)
is <- intersect(ids, lives)#that way you don't add dead times to observations
#the number of observations while alive == lifespan
ls<-length(is)
Compile$lifespan[ids]<-ls
#identify the first and last observations in [is]
fst<-is[1]
lst<-is[ls]
#identify first and last date for each insect.
begin<-(Compile$start[fst])
end<-Compile$date[lst]
a<-which(tempRH$FECHA==begin)
b<-which(tempRH$FECHA==end)
#Use dates to find values from temperature and humidity data
#average over the life of the bug.
avmaxtemp1<-mean(tempRH$TEMP.MAX..Â.C.[a:b], na.rm=TRUE)
avmintemp1<-mean(tempRH$TEMP.MIN..Â.C.[a:b], na.rm=TRUE)
avmaxhum1<-mean(tempRH$HR.MAX....[a:b], na.rm=TRUE)
avminhum1<-mean(tempRH$HR.MIN....[a:b], na.rm=TRUE)
#Now add summarized temperature values to Compile
Compile$avmaxtemp[ids]<-avmaxtemp1
Compile$avmintemp[ids]<-avmintemp1
Compile$avmaxhum[ids]<-avmaxhum1
Compile$avminhum[ids]<-avminhum1
}
#now make a similar calculation for humidity, only using weeks where eggs were laid
for (i in 1:max(Compile$idnum)) {
ids<-which(Compile$idnum==i)
leggs <- intersect(ids, eggslaid)
if(length(leggs) > 0){
#create a list of dates
FECHA<-NA
for (j in 1:length(leggs)){
endings <- Compile$date[leggs[j]]
beginings <- (Compile$date[leggs[j]])-6
moredates<-(beginings:endings)
FECHA<-c(FECHA, moredates)
}
num<-1:length(FECHA)
datetable<-data.frame(num, FECHA)
#merge temperature data onto datetable
temptable<-merge(datetable, tempRH, by="FECHA", all.x=TRUE)
#take the average of each of these columns
havmaxtemp1 <- mean(temptable$TEMP.MAX..Â.C., na.rm=TRUE)
havmintemp1 <- mean(temptable$TEMP.MIN..Â.C., na.rm=TRUE)
havmaxhum1 <- mean(temptable$HR.MAX...., na.rm=TRUE)
havminhum1 <- mean(temptable$HR.MIN...., na.rm=TRUE)
#Now add these to Compile
Compile$havmaxtemp[ids] <- havmaxtemp1
Compile$havmintemp[ids] <- havmintemp1
Compile$havmaxhum[ids] <- havmaxhum1
Compile$havminhum[ids] <- havminhum1
}
}
#finally lets reduce the table down to only the lifespan data
#this is the same as only taking the first week of dtaa
weekone<-which(Compile$week==1)
FFdata<-Compile[weekone,]
#and then removing duplicate or week specific columns
FFdata$id<- NULL
FFdata$sdweek<- NULL
FFdata$procedencia<- NULL
FFdata$mouse<- NULL
FFdata$alive<- NULL
FFdata$date<- NULL
FFdata$week<- NULL
FFdata$start<- NULL
FFdata$id<- NULL
FFdata$parents<- NULL
FFdata$eggs<- NULL
FFdata$hatch<- NULL
#save as a csv
#write.csv("FertilityFecundityFinalData.csv")
plot(FFdata$lifespan, FFdata$egg_total)
lifespanmod<-glm.nb(egg_total~infected+lifespan, data=FFdata )
summary(lifespanmod )
#AIC==1636.7 P(infected)==0.107
#Null Model without any temperature or humidity variables.
nullmodel<- glm.nb(egg_total~infected, data=FFdata, offset(log(lifespan)))
summary(nullmodel)  #AIC==26710   P=<2e-16 *** Theta is 1.13
#Check if poisson would be better
poissonmod<-glm(egg_total~infected, offset(log(lifespan)), data=FFdata, family="poisson")
#test from http://www.ats.ucla.edu/stat/r/dae/nbreg.htm
X2 <- 2*(logLik(nullmodel)-logLik(poissonmod))
pchisq(X2, df=1, lower.tail=FALSE)  #is the df=1 because they are the same, except for theta?
lrtest(poissonmod, nullmodel) #this does the same thing, again shows that nb is better
#This rules out poisson
#check for 0 inflation
nullzmod<- zeroinfl(egg_total~infected+offset(log(lifespan)), data=FFdata)
vuong(nullmodel, nullzmod) #null model is better, so no zero inflation
pcad<-data.frame(FFdata$avmaxtemp,FFdata$avmintemp,FFdata$avmaxhum,
FFdata$avminhum)
corm<-cor(pcad)
eigen(corm)  #First two components are greater than 1.
#pcout <- princomp(pcad)#R community recomends using prcomp over princomp.
pcout2 <- prcomp(~FFdata.avmaxtemp+FFdata.avmintemp+FFdata.avmaxhum+
FFdata.avminhum, data=pcad, scale=TRUE)
#the sixth subset is the matrix of raw components
pcm <- pcout2$x
#We need to add these componenets to original data set.
#create idnum variable to later merge.
prince<-data.frame(pcm)
prince$idnum<-c(1:length(prince$PC2))
#find the relative contribution of each variable to each component
#fromhttp://stackoverflow.com/questions/12760108/principal-components-
#analysis-how-to-get-the-contribution-of-each-paramete
aload <- abs(pcout2$rotation)
sweep(aload, 2, colSums(aload), "/")
##Repeat for hatch model variables
#first create a data set without NA Measurements
srnas<-which(is.na(FFdata$havmintemp)==FALSE)
rFFdata<-FFdata[srnas,]
Hpcad<-data.frame(rFFdata$havmaxtemp,rFFdata$havmintemp,rFFdata$havmaxhum,rFFdata$havminhum)
hcorm<-cor(Hpcad)
#find eigen values
eigen(hcorm) #same as before, first two variales should be used.
#Hpcout <-princomp(Hpcad)
Hpcout2 <- prcomp(~rFFdata.havmaxtemp+rFFdata.havmintemp+rFFdata.havmaxhum+rFFdata.havminhum, data=Hpcad, scale=TRUE)
#obtain raw components to be added back to data table
Hpcm<-Hpcout2$x
#We need to add these componenets to original data set.
Hprince<-data.frame(Hpcm)
#attach idnum to merge on.
Hprince$idnum<-rFFdata$idnum
# Columns need to be renamed to be difirrent from non-hatch components
names(Hprince)<-c("HComp.1", "HComp.2", "HComp.3", "HComp.4", "idnum")
###Merge the data sets
#eggs laid
single2<-merge(FFdata, prince, by="idnum")
#eggs hatched
FFdataPC<-merge(Hprince, single2, by="idnum", all.y= TRUE)
#write.csv(FFdataPC, "FertilityFecundityDataPC.csv")
#to determine the number of principle components that could be used from PCA
#conduct Leave One Out Cross validation.
#estimPCA<-estim_ncpPCA(pcad, ncp.min=0, ncp.max=4, method.cv="loo", method="EM")
estim_ncpPCA(pcad, ncp.min=0, ncp.max=4, method.cv="loo")
estim_ncpPCA(Hpcad, ncp.min=0, ncp.max=4, method.cv="loo")
#determines that the first 3 components could b
#Model with trial interacting with both PC2 and PC1
pceggmod2e <- glm.nb(egg_total~infected+PC1*factor(trial)+PC2*factor(trial),
data=FFdataPC, offset(log(lifespan)))
summary(pceggmod2e)
summary(pceggmod2d)
pceggmod2d <- glm.nb(egg_total~infected+PC2+PC1*factor(trial), data=FFdataPC,
offset(log(lifespan)))
summary(pceggmod2d)
names(FFdataPC)
