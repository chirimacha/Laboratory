install.packages("slidify")
source("http://bioconductor.org/bioLite.R")
biocLite()
library(ggplot2)
search()
"2015-03-23"+30
a<-as.Date("2015-03-23")
a+40
+90
a+90
a+100
-7
a+93
x<-c(0,1,2,NA, FALSE)
x
is.na(x[3])
requiredPackages <- c("XML"
,"doParallel", "lubridate","PBSmapping","plyr","inline","Rcpp"
)
packages <- requiredPackages[!(requiredPackages %in% rownames(installed.packages()))]
if(length(packages) > 0) {
install.packages(packages)
}
fa<-1100+200+26150+2000+2865
fa
2*32315
fees<-((1958+370+168+250)*2)+150
fees
fees+health+rent
fees<-((1958+370+168+250)*2)+150
health<-1570*2
rent<-4326*2
fees+health+rent
tuition(21088*2)
fa<-(1100+200+26150+2000+2865)*2
fa
*
tuition<-(21088*2)
fees<-((1958+370+168+250)*2)+150
health<-1570*2
rent<-4326*2
expense<-fees+health+rent
expenses
expense
expense+tuition
y<-expense+tuition
fa-y
tuition
health+fees
fees
?binom.test
bisampsize<-function(m){
((1.96/m)^2)*0.25
}
bisampsize(0.5)
bisampsize<-function(m){
((1.96/m)^2)*0.25
}
bisampsize(0.25)
bisampsize<-function(m){
((1.96/m)^2)*0.25
}
bisampsize(0.20)
1/12
3/12
binom.power
library(binom)
install.packages(binom)
install.packages("binom")
version
x4 <- sample(1:10, 5, replace=T)
x4
tray1<-sample(1:4, 4)
tray1`
r
)
q
;
''
'
""
)
asdf
104r
+
)
""
'
''
''
sample(1:4, 4)
sample(1:4, 4)
tray1<-
sample(1:4,4)
tray2<-sample(1:4,4)
tray3<-sample(1:4,4)
tray4<-sample(1:4,4)
tray1
tray2
tray3
tray4
quiz<-81.5*15
mid<-84*30
quiz+mid
quiz<-81.5*.15
mid<-84*.30
quiz+mid
100-37.4
quiz<-81.5*.15
mid<-84*.25
hw1<-6*.1
quiz+mid+hw1
.8*50
rnorm(4,4)
sample(1:4,4)
sample(1:4,4)
sample(1:4,4)
sample(1:4,4)
library(lubridate) #para extracting dates
library(reshape2) #para make the wide data into long data
library(matrixStats)
library(ggplot2)
library(plyr)  #para rbind.fill function
library(geeM)
library(MASS)
library(lmtest)
library(pscl)
library(survival)
library(doBy)
library(missMDA)
library(Rmisc) #summarySE command
library(lme4)#linear mixed effects
library(nlme)
setwd("c:\\Users\\tradylan\\Documents\\Laboratory\\chagasycimexhuevos")
#bring in hatching data from each rep (pilot, rep 1, and rep 2)
cimfertpilot <- read.csv("Cimex_FertP_update12_3.csv")
#Original Found https://docs.google.com/spreadsheets/d/1E-GRO1_Ybrgqj0wjgz5s9YHY1KwJUVPov0I2PwgC2CQ/edit
cimfert1 <- read.csv("Cimex_FertR1_8_12.csv")
##https://docs.google.com/spreadsheets/d/1iDBITasgMrbmwGJJSwsPkcal1b7b3kdfmviRtw8wbqA/edit#gid=709304485
cimfert2 <- read.csv("Cimex_FertR2_8_12.csv")
#https://docs.google.com/spreadsheets/d/13RvsL-uZaKgJPN3RBf8nTlsR8BQ6U-BrEQ_7BmxYgsI/edit
#Bring in Mortality Data (currently derived from above tables.)
#mortR1 <- read.csv("Cimex_Mortality_R1.csv")
#mortR2 <- read.csv("Cimex_Mortality_R2.csv")
#another tab in the two R1 and R2 Google docs above.
#bring in temperature and humidity data.
#the pilot has the temp and RH data for all sections
tempRH <- read.csv("TEMP_Y_RH.csv")
#original from same google file as above hatch data.
###Put all the data together.
##Create a table with all the insects.
#first create marker so we can identify each trial.
cimfertpilot$trial <- 0
cimfert1$trial <- 1
cimfert2$trial <- 2
#bring the tables together.".fill" allows different table lengths fill w/ NA
cimfert<-rbind.fill(cimfert2, cimfert1, cimfertpilot)
#create unicode for insect pair
cimfert$ID <- paste(cimfert$Nro_.pareja, cimfert$trial, sep="-")
#create column that specifies specific mouse
cimfert$raton <-paste(cimfert$Procedencia, cimfert$trial, sep="-")
#first use Procedencia to get certain groups
ControlP <- which(cimfert$Procedencia=="CO")
InfectPA <- which(cimfert$Procedencia=="I-R1")
InfectPB <- which(cimfert$Procedencia=="I-R2")
ControlA <- which(cimfert$Procedencia=="CO-A")
ControlB <- which(cimfert$Procedencia=="CO-B")
InfectA <- which(cimfert$Procedencia=="I-A")
InfectB <- which(cimfert$Procedencia=="I-B")
##Now create some indicies using the mouse.
#the R stands for which Rep it was in. RA is rep 1 and RB is rep2.
InfectARA <-which(cimfert$raton=="I-A-1")
InfectARB <-which(cimfert$raton=="I-A-2")
InfectBRA <-which(cimfert$raton=="I-B-1")
InfectBRB <-which(cimfert$raton=="I-B-2")
ControlARA <- which(cimfert$raton=="CO-A-1")
ControlARB <- which(cimfert$raton=="CO-A-2")
ControlBRA <- which(cimfert$raton=="CO-B-1")
ControlBRB <- which(cimfert$raton=="CO-B-2")
tot<-c(1:length(cimfert$raton))
controls <- c(ControlP, ControlA, ControlB) #all controls
infect <- c(InfectPA, InfectPB, InfectA, InfectB) #all infected insects
InfectP <- c(InfectPA, InfectPB) #both sets of infected mice in pilot
InfectRA <- c(InfectARA, InfectBRA) #both infected mice in rep 1
InfectRB <- c(InfectARB, InfectBRB)#both infected mice in rep 2
ControlRA <- c(ControlARA, ControlBRA) #both controls rep 1
ControlRB <- c(ControlARB, ControlBRB) #both controls rep 2
#group for trial
#make column designating infected/control
cimfert$infected[infect]<-1
cimfert$infected[controls]<-0
#find which columns are hatch and which are eggs.
postura<-which(substr(names(cimfert), nchar(names(cimfert)), nchar(names(cimfert)))=="p")
viabilidad <-which(substr(names(cimfert), nchar(names(cimfert)), nchar(names(cimfert)))=="v")
#make id numbers for analysis(character string doesn't play friendly with other pkgs)
cimfert$idnum<-c(1:length(cimfert$ID))
#We need to create outputs for the data to put it in long format
#each row represents a weekly observation for a particular insect
#instead of all obsserations for that insect
blank <- (1:(length(postura)*length(cimfert$Procedencia))*0)
Compile <- data.frame(blank,0,0,0,0,0,0, 0, 0, 0, 0, 0, 0)
#rename colums of new table.
Compile <- rename(Compile, replace = c("blank"="id", "X0"="parents","X0.1"="infected","X0.2"="start",
"X0.3"="week", "X0.4"="date", "X0.5"="eggs", "X0.6"="hatch", "X0.7"="alive",
"X0.8"="mouse", "X0.9"="procedencia", "X0.10"="trial", "X0.11"="idnum"))
#if adding colums, be sure that you capitalize the Xx
#make sure the cimfert columns are characters or they will not transfer.
cimfert$Nro_.pareja <- as.character(cimfert$Nro_.pareja)
cimfert$Procedencia <- as.character(cimfert$Procedencia)
cimfert$Fecha_Inicio_.Pareja <-as.character(cimfert$Fecha_Inicio_.Pareja)
cimfert$mouse
cimfert$raton
unique(cimfert$raton)
length(unique(cimfert$raton))
#now we need to create a nested loop to get the data into the  new data frame
for (d in 1:(length(postura))){
for (i in 1:(length(cimfert$s1_p))){ #i for each insect
Compile$week[i+((d-1)*length(cimfert$ID))] <- d
Compile$trial[i+((d-1)*length(cimfert$ID))] <- cimfert$trial[i]
Compile$mouse[i+((d-1)*length(cimfert$ID))] <- cimfert$raton[i]
Compile$id[i+((d-1)*length(cimfert$ID))] <- cimfert$ID[i]
Compile$parents[i+((d-1)*length(cimfert$ID))] <- cimfert$Nro_.pareja[i]
Compile$procedencia[i+((d-1)*length(cimfert$ID))] <- cimfert$Procedencia[i]
Compile$infected[i+((d-1)*length(cimfert$ID))] <- cimfert$infected[i]
Compile$start[i+((d-1)*length(cimfert$ID))] <- cimfert$Fecha_Inicio_.Pareja[i]
Compile$hatch[i+((d-1)*length(cimfert$ID))] <-cimfert[i,(2*d+3)]
Compile$eggs[i+((d-1)*length(cimfert$ID))]<-cimfert[i,(2*d+2)]
Compile$idnum[i+((d-1)*length(cimfert$ID))] <- cimfert$idnum[i]
}
}
Compile$eggs<-as.numeric(Compile$eggs)
# iff an NA is placed and not a 0, the bug was dead
#so identify NA
dead<-which(is.na(Compile$eggs)==TRUE)
alive<-which(is.na(Compile$eggs)==FALSE)
#mark na's as dead, else alive.
Compile$alive[dead]<-0
Compile$alive[alive]<-1
#make date so that humidity and temperature data can be easily entered.
Compile$start <- parse_date_time(Compile$start, "dmy", tz="EST")
Compile$start <- as.Date(Compile$start)
Compile$date <- (Compile$start+(Compile$week*7))
#make the tempRH also date format
tempRH$FECHA <- parse_date_time(tempRH$FECHA, "dmy", tz="EST")
tempRH$FECHA <- as.Date(tempRH$FECHA)
#identify which insects are in which repetition
pilot <- which(Compile$trial==0)
repone <- which(Compile$trial==1)
reptwo <- which(Compile$trial==2)
# par(mfrow=c(1,1))
mice<-unique(Compile$mouse)
mice
mouseidnum<-c(1:length(mice))
mouseidnum
mousetable<-data.frame(mice,mouseidnum)
mousetable$mouseidnum<-as.factor(mousetable$mouseidnum)
Compile$mouseidnum<-Compile$trial*0
mice
length(mice)
#create a factor id for mice
mice<-unique(Compile$mouse)
mouseidnums<-c(1:length(mice))
mousetable<-data.frame(mice,mouseidnums)
mousetable$mouseidnums<-as.factor(mousetable$mouseidnums)
Compile$mouseidnum<-Compile$trial*0
for(i in 1:length(mice)){
micenumi<-which(mousetable$mouseidnums==i)
micematch<-which(Compile$mouse==mousetable$mice[micenumi])
Compile$mouseidnum[micematch]<-i
}
Compile$mouseidnum
Compile$lifespan<-Compile$eggs*NA
Compile$egg_total<-Compile$eggs*NA
Compile$hatch_total<-Compile$eggs*NA
Compile$avmaxtemp<-Compile$eggs*NA
Compile$avmintemp<-Compile$eggs*NA
Compile$avmaxhum<-Compile$eggs*NA
Compile$avminhum<-Compile$eggs*NA
Compile$havmaxtemp<-Compile$eggs*NA
Compile$havmintemp<-Compile$eggs*NA
Compile$havmaxhum<-Compile$eggs*NA
Compile$havminhum<-Compile$eggs*NA
#in temperature dataset make temperature and humidity values numeric
tempRH$TEMP.MAX..Â.C.<-as.numeric(tempRH$TEMP.MAX..Â.C.)
tempRH$TEMP.MIN..Â.C.<-as.numeric(tempRH$TEMP.MIN..Â.C.)
tempRH$HR.MAX....<-as.numeric(tempRH$HR.MAX....)
tempRH$HR.MIN....<-as.numeric(tempRH$HR.MIN....)
# #identify living observations so temperatures while the
# #insect is dead does not have affect
lives <- which(Compile$alive==1)
#identify observations that have eggs laid
eggslaid <- which(Compile$eggs > 0)
# #loop over each insect and calculate lifespan and temperature variables
for (i in 1:max(Compile$idnum)) {
ids<-which(Compile$idnum==i)
#Sum eggs laid and hatched across life of bug
Compile$egg_total[ids]<-sum(Compile$eggs[ids], na.rm=TRUE)
Compile$hatch_total[ids]<-sum(Compile$hatch[ids], na.rm=TRUE)
is <- intersect(ids, lives)#that way you don't add dead times to observations
#the number of observations while alive == lifespan
ls<-length(is)
Compile$lifespan[ids]<-ls
#identify the first and last observations in [is]
fst<-is[1]
lst<-is[ls]
#identify first and last date for each insect.
begin<-(Compile$start[fst])
end<-Compile$date[lst]
a<-which(tempRH$FECHA==begin)
b<-which(tempRH$FECHA==end)
#Use dates to find values from temperature and humidity data
#average over the life of the bug.
avmaxtemp1<-mean(tempRH$TEMP.MAX..Â.C.[a:b], na.rm=TRUE)
avmintemp1<-mean(tempRH$TEMP.MIN..Â.C.[a:b], na.rm=TRUE)
avmaxhum1<-mean(tempRH$HR.MAX....[a:b], na.rm=TRUE)
avminhum1<-mean(tempRH$HR.MIN....[a:b], na.rm=TRUE)
#Now add summarized temperature values to Compile
Compile$avmaxtemp[ids]<-avmaxtemp1
Compile$avmintemp[ids]<-avmintemp1
Compile$avmaxhum[ids]<-avmaxhum1
Compile$avminhum[ids]<-avminhum1
}
#now make a similar calculation for humidity, only using weeks where eggs were laid
for (i in 1:max(Compile$idnum)) {
ids<-which(Compile$idnum==i)
leggs <- intersect(ids, eggslaid)
if(length(leggs) > 0){
#create a list of dates
FECHA<-NA
for (j in 1:length(leggs)){
endings <- Compile$date[leggs[j]]
beginings <- (Compile$date[leggs[j]])-6
moredates<-(beginings:endings)
FECHA<-c(FECHA, moredates)
}
num<-1:length(FECHA)
datetable<-data.frame(num, FECHA)
#merge temperature data onto datetable
temptable<-merge(datetable, tempRH, by="FECHA", all.x=TRUE)
#take the average of each of these columns
havmaxtemp1 <- mean(temptable$TEMP.MAX..Â.C., na.rm=TRUE)
havmintemp1 <- mean(temptable$TEMP.MIN..Â.C., na.rm=TRUE)
havmaxhum1 <- mean(temptable$HR.MAX...., na.rm=TRUE)
havminhum1 <- mean(temptable$HR.MIN...., na.rm=TRUE)
#Now add these to Compile
Compile$havmaxtemp[ids] <- havmaxtemp1
Compile$havmintemp[ids] <- havmintemp1
Compile$havmaxhum[ids] <- havmaxhum1
Compile$havminhum[ids] <- havminhum1
}
}
#finally lets reduce the table down to only the lifespan data
#this is the same as only taking the first week of dtaa
weekone<-which(Compile$week==1)
FFdata<-Compile[weekone,]
#and then removing duplicate or week specific columns
FFdata$id<- NULL
FFdata$sdweek<- NULL
FFdata$procedencia<- NULL
FFdata$mouse<- NULL
FFdata$alive<- NULL
FFdata$date<- NULL
FFdata$week<- NULL
FFdata$start<- NULL
FFdata$id<- NULL
FFdata$parents<- NULL
FFdata$eggs<- NULL
FFdata$hatch<- NULL
# plot(FFdata$lifespan, FFdata$egg_total)
#find the principal components for Temp/Hum across the entire bugs lifespan
pcad<-data.frame(FFdata$avmaxtemp,FFdata$avmintemp,FFdata$avmaxhum,
FFdata$avminhum)
corm<-cor(pcad)
eigen(corm)  #First two components are greater than 1.
#pcout <- princomp(pcad)#R community recomends using prcomp over princomp.
pcout2 <- prcomp(~FFdata.avmaxtemp+FFdata.avmintemp+FFdata.avmaxhum+
FFdata.avminhum, data=pcad, scale=TRUE)
#the sixth subset is the matrix of raw components
pcm <- pcout2$x
#We need to add these componenets to original data set.
#create idnum variable to later merge.
prince<-data.frame(pcm)
prince$idnum<-c(1:length(prince$PC2))
#find the relative contribution of each variable to each component
#fromhttp://stackoverflow.com/questions/12760108/principal-components-
#analysis-how-to-get-the-contribution-of-each-paramete
aload <- abs(pcout2$rotation)
sweep(aload, 2, colSums(aload), "/")
##Repeat for hatch model variables
#first create a data set without NA Measurements
srnas<-which(is.na(FFdata$havmintemp)==FALSE)
rFFdata<-FFdata[srnas,]
Hpcad<-data.frame(rFFdata$havmaxtemp,rFFdata$havmintemp,rFFdata$havmaxhum,rFFdata$havminhum)
hcorm<-cor(Hpcad)
#find eigen values
eigen(hcorm) #same as before, first two variales should be used.
#Hpcout <-princomp(Hpcad)
Hpcout2 <- prcomp(~rFFdata.havmaxtemp+rFFdata.havmintemp+rFFdata.havmaxhum+rFFdata.havminhum, data=Hpcad, scale=TRUE)
#obtain raw components to be added back to data table
Hpcm<-Hpcout2$x
#We need to add these componenets to original data set.
Hprince<-data.frame(Hpcm)
#attach idnum to merge on.
Hprince$idnum<-rFFdata$idnum
# Columns need to be renamed to be difirrent from non-hatch components
names(Hprince)<-c("HComp.1", "HComp.2", "HComp.3", "HComp.4", "idnum")
###Merge the data sets
#eggs laid
single2<-merge(FFdata, prince, by="idnum")
#eggs hatched
FFdataPC<-merge(Hprince, single2, by="idnum", all.y= TRUE)
FFdataPC <- read.csv("FertilityFecundityDataPC.csv")
unique(FFdataPC$mouseidnum)
meeggmod2e <- glmer.nb(egg_total~infected+PC1+PC2+(1|mouseidnum)+offset(log(FFdataPC$lifespan)), data=FFdataPC)
summary(meeggmod2e)
meeggmod2e <- glmer.nb(egg_total~infected+PC1+PC2+(1|trial/mouseidnum/idnum)+offset(log(FFdataPC$lifespan)), data=FFdataPC)
meeggmod2e <- glmer.nb(egg_total~infected+PC1+PC2+(1|trial/mouseidnum)+offset(log(FFdataPC$lifespan)), data=FFdataPC)
meeggmod2e <- glmer.nb(egg_total~infected+PC1+PC2+(1|mouseidnum)+offset(log(FFdataPC$lifespan)), data=FFdataPC)
summary(meeggmod2e)
meeggmod2e <- glmer.nb(egg_total~infected+PC1+PC2+(1|trial)+offset(log(FFdataPC$lifespan)), data=FFdataPC)
meeggmod2b <- glmer.nb(egg_total~infected+PC1+(1|trial)+offset(log(FFdataPC$lifespan)), data=FFdataPC)
summary(meeggmod2b)
meeggmod2b <- glmer.nb(egg_total~infected+PC1+(1|trial)+offset(log(FFdataPC$lifespan)), data=FFdataPC)
summary(meeggmod2a)
meeggmod2a <- glmer.nb(egg_total~infected+PC1+PC2+(1|trial)+offset(log(FFdataPC$lifespan)), data=FFdataPC)
summary(meeggmod2a)
meeggmod2c <- glmer.nb(egg_total~infected+PC2+(1|trial)+offset(log(FFdataPC$lifespan)), data=FFdataPC)
summary(meeggmod2c)
mehatchmod <- glmer.nb(egg_total~infected+PC1+(1|trial/idnum)+offset(log(FFdataPC$lifespan)), data=FFdataPC)
mehatchmod <- glmer.nb(egg_total~infected+PC1+(1|trial)+offset(log(FFdataPC$lifespan)), data=FFdataPC)
mehatchmod <- glmer.nb(egg_total~infected+PC1+(1|trial)+offset(log(FFdataPC$lifespan)), data=FFdataPC)
mehatchmod <- glmer.nb(hatch_total~infected+PC1+(1|trial)+offset(log(FFdataPC$egg_total)), data=FFnonaPC)
mehatchmod <- glmer.nb(hatch_total~infected+PC1+(1|trial)+offset(log(FFdataPC$egg_total)), data=FFdataPC)
#==============================================================================
#Hatch models
#remove 0's again
pcnona<-which(FFdataPC$egg_total==0)
FFnonaPC<-FFdataPC[-pcnona,]
#Null model with no predictors
pchatchmodnull<-glm.nb(hatch_total~offset(log(egg_total)), data=FFnonaPC)
#Null Model without principal compoenents but with infection and lifespan
pchatchmod0<-glm.nb(hatch_total~infected+lifespan+offset(log(egg_total)),
data=FFnonaPC)
#AIC=1140
#Null Model without lifespan
pchatchmod0a<-glm.nb(hatch_total~infected+offset(log(egg_total)), data=FFnonaPC)
#1138.4 (lifespan can be removed.)
#No components, trial added.
pchatchmod0b<-glm.nb(hatch_total~infected+trial+offset(log(egg_total)),
data=FFnonaPC)
#Model with 1 PC
pchatchmod1<-glm.nb(hatch_total~infected+HComp.1+offset(log(egg_total)),
data=FFnonaPC)
pchatchmod1b<-glm.nb(hatch_total~infected+factor(trial)+HComp.1+
offset(log(egg_total)), data=FFnonaPC)
pchatchmod1c<-glm.nb(hatch_total~infected+factor(trial)*HComp.1+
offset(log(egg_total)), data=FFnonaPC)
pchatchmod1d<-glm.nb(hatch_total~infected+lifespan+HComp.1+
offset(log(egg_total)), data=FFnonaPC)
pchatchmod1e<-glm.nb(hatch_total~infected+lifespan+factor(trial)*
HComp.1+offset(log(egg_total)), data=FFnonaPC)
#Model with 2 PC
pchatchmod2<-glm.nb(hatch_total~infected+HComp.1+HComp.2+offset(log(egg_total)
), data=FFnonaPC)
pchatchmod2b<-glm.nb(hatch_total~infected+factor(trial)+HComp.1+HComp.2+
offset(log(egg_total)), data=FFnonaPC)
pchatchmod2c<-glm.nb(hatch_total~infected+HComp.1+HComp.2*factor(trial)+
offset(log(egg_total)), data=FFnonaPC)
pchatchmod2d<-glm.nb(hatch_total~infected+lifespan+HComp.1+HComp.2+factor(trial)+
offset(log(egg_total)), data=FFnonaPC)
pchatchmod2e<-glm.nb(hatch_total~infected+HComp.2+HComp.1*factor(trial)+
lifespan+offset(log(egg_total)), data=FFnonaPC)
#Model with 3 PC
pchatchmod3<-glm.nb(hatch_total~infected+HComp.1+HComp.2+HComp.3+
offset(log(egg_total)), data=FFnonaPC)
#Model with 3 PC
pchatchmod3a<-glm.nb(hatch_total~infected+HComp.1+HComp.2+HComp.3+factor(trial)
+offset(log(egg_total)), data=FFnonaPC)
pchatchmod3b<-glm.nb(hatch_total~infected+HComp.1+HComp.2+HComp.3+factor(trial)
+offset(log(egg_total)), data=FFnonaPC)
pchatchmod3c<-glm.nb(hatch_total~infected+HComp.1+HComp.2+HComp.3+lifespan+
offset(log(egg_total)), data=FFnonaPC)
#Model with 4 PC  #using 4 PC overfits PC
pchatchmod4<-glm.nb(hatch_total~infected+HComp.1+HComp.2+HComp.3+HComp.4+
offset(log(egg_total)), data=FFnonaPC)
pchatchmod0#1140 SE inf=0.05
pchatchmod0a#1140
pchatchmod0b#1140 SE 0.49
pchatchmod1#1140
pchatchmod1b#1144
pchatchmod1c#1144
pchatchmod1d#1142
pchatchmod1e#1144
pchatchmod2#1141.9
pchatchmod2b#1141.5
pchatchmod2c#1144
pchatchmod2d#1141
pchatchmod2e#1143
pchatchmod3#1143
pchatchmod3a#1142
pchatchmod3b#1142
pchatchmod3c#1145
pchatchmod4
#perform likelihood ratio test
lrtest(pchatchmod1,pchatchmod0)
#lrtest(pchatchmod4,pchatchmod2)#
#lrtest(pchatchmod4,pchatchmod1)
#lrtest(pchatchmod4,pchatchmod0)
#lrtest(pchatchmod2,pchatchmod1)
#adding random effects
mehatchmod <- glmer.nb(hatch_total~infected+PC1+(1|trial)+offset(log(FFnonaPC$egg_total)), data=FFnonaPC)
summary(mehatchmod)
