Compile$Hhightemp_total[ids]<-maxt
Compile$Hhighhum_total[ids]<-maxh
Compile$Hlowtemp_total[ids]<-mint
Compile$Hlowhum_total[ids]<-minh
}
warnings()
View(Compile)
which(Compile$eggs==0)
zeroeggs<-which(Compile$eggs==0)
Compile[zeroeggs,]
View(Compile[zeroeggs,])
dead<-which(Compile$alive==0)
intersect(eggslaid, dead)
is.na(avhighhum_total)
is.na(Compile$avhighhum_total)
which(is.na(Compile$avhighhum_total)==TRUE)
which(is.na(Compile$lawtemp_total)==TRUE)
which(is.na(Compile$Havtemp_total)==TRUE)
max(NA)
mean(NA)
highhum
View(Compile[zeroeggs,])
View(Compile[eggslaid,])
which(is.na(Compile$Havtemp_total[eggslaid])==TRUE)
which(Compile$egg_total==0)
laid<-which(Compile$egg_total==0)
laid<-which(Compile$egg_total!=0)
laid<-which(Compile$egg_total==0)
nolaid<-which(Compile$egg_total==0)
nolaid
length(laid)
length(nolaid)
nolaid<-which(Compile$egg_total!=0)
length(nolaid)
length(Compile)
dim(Compile)
nolaid<-which(Compile$egg_total==0)
laid<-which(Compile$egg_total!=0)
which(is.na(Compile$Havtemp_total[laid])==TRUE)
max(0)
Compile$tempmax
which(Compile$tempmax==Inf)
which(Compile$tempmax==-Inf)
#reduce the data to just the first week
weekone<-which(Compile$week==1)
single<-Compile[weekone,]
price
##Now go through each temperature and humidity covariate by graphing
#see which variables will be used for temperature and humidity
pdf("Hum_Temp_covariates.pdf")
par(mfrow=(c(2,5)))
#eggs by average humidity
segghum<-ggplot(aes( y= eggs, x= avhum_total, na.rm=TRUE),
data=single)+geom_point(data=single)
segghum<-segghum+ggtitle("Number of Eggs Laid by Average Humidity and Infection Status")
segghum<-segghum+facet_grid(. ~infected)+geom_smooth(method= "lm")
segghum
seghum<-glm(eggs ~infected*avhum_total, data=single)
seghum
#egg avg high humidity
segghighhum <- ggplot(aes( y= eggs, x= avhighhum_total, na.rm=TRUE),
data=single)+geom_point(data=single)
segghighhum <- segghighhum+ggtitle("Number of Eggs Laid by Average High Humidity and Infection Status")
segghighhum <- segghighhum+facet_grid(. ~infected)+geom_smooth(method= "lm")
segghighhum
seghighhum <- glm(eggs ~infected*avhighhum_total, data=single)
seghighhum
#egg avg low humidity
segglowhum <- ggplot(aes( y= eggs, x= avlowhum_total, na.rm=TRUE),
data=single)+geom_point(data=single)
segglowhum <- segglowhum+ggtitle("Number of Eggs Laid by Average Low Humidity and Infection Status")
segglowhum <- segglowhum+facet_grid(. ~infected)+geom_smooth(method= "lm")
segglowhum
seglowhum <- glm.nb(eggs ~infected*avlowhum_total, data=single)
seglowhum
seglowhum <- glm.nb(eggs ~avlowhum_total, data=single)
seglowhum
summary(seglowhum)
#egg max humidity
seggmaxhum <- ggplot(aes( y= eggs, x= highhum_total, na.rm=TRUE),
data=single)+geom_point(data=single)
seggmaxhum <- seggmaxhum+ggtitle("Number of Eggs Laid by Maximum Humidity and Infection Status")
seggmaxhum <- seggmaxhum+facet_grid(. ~infected)+geom_smooth(method= "lm")
seggmaxhum
segmaxhum <- glm(eggs ~infected*highhum_total, data=single)
segmaxhum
#egg min humidity
segglowhum <- ggplot(aes( y= eggs, x= lowhum_total, na.rm=TRUE),
data=single)+geom_point(data=single)
segglowhum <- segglowhum+ggtitle("Number of Eggs Laid by Minimum Humidity and Infection Status")
segglowhum <- segglowhum+facet_grid(. ~infected)+geom_smooth(method= "lm")
segglowhum
seglowhum <- glm(eggs ~infected*lowhum_total, data=single)
seglowhum
##Temperature
#eggs by average temperature
seggtemp<-ggplot(aes( y= eggs, x= avtemp_total, na.rm=TRUE),
data=single)+geom_point(data=single)
seggtemp<-seggtemp+ggtitle("Number of Eggs Laid by Average Temperature and Infection Status")
seggtemp<-seggtemp+facet_grid(. ~infected)+geom_smooth(method= "lm")
seggtemp
segtemp<-glm(eggs ~infected*avtemp_total, data=single)
segtemp
#egg avg high temperature
segghightemp<-ggplot(aes( y= eggs, x= avhightemp_total, na.rm=TRUE),
data=single)+geom_point(data=single)
segghightemp<-segghightemp+ggtitle("Number of Eggs Laid by Average High Temperature and Infection Status")
segghightemp<-segghightemp+facet_grid(. ~infected)+geom_smooth(method= "lm")
segghightemp
seghightemp<-glm(eggs ~infected*avhightemp_total, data=single)
seghightemp
#egg avg low termperatuer
segglowtemp<-ggplot(aes( y= eggs, x= avlowtemp_total, na.rm=TRUE),
data=single)+geom_point(data=single)
segglowtemp<-segglowtemp+ggtitle("Number of Eggs Laid by Average Low Temperature and Infection Status")
segglowtemp<-segglowtemp+facet_grid(. ~infected)+geom_smooth(method= "lm")
segglowtemp
seglowtemp<-glm(eggs ~infected*avlowtemp_total, data=single)
seglowtemp
#egg max temperature
seggmaxtemp<-ggplot(aes( y= eggs, x= hightemp_total, na.rm=TRUE),
data=single)+geom_point(data=single)
seggmaxtemp<-seggmaxtemp+ggtitle("Number of Eggs Laid by Maximum Temperature and Infection Status")
seggmaxtemp<-seggmaxtemp+facet_grid(. ~infected)+geom_smooth(method= "lm")
seggmaxtemp
segmaxtemp<-glm(eggs ~infected*hightemp_total, data=single)
segmaxtemp
#egg min temperature
seggmintemp<-ggplot(aes( y= eggs, x= lowtemp_total, na.rm=TRUE),
data=single)+geom_point(data=single)
seggmintemp<-seggmintemp+ggtitle("Number of Eggs Laid by Minimum Temperature and Infection Status")
seggmintemp<-seggmintemp+facet_grid(. ~infected)+geom_smooth(method= "lm")
seggmintemp
segmintemp<-glm(eggs ~infected*lowtemp_total, data=single)
segmintemp
par(mfrow=c(1,1))
dev.off()
###Now just do a univariate analysis
# Instead of doing this all again,lets make a loop
#Create a data frame to output p-values
#create vector of varriables to consider
varriates <- c("avtemp_total", "avlowtemp_total", "avhightemp_total",
"hightemp_total", "lowtemp_total", "avhum_total","avlowhum_total",
"avhighhum_total", "highhum_total","lowhum_total")
varriates <- as.vector(varriates)
uni_est <- c(1:length(varriates)*NA)
uni_p <- c(1:length(varriates)*NA)
interact_est <- c(1:length(varriates)*NA)
interact_p <- c(1:length(varriates)*NA)
thdf<- data.frame(varriates, uni_est, uni_p, interact_est, interact_p)
for( i in 1:length(varriates)){
var_of_i<-which(names(single)==thdf$varriates[i])
unitvars  <- glm.nb(single$eggs ~ single[, var_of_i])
inter <- glm.nb(single$eggs ~ single$infected*single[, var_of_i])
#estimate for only one variabel
a <- summary(unitvars)$coef[,"Estimate"]
thdf$uni_est[i]<-a[2]
#p value for that variable
c <- summary(unitvars)$coef[,"Pr(>|z|)"]
thdf$uni_p[i]<-c[2]
#estimate for possible interaction
e <- summary(inter)$coef[,"Estimate"]
thdf$interact_est[i]<-e[4]
#p value for that interaction
ga <- summary(inter)$coef[,"Pr(>|z|)"]
thdf$interact_p[i]<-ga[4]
}
# write.csv(thdf, "humtemp_ptable.csv")
###############################################################################
#Principle Component Analysis
#------------------------------------------------------------------------------
#find the principl components across the entire bugs lifespan
pcad<-data.frame(single$idnum, single$avhighhum_total, single$avhightemp_total,
single$avhum_total, single$avtemp_total,single$avlowhum_total,
single$avlowtemp_total, single$highhum_total,
single$hightemp_total)
pcout<-princomp(pcad)
#the sixth subset is the matrix of raw components
pcm<-pcout[[6]]
#We need to add these componenets to original data set.
#create idnum variable to later merge.
prince<-data.frame(pcm)
prince$idnum<-c(1:length(prince$Comp.1))
View(prince)
##Repeat, but for weeks with eggs.
Hpcad<-data.frame(single$Hidnum, single$Havhighhum_total, single$Havhightemp_total,
single$Havhum_total, single$Havtemp_total,single$Havlowhum_total,
single$Havlowtemp_total, single$Hhighhum_total,
single$Hhightemp_total)
Hpcout<-princomp(Hpcad)
#the sixth subset is the matrix of raw components
Hpcm<-Hpcout[[6]]
#We need to add these componenets to original data set.
Hprince<-data.frame(Hpcm)
Hprince$idnum<-c(1:length(Hprince$Comp.1))
?princomp
pcout
pcout[[6]]
pcout[[2]]
Hprince
Hpcad<-data.frame(single$Havhighhum_total, single$Havhightemp_total,
single$Havhum_total, single$Havtemp_total,single$Havlowhum_total,
single$Havlowtemp_total, single$Hhighhum_total,
single$Hhightemp_total)
Hpcout<-princomp(Hpcad)
#the sixth subset is the matrix of raw components
Hpcm<-Hpcout[[6]]
Hpcout<-princomp(Hpcad, na.omit)
min(-Inf)
min(0)
min(-0)
min(.00000000000000000000000000000000000000000000000000000000000000001)
min(.00000000000000000000000000000000000000000000000000000000000000001892389789312908r32980318932489708903218903421)
min(.0000000000000000000000000000000000000000000000000000000000000000189238978931290832980318932489708903218903421)
max(NA)
max(NA, na.rm = TRUE)
min(NA, na.rm = TRUE)
is.infinite(Compile)
is.infinite(Compile$hightemp_total)
is.infinite(Compile$hightemp_total)==TRUE
which(is.infinite(Compile$hightemp_total)==TRUE)
which(is.infinite(Compile$Hhightemp_total)==TRUE)
a<- c(1,2,4)
a
a<- c(1,2,4, Inf, -Inf, NA)
is.infinite(a)
is.infinite(a)<-NA
is.infinite(a) <- NA
is.infinite(a) <- 2
a[which(is.infinite(a)==TRUE)]<- NA
a
for (i in 1:max(Compile$idnum)) {
ids<-which(Compile$idnum==i)
is <- intersect(ids, eggslaid)
#average temperatures
avgt<-mean(Compile$avtemp[is], na.rm=TRUE)
avght<-mean(Compile$avtemphigh[is], na.rm=TRUE)
avglt<-mean(Compile$avtemplow[is], na.rm=TRUE)
#average humidity
avgh<-mean(Compile$avhum[is], na.rm=TRUE)
avghh<-mean(Compile$avhumhigh[is], na.rm=TRUE)
avglh<-mean(Compile$avhumlow[is], na.rm=TRUE)
#Max and min Temp, Inf's are created
maxt <- max(Compile$tempmax[is], na.rm=TRUE)
mint <- min(Compile$tempmin[is], na.rm=TRUE)
#Max and min hum
maxh <- max(Compile$hummax[is], na.rm=TRUE)
minh <- min(Compile$hummin[is], na.rm=TRUE)
#remove Inf's
maxt[which(is.infinite(maxt)==TRUE)]<- NA
mint[which(is.infinite(mint)==TRUE)]<- NA
maxh[which(is.infinite(maxh)==TRUE)]<- NA
minh[which(is.infinite(minh)==TRUE)]<- NA
#Put the calculated items into the appropriate vectors of data frame
Compile$Havtemp_total[ids]<-avgt
Compile$Havlowtemp_total[ids]<-avglt
Compile$Havhightemp_total[ids]<-avght
Compile$Havhum_total[ids]<-avgh
Compile$Havlowhum_total[ids]<-avglh
Compile$Havhighhum_total[ids]<-avghh
Compile$Hhightemp_total[ids]<-maxt
Compile$Hhighhum_total[ids]<-maxh
Compile$Hlowtemp_total[ids]<-mint
Compile$Hlowhum_total[ids]<-minh
}
warnings(50)
weekone<-which(Compile$week==1)
single<-Compile[weekone,]
##Now go through each temperature and humidity covariate by graphing
#see which variables will be used for temperature and humidity
pdf("Hum_Temp_covariates.pdf")
par(mfrow=(c(2,5)))
#eggs by average humidity
segghum<-ggplot(aes( y= eggs, x= avhum_total, na.rm=TRUE),
data=single)+geom_point(data=single)
segghum<-segghum+ggtitle("Number of Eggs Laid by Average Humidity and Infection Status")
segghum<-segghum+facet_grid(. ~infected)+geom_smooth(method= "lm")
segghum
seghum<-glm(eggs ~infected*avhum_total, data=single)
seghum
#egg avg high humidity
segghighhum <- ggplot(aes( y= eggs, x= avhighhum_total, na.rm=TRUE),
data=single)+geom_point(data=single)
segghighhum <- segghighhum+ggtitle("Number of Eggs Laid by Average High Humidity and Infection Status")
segghighhum <- segghighhum+facet_grid(. ~infected)+geom_smooth(method= "lm")
segghighhum
seghighhum <- glm(eggs ~infected*avhighhum_total, data=single)
seghighhum
#egg avg low humidity
segglowhum <- ggplot(aes( y= eggs, x= avlowhum_total, na.rm=TRUE),
data=single)+geom_point(data=single)
segglowhum <- segglowhum+ggtitle("Number of Eggs Laid by Average Low Humidity and Infection Status")
segglowhum <- segglowhum+facet_grid(. ~infected)+geom_smooth(method= "lm")
segglowhum
seglowhum <- glm.nb(eggs ~infected*avlowhum_total, data=single)
seglowhum
seglowhum <- glm.nb(eggs ~avlowhum_total, data=single)
seglowhum
summary(seglowhum)
#egg max humidity
seggmaxhum <- ggplot(aes( y= eggs, x= highhum_total, na.rm=TRUE),
data=single)+geom_point(data=single)
seggmaxhum <- seggmaxhum+ggtitle("Number of Eggs Laid by Maximum Humidity and Infection Status")
seggmaxhum <- seggmaxhum+facet_grid(. ~infected)+geom_smooth(method= "lm")
seggmaxhum
segmaxhum <- glm(eggs ~infected*highhum_total, data=single)
segmaxhum
#egg min humidity
segglowhum <- ggplot(aes( y= eggs, x= lowhum_total, na.rm=TRUE),
data=single)+geom_point(data=single)
segglowhum <- segglowhum+ggtitle("Number of Eggs Laid by Minimum Humidity and Infection Status")
segglowhum <- segglowhum+facet_grid(. ~infected)+geom_smooth(method= "lm")
segglowhum
seglowhum <- glm(eggs ~infected*lowhum_total, data=single)
seglowhum
##Temperature
#eggs by average temperature
seggtemp<-ggplot(aes( y= eggs, x= avtemp_total, na.rm=TRUE),
data=single)+geom_point(data=single)
seggtemp<-seggtemp+ggtitle("Number of Eggs Laid by Average Temperature and Infection Status")
seggtemp<-seggtemp+facet_grid(. ~infected)+geom_smooth(method= "lm")
seggtemp
segtemp<-glm(eggs ~infected*avtemp_total, data=single)
segtemp
#egg avg high temperature
segghightemp<-ggplot(aes( y= eggs, x= avhightemp_total, na.rm=TRUE),
data=single)+geom_point(data=single)
segghightemp<-segghightemp+ggtitle("Number of Eggs Laid by Average High Temperature and Infection Status")
segghightemp<-segghightemp+facet_grid(. ~infected)+geom_smooth(method= "lm")
segghightemp
seghightemp<-glm(eggs ~infected*avhightemp_total, data=single)
seghightemp
#egg avg low termperatuer
segglowtemp<-ggplot(aes( y= eggs, x= avlowtemp_total, na.rm=TRUE),
data=single)+geom_point(data=single)
segglowtemp<-segglowtemp+ggtitle("Number of Eggs Laid by Average Low Temperature and Infection Status")
segglowtemp<-segglowtemp+facet_grid(. ~infected)+geom_smooth(method= "lm")
segglowtemp
seglowtemp<-glm(eggs ~infected*avlowtemp_total, data=single)
seglowtemp
#egg max temperature
seggmaxtemp<-ggplot(aes( y= eggs, x= hightemp_total, na.rm=TRUE),
data=single)+geom_point(data=single)
seggmaxtemp<-seggmaxtemp+ggtitle("Number of Eggs Laid by Maximum Temperature and Infection Status")
seggmaxtemp<-seggmaxtemp+facet_grid(. ~infected)+geom_smooth(method= "lm")
seggmaxtemp
segmaxtemp<-glm(eggs ~infected*hightemp_total, data=single)
segmaxtemp
#egg min temperature
seggmintemp<-ggplot(aes( y= eggs, x= lowtemp_total, na.rm=TRUE),
data=single)+geom_point(data=single)
seggmintemp<-seggmintemp+ggtitle("Number of Eggs Laid by Minimum Temperature and Infection Status")
seggmintemp<-seggmintemp+facet_grid(. ~infected)+geom_smooth(method= "lm")
seggmintemp
segmintemp<-glm(eggs ~infected*lowtemp_total, data=single)
segmintemp
par(mfrow=c(1,1))
dev.off()
###Now just do a univariate analysis
# Instead of doing this all again,lets make a loop
#Create a data frame to output p-values
#create vector of varriables to consider
varriates <- c("avtemp_total", "avlowtemp_total", "avhightemp_total",
"hightemp_total", "lowtemp_total", "avhum_total","avlowhum_total",
"avhighhum_total", "highhum_total","lowhum_total")
varriates <- as.vector(varriates)
uni_est <- c(1:length(varriates)*NA)
uni_p <- c(1:length(varriates)*NA)
interact_est <- c(1:length(varriates)*NA)
interact_p <- c(1:length(varriates)*NA)
thdf<- data.frame(varriates, uni_est, uni_p, interact_est, interact_p)
for( i in 1:length(varriates)){
var_of_i<-which(names(single)==thdf$varriates[i])
unitvars  <- glm.nb(single$eggs ~ single[, var_of_i])
inter <- glm.nb(single$eggs ~ single$infected*single[, var_of_i])
#estimate for only one variabel
a <- summary(unitvars)$coef[,"Estimate"]
thdf$uni_est[i]<-a[2]
#p value for that variable
c <- summary(unitvars)$coef[,"Pr(>|z|)"]
thdf$uni_p[i]<-c[2]
#estimate for possible interaction
e <- summary(inter)$coef[,"Estimate"]
thdf$interact_est[i]<-e[4]
#p value for that interaction
ga <- summary(inter)$coef[,"Pr(>|z|)"]
thdf$interact_p[i]<-ga[4]
}
# write.csv(thdf, "humtemp_ptable.csv")
###############################################################################
#Principle Component Analysis
#------------------------------------------------------------------------------
#find the principl components across the entire bugs lifespan
pcad<-data.frame(single$avhighhum_total, single$avhightemp_total,
single$avhum_total, single$avtemp_total,single$avlowhum_total,
single$avlowtemp_total, single$highhum_total,
single$hightemp_total)
pcout <- princomp(pcad)
#the sixth subset is the matrix of raw components
pcm <- pcout[[6]]
#We need to add these componenets to original data set.
#create idnum variable to later merge.
prince<-data.frame(pcm)
prince$idnum<-c(1:length(prince$Comp.1))
Hpcad<-data.frame(single$Havhighhum_total, single$Havhightemp_total,
single$Havhum_total, single$Havtemp_total,single$Havlowhum_total,
single$Havlowtemp_total, single$Hhighhum_total,
single$Hhightemp_total)
Hpcout<-princomp(Hpcad, na.omit)
View(Compile)
weekone<-which(Compile$week==1)
single<-Compile[weekone,]
View(single)
princomp(1,2,3)
princomp(a)
a
a
b
princomp(b)
b<-c(1, 2, 3)
princomp(b)
b
a
b<-c(1,2,3,NA, Inf, -Inf)
b
princomp(b)
b
b<-c(1,2,3,NA)
princomp(b)
princomp(b, na.omit)
princomp(b, na.remove==O)
srnas<-which(is.na(single$Havhum_total)==FALSE)
rsingle<-single[srnas,]
Hpcad<-data.frame(rsingle$Havhighhum_total, rsingle$Havhightemp_total,
rsingle$Havhum_total, rsingle$Havtemp_total,rsingle$Havlowhum_total,
rsingle$Havlowtemp_total, rsingle$Hhighhum_total,
rsingle$Hhightemp_total)
Hpcout<-princomp(Hpcad)
Hpcm<-Hpcout[[6]]
#We need to add these componenets to original data set.
Hprince<-data.frame(Hpcm)
Hprince$idnum<-rsingle$idnum
View(Hprince)
dim(rsingle)
sim(sinsimple)
sim(single)
dim(single)
srnas<-which(is.na(single$Havhum_total)==TRUE)
snas<-which(is.na(single$Havhum_total)==TRUE)
snas
length(snas)
14+163
#find the principal components across the entire bugs lifespan
pcad<-data.frame(single$avhighhum_total, single$avhightemp_total,
single$avhum_total, single$avtemp_total,single$avlowhum_total,
single$avlowtemp_total, single$highhum_total,
single$hightemp_total)
pcout <- princomp(pcad)
#the sixth subset is the matrix of raw components
pcm <- pcout[[6]]
#We need to add these componenets to original data set.
#create idnum variable to later merge.
prince<-data.frame(pcm)
prince$idnum<-c(1:length(prince$Comp.1))
##Repeat, but for weeks with eggs.
#first create a data set without NA's Measurements
srnas<-which(is.na(single$Havhum_total)==FALSE)
rsingle<-single[srnas,]
Hpcad<-data.frame(rsingle$Havhighhum_total, rsingle$Havhightemp_total,
rsingle$Havhum_total, rsingle$Havtemp_total,rsingle$Havlowhum_total,
rsingle$Havlowtemp_total, rsingle$Hhighhum_total,
rsingle$Hhightemp_total)
Hpcout<-princomp(Hpcad)
#the sixth subset is the matrix of raw components
Hpcm<-Hpcout[[6]]
#We need to add these componenets to original data set.
Hprince<-data.frame(Hpcm)
Hprince$idnum<-rsingle$idnum
# Columns need to be renamed to be firrent from prince
#Merge the data sets
single2<-merge(single, prince, by="idnum")
single2a<-merge(single, Hprince, by="idnum")
View(single2a)
Hprince
Hpcm
pcm
Hpcm
View(Hpcm)
View(pcm)
single2a<-merge(single2, Hprince, by="idnum")
View(single2a)
names(Hprince)
names(Hprince)<-c("HComp.1" "HComp.2" "HComp.3" "HComp.4" "HComp.5"
"HComp.6" "HComp.7" "HComp.8" "idnum")
names(Hprince)<-c("HComp.1", "HComp.2", "HComp.3", "HComp.4", "HComp.5",
"HComp.6", "HComp.7", "HComp.8", "idnum")
names(Hprince)
View(Hprince)
Hprince<-data.frame(Hpcm)
Hprince$idnum<-rsingle$idnum
# Columns need to be renamed to be firrent from prince
names(Hprince)<-c("HComp.1", "HComp.2", "HComp.3", "HComp.4", "HComp.5",
"HComp.6", "HComp.7", "HComp.8", "idnum")
#Merge the data sets
single2<-merge(single, prince, by="idnum")
single2a<-merge(single2, Hprince, by="idnum")
View(single2a)
single2<-merge(single, prince, by="idnum")
single2<-merge(single2, Hprince, by="idnum")
single2<-merge(single, prince, by="idnum")
single2a<-merge(single2, Hprince, by="idnum")
write.csv(single2a, "singleweekdata.csv")
