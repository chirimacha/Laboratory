)
packages <- requiredPackages[!(requiredPackages %in% rownames(installed.packages()))]
if(length(packages) > 0) {
install.packages(packages)
}
fa<-1100+200+26150+2000+2865
fa
2*32315
fees<-((1958+370+168+250)*2)+150
fees
fees+health+rent
fees<-((1958+370+168+250)*2)+150
health<-1570*2
rent<-4326*2
fees+health+rent
tuition(21088*2)
fa<-(1100+200+26150+2000+2865)*2
fa
*
tuition<-(21088*2)
fees<-((1958+370+168+250)*2)+150
health<-1570*2
rent<-4326*2
expense<-fees+health+rent
expenses
expense
expense+tuition
y<-expense+tuition
fa-y
tuition
health+fees
fees
?binom.test
bisampsize<-function(m){
((1.96/m)^2)*0.25
}
bisampsize(0.5)
bisampsize<-function(m){
((1.96/m)^2)*0.25
}
bisampsize(0.25)
bisampsize<-function(m){
((1.96/m)^2)*0.25
}
bisampsize(0.20)
1/12
3/12
binom.power
library(binom)
install.packages(binom)
install.packages("binom")
version
x4 <- sample(1:10, 5, replace=T)
x4
tray1<-sample(1:4, 4)
tray1`
r
)
q
;
''
'
""
)
asdf
104r
+
)
""
'
''
''
sample(1:4, 4)
sample(1:4, 4)
tray1<-
sample(1:4,4)
tray2<-sample(1:4,4)
tray3<-sample(1:4,4)
tray4<-sample(1:4,4)
tray1
tray2
tray3
tray4
#packages needed/experimented with
library(lubridate) #para extracting dates
library(reshape2) #para make the wide data into long data
library(vioplot)
library(matrixStats)
library(ggplot2)
library(plyr)  #para rbind.fill function
library(geeM)
library(MASS)
library(lmtest)
library(nlme)
library(psc1)
library(survival)
#set directory and bring in files to be analyzed.
setwd("c:\\Users\\tradylan\\Documents\\Laboratory\\chagasycimexhuevos")
#setwd("/Users/mzlevy/Laboratory/chagasycimexhuevos")
# ###############################################################################
# #==============================================================================
# #Data Formatting. The file "CompiledFertilityData.csv" was created
# #Do not run this part of code to save time unless corrections are necessary
# #Graphs may be helpful, many of which are already in github.
# #Modeling begins at line 1000.
# #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
#bring in hatching data
cimfertpilot <- read.csv("Cimex_FertP.csv")
#Original Found https://docs.google.com/spreadsheets/d/1E-GRO1_Ybrgqj0wjgz5s9YHY1KwJUVPov0I2PwgC2CQ/edit
cimfert1 <- read.csv("Cimex_FertR1_8_12.csv")
##https://docs.google.com/spreadsheets/d/1iDBITasgMrbmwGJJSwsPkcal1b7b3kdfmviRtw8wbqA/edit#gid=709304485
cimfert2 <- read.csv("Cimex_FertR2_8_12.csv")
#https://docs.google.com/spreadsheets/d/13RvsL-uZaKgJPN3RBf8nTlsR8BQ6U-BrEQ_7BmxYgsI/edit
#Bring in Mortality Data
mortR1 <- read.csv("Cimex_Mortality_R1.csv")
mortR2 <- read.csv("Cimex_Mortality_R2.csv")
#another tab in the two R1 and R2 Google docs above.
#bring in temperature and humidity data.
#the pilot has the temp and RH data for all sections
tempRH <- read.csv("TEMP_Y_RH.csv")
#from same table as above.
###Put all the data together.
##Create a table with all the insects.
#first create marker so we can identify each trial.
cimfertpilot$trial <- 0
cimfert1$trial <- 1
cimfert2$trial <- 2
#bring the tables together.".fill" allows different table lengths fill w/ NA
cimfert<-rbind.fill(cimfert2, cimfert1, cimfertpilot)
#create unicode for insect pair
cimfert$ID <- paste(cimfert$Nro_.pareja, cimfert$trial, sep="-")
#create column that specifies specific mouse
cimfert$raton <-paste(cimfert$Procedencia, cimfert$trial, sep="-")
#first use Procedencia to get certain groups
ControlP <- which(cimfert$Procedencia=="CO")
InfectPA <- which(cimfert$Procedencia=="I-R1")
InfectPB <- which(cimfert$Procedencia=="I-R2")
ControlA <- which(cimfert$Procedencia=="CO-A")
ControlB <- which(cimfert$Procedencia=="CO-B")
InfectA <- which(cimfert$Procedencia=="I-A")
InfectB <- which(cimfert$Procedencia=="I-B")
##Now create some indexes using the mouse.
#the R stands for which Rep it was in. RA is rep 1 and RB is rep2.
#r doesn't like numbers in the names
InfectARA <-which(cimfert$raton=="I-A-1")
InfectARB <-which(cimfert$raton=="I-A-2")
InfectBRA <-which(cimfert$raton=="I-B-1")
InfectBRB <-which(cimfert$raton=="I-B-2")
ControlARA <- which(cimfert$raton=="CO-A-1")
ControlARB <- which(cimfert$raton=="CO-A-2")
ControlBRA <- which(cimfert$raton=="CO-B-1")
ControlBRB <- which(cimfert$raton=="CO-B-2")
#group the appropriate ones for later usage
tot<-c(1:length(cimfert$raton))
controls <- c(ControlP, ControlA, ControlB)
infect <- c(InfectPA, InfectPB, InfectA, InfectB)
InfectP <- c(InfectPA, InfectPB)
InfectRA <- c(InfectARA, InfectBRA)
InfectRB <- c(InfectARB, InfectBRB)
ControlRA <- c(ControlARA, ControlBRA)
ControlRB <- c(ControlARB, ControlBRB)
#make column designating infected/control
cimfert$infected[infect]<-1
cimfert$infected[controls]<-0
#find which columns are hatch and which are eggs.
postura<-which(substr(names(cimfert), nchar(names(cimfert)), nchar(names(cimfert)))=="p")
viabilidad <-which(substr(names(cimfert), nchar(names(cimfert)), nchar(names(cimfert)))=="v")
#make id numbers for analysis(character string doesn't play friendly with other pkgs)
cimfert$idnum<-c(1:length(cimfert$ID))
#We need to create outputs for the data.
blank <- (1:(length(postura)*length(cimfert$Procedencia))*0)
Compile <- data.frame(blank,0,0,0,0,0,0, 0, 0, 0, 0, 0, 0)
Compile <- rename(Compile, replace = c("blank"="id", "X0"="parents","X0.1"="infected","X0.2"="start",
"X0.3"="week", "X0.4"="date", "X0.5"="eggs", "X0.6"="hatch", "X0.7"="alive",
"X0.8"="mouse", "X0.9"="procedencia", "X0.10"="trial", "X0.11"="idnum"))
#if adding colums, be sure that you capitalize the Xx
#make sure the cimfert columns are characters or they will not transfer.
cimfert$Nro_.pareja <- as.character(cimfert$Nro_.pareja)
cimfert$Procedencia <- as.character(cimfert$Procedencia)
cimfert$Fecha_Inicio_.Pareja <-as.character(cimfert$Fecha_Inicio_.Pareja)
#now we need to create a nested loop to get the data into a new data frame
for (d in 1:(length(postura))){
for (i in 1:(length(cimfert$s1_p))){ #i for each insect
Compile$week[i+((d-1)*length(cimfert$ID))] <- d
Compile$trial[i+((d-1)*length(cimfert$ID))] <- cimfert$trial[i]
Compile$mouse[i+((d-1)*length(cimfert$ID))] <- cimfert$raton[i]
Compile$id[i+((d-1)*length(cimfert$ID))] <- cimfert$ID[i]
Compile$parents[i+((d-1)*length(cimfert$ID))] <- cimfert$Nro_.pareja[i]
Compile$procedencia[i+((d-1)*length(cimfert$ID))] <- cimfert$Procedencia[i]
Compile$infected[i+((d-1)*length(cimfert$ID))] <- cimfert$infected[i]
Compile$start[i+((d-1)*length(cimfert$ID))] <- cimfert$Fecha_Inicio_.Pareja[i]
Compile$hatch[i+((d-1)*length(cimfert$ID))] <-cimfert[i,(2*d+3)]
Compile$eggs[i+((d-1)*length(cimfert$ID))]<-cimfert[i,(2*d+2)]
Compile$idnum[i+((d-1)*length(cimfert$ID))] <- cimfert$idnum[i]
}
}
#We need to make a colum for alive
#I need to check with them to ensure correct interpretation
#for (i in 1:length(Compile$week))
#if(Compile$week[i] >= Compile$death[i]){
#    Compile$alive[i]<-0
#  } else(Compile$alive[i]<-1)
#This is assumes that if a number is entered the insect was alive during that week.\
Compile$eggs<-as.numeric(Compile$eggs)
dead<-which(is.na(Compile$eggs)==TRUE)
alive<-which(is.na(Compile$eggs)==FALSE)
Compile$alive[dead]<-0
Compile$alive[alive]<-1
#make a column with the percent viability
Compile$perferc<-(Compile$hatch/Compile$eggs)
#Now that table is made, make date so that humidity and temperature data can be easily entered.
Compile$start <- parse_date_time(Compile$start, "dmy", tz="EST")
Compile$start <- as.Date(Compile$start)
Compile$date <- (Compile$start+(Compile$week*7))
###add temperature and humidity values.
#make the tempRH also date format
tempRH$FECHA <- parse_date_time(tempRH$FECHA, "dmy", tz="EST")
tempRH$FECHA <- as.Date(tempRH$FECHA)
#Once we have full data, we justneed to comment out the following line.
pilot <- which(Compile$trial==0)
repone <- which(Compile$trial==1)
reptwo <- which(Compile$trial==2)
#Compile<-Compile[pilot,]
#-----------------------------
#Make function to calculate avg high temperature of week.
avtemphigh<-function(rdate){
rdate<-as.Date(rdate)
fday<- (rdate-6)
if(rdate %in% tempRH$FECHA){
a<-which(tempRH$FECHA==fday)
b<-which(tempRH$FECHA==rdate)
mean(tempRH$TEMP.MAX..Â.C.[a:b], na.rm=TRUE)
} else{NA}
}
date<-Compile$date
Compile$avtemphigh <-sapply(date, avtemphigh)
#Make function to calculate avg low temperature of week.
avtemplow<-function(rdate){
rdate<-as.Date(rdate)
fday<- (rdate-6)
if(rdate %in% tempRH$FECHA){
a<-which(tempRH$FECHA==fday)
b<-which(tempRH$FECHA==rdate)
mean(tempRH$TEMP.MIN..Â.C.[a:b], na.rm=TRUE)
} else{NA}
}
Compile$avtemplow <-sapply(date, avtemplow)
#tot average temp
avtemp <- function(rdate){
rdate <- as.Date(rdate)
fday <- (rdate-6)
if(rdate %in% tempRH$FECHA){
a <- which(tempRH$FECHA==fday)
b <- which(tempRH$FECHA==rdate)
c <- sum(tempRH$TEMP.MAX..Â.C.[a:b], na.rm=TRUE)
d <- sum(tempRH$TEMP.MIN..Â.C.[a:b], na.rm=TRUE)
((c+d)/(2*((length(tempRH$TEMP.MAX..Â.C.[a:b]))-(length(which(is.na(tempRH$TEMP.MAX..Â.C.[a:b])==TRUE))))))
} else{NA}
}
Compile$avtemp <- sapply(date, avtemp)
#week max
tempmax<-function(rdate){
rdate<-as.Date(rdate)
if(rdate %in% tempRH$FECHA){
fday<- (rdate-6)
a<-which(tempRH$FECHA==fday)
b<-which(tempRH$FECHA==rdate)
max(tempRH$TEMP.MAX..Â.C.[a:b], na.rm=TRUE)
}else{NA}
}
Compile$tempmax <-sapply(date, tempmax)
#week min
tempmin<-function(rdate){
rdate<-as.Date(rdate)
if(rdate %in% tempRH$FECHA){
fday<- (rdate-6)
a<-which(tempRH$FECHA==fday)
b<-which(tempRH$FECHA==rdate)
min(tempRH$TEMP.MIN..Â.C.[a:b], na.rm=TRUE)
}else{NA}
}
Compile$tempmin <-sapply(date, tempmin)
#greatest difference(heat shock)
tempRH$tempdiff<- tempRH$TEMP.MAX..Â.C.-(tempRH$TEMP.MIN..Â.C.)
tempdiff<-function(rdate){
rdate<-as.Date(rdate)
if(rdate %in% tempRH$FECHA){
fday<- (rdate-6)
a<-which(tempRH$FECHA==fday)
b<-which(tempRH$FECHA==rdate)
max(tempRH$tempdiff[a:b], na.rm=TRUE)
}else{NA}
}
Compile$tempdiff<-sapply(date, tempdiff)
#==============================================================
#Do the same for humidity
avhumhigh<-function(rdate){
rdate<-as.Date(rdate)
if(rdate %in% tempRH$FECHA){
fday<- (rdate-6)
a<-which(tempRH$FECHA==fday)
b<-which(tempRH$FECHA==rdate)
mean(tempRH$HR.MAX....[a:b], na.rm=TRUE)
}else{NA}
}
date<-Compile$date
Compile$avhumhigh <-sapply(date, avhumhigh)
#Make function to calculate avg low temperature of week.
avhumlow<-function(rdate){
rdate<-as.Date(rdate)
if(rdate %in% tempRH$FECHA){
fday<- (rdate-6)
a<-which(tempRH$FECHA==fday)
b<-which(tempRH$FECHA==rdate)
mean(tempRH$HR.MIN....[a:b], na.rm=TRUE)
}else{NA}
}
Compile$avhumlow <-sapply(date, avhumlow)
#tot average temp
avhum <- function(rdate){
rdate <- as.Date(rdate)
if(rdate %in% tempRH$FECHA){
fday <- (rdate-6)
a <- which(tempRH$FECHA==fday)
b <- which(tempRH$FECHA==rdate)
c <- sum(tempRH$HR.MAX....[a:b], na.rm=TRUE)
d <- sum(tempRH$HR.MIN....[a:b], na.rm=TRUE)
((c+d)/(2*((length(tempRH$HR.MAX....[a:b]))-(length(which(is.na(tempRH$HR.MAX....[a:b])==TRUE))))))
}else{NA}
}
Compile$avhum <- sapply(date, avhum)
#week max
hummax<-function(rdate){
rdate<-as.Date(rdate)
if(rdate %in% tempRH$FECHA){
fday<- (rdate-6)
a<-which(tempRH$FECHA==fday)
b<-which(tempRH$FECHA==rdate)
max(tempRH$HR.MAX....[a:b], na.rm=TRUE)
}else{NA}
}
Compile$hummax <-sapply(date, hummax)
#week min
hummin<-function(rdate){
rdate<-as.Date(rdate)
if(rdate %in% tempRH$FECHA){
fday<- (rdate-6)
a<-which(tempRH$FECHA==fday)
b<-which(tempRH$FECHA==rdate)
min(tempRH$HR.MIN....[a:b], na.rm=TRUE)
}else{NA}
}
Compile$hummin <-sapply(date, hummin)
#greatest difference(humidity shock?  I figured we had it for temp so why not)
tempRH$humdiff<- (tempRH$HR.MAX....)-(tempRH$HR.MIN....)
humdiff<-function(rdate){
rdate<-as.Date(rdate)
if(rdate %in% tempRH$FECHA){
fday<- (rdate-6)
a<-which(tempRH$FECHA==fday)
b<-which(tempRH$FECHA==rdate)
max(tempRH$humdiff[a:b], na.rm=TRUE)
}else{NA}
}
Compile$humdiff<-sapply(date, humdiff)
##############################################
#after initial analysis we need to combine the data from the first two or three weeks.
#
resegmentcompile<-function(segl){
maxn<-max(Compile$week)/segl
maxn<-round(maxn, digits=0)
topin<-(segl*c(1:maxn))
lowin<-topin-(segl-1)
ids<-unique(Compile$idnum)
blanki <- (1:(maxn*max(ids))*0)
Compilesegl <- data.frame(blanki,0,0)
Compilesegl <- rename(Compile, replace = c("blank"="idnum", "X0"="eggs","X0.1"="hatch"))
for(i in 1:max(ids)){
observationsi<-which(Compile$idnum==i)
for(j in 1:maxn){
Compilesegl$eggs[maxn*(i-1)+j]<-sum(Compile$eggs[topin[j]:lowin[j]], na.rm=TRUE)
Compilesegl$hatch[maxn*(i-1)+j]<-sum(Compile$hatch[topin[j]:lowin[j]], na.rm=TRUE)
Compilesegl$idnum[maxn*(i-1)+j]<-Compile$idnum[topin[j]]
}
}
Compilesegl
}
names(Compile)
View(Compile)
resegmentcompile<-function(segl){
maxn<-max(Compile$week)/segl
maxn<-round(maxn, digits=0)
topin<-(segl*c(1:maxn))
lowin<-topin-(segl-1)
ids<-unique(Compile$idnum)
blanki <- (1:(maxn*max(ids))*NA)
Compilesegl <- data.frame(blanki, 0, NA,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
Compilesegl <- rename(Compile, replace = c("blank"="idnum", "X0"="eggs","X0.1"="hatch",
"X.2"="period")
for(i in 1:max(ids)){
observationsi<-which(Compile$idnum==i)
obtablei<-Compile[observationsi]
for(j in 1:maxn){
Compilesegl$eggs[maxn*(i-1)+j] <- sum(Compile$eggs[topin[j]:lowin[j]], na.rm=TRUE)
Compilesegl$hatch[maxn*(i-1)+j] <- sum(Compile$hatch[topin[j]:lowin[j]], na.rm=TRUE)
Compilesegl$idnum[maxn*(i-1)+j] <- Compile$idnum[topin[j]]
Compilesegl$period[maxn*(i-1)+j] <- j
Compilesegl$infected[maxn*(i-1)+j] <- Compile$infected[lowin[j]]
Compilesegl$alive[maxn*(i-1)+j] <- Compile$alive[lowin[j]]
Compilesegl$mouse[maxn*(i-1)+j] <- Compile$mouse[lowin[j]]
Compilesegl$trial[maxn*(i-1)+j] <- Compile$trial[lowin[j]]
Compilesegl$avtemp[maxn*(i-1)+j] <-mean(Compile$avtemp[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$avtemphigh[maxn*(i-1)+j]<-mean(obtabli$avtemphigh[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$avtemplow[maxn*(i-1)+j]<-mean(obtabli$avtemplow[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$tempmax[maxn*(i-1)+j]<-max(obtabli$tempmax[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$tempmin[maxn*(i-1)+j]<-min(obtabli$tempmin[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$tempdiff[maxn*(i-1)+j]<-max(obtabli$tempdiff[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$avhum[maxn*(i-1)+j]<-mean(Compile$avhum[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$avhumhigh[maxn*(i-1)+j]<-mean(Compile$avhumhigh[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$avhumlow[maxn*(i-1)+j]<-mean(Compile$avhumlow[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$hummax[maxn*(i-1)+j]<-max(obtabli$hummax[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$hummin[maxn*(i-1)+j]<-min(obtabli$hummin[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$humdiff[maxn*(i-1)+j]<-max(obtabli$humdiff[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
}
}
Compilesegl
}
resegmentcompile<-function(segl){
maxn<-max(Compile$week)/segl
maxn<-round(maxn, digits=0)
topin<-(segl*c(1:maxn))
lowin<-topin-(segl-1)
ids<-unique(Compile$idnum)
blanki <- (1:(maxn*max(ids))*NA)
Compilesegl <- data.frame(blanki, 0, NA,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
Compilesegl <- rename(Compile, replace = c("blank"="idnum", "X0"="eggs","X0.1"="hatch",
"X.2"="period"))
for(i in 1:max(ids)){
observationsi<-which(Compile$idnum==i)
obtablei<-Compile[observationsi]
for(j in 1:maxn){
Compilesegl$eggs[maxn*(i-1)+j] <- sum(Compile$eggs[topin[j]:lowin[j]], na.rm=TRUE)
Compilesegl$hatch[maxn*(i-1)+j] <- sum(Compile$hatch[topin[j]:lowin[j]], na.rm=TRUE)
Compilesegl$idnum[maxn*(i-1)+j] <- Compile$idnum[topin[j]]
Compilesegl$period[maxn*(i-1)+j] <- j
Compilesegl$infected[maxn*(i-1)+j] <- Compile$infected[lowin[j]]
Compilesegl$alive[maxn*(i-1)+j] <- Compile$alive[lowin[j]]
Compilesegl$mouse[maxn*(i-1)+j] <- Compile$mouse[lowin[j]]
Compilesegl$trial[maxn*(i-1)+j] <- Compile$trial[lowin[j]]
Compilesegl$avtemp[maxn*(i-1)+j] <-mean(Compile$avtemp[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$avtemphigh[maxn*(i-1)+j]<-mean(obtabli$avtemphigh[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$avtemplow[maxn*(i-1)+j]<-mean(obtabli$avtemplow[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$tempmax[maxn*(i-1)+j]<-max(obtabli$tempmax[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$tempmin[maxn*(i-1)+j]<-min(obtabli$tempmin[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$tempdiff[maxn*(i-1)+j]<-max(obtabli$tempdiff[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$avhum[maxn*(i-1)+j]<-mean(Compile$avhum[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$avhumhigh[maxn*(i-1)+j]<-mean(Compile$avhumhigh[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$avhumlow[maxn*(i-1)+j]<-mean(Compile$avhumlow[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$hummax[maxn*(i-1)+j]<-max(obtabli$hummax[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$hummin[maxn*(i-1)+j]<-min(obtabli$hummin[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$humdiff[maxn*(i-1)+j]<-max(obtabli$humdiff[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
}
}
Compilesegl
}
resegmentcompile(3)
blanki <- (1:(maxn*max(ids))*NA)
resegmentcompile<-function(segl){
maxn<-max(Compile$week)/segl
maxn<-round(maxn, digits=0)
topin<-(segl*c(1:maxn))
lowin<-topin-(segl-1)
ids<-unique(Compile$idnum)
blanki <- (1:(maxn*max(ids))*NA)
Compilesegl <- data.frame(blanki, 0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
Compilesegl <- rename(Compile, replace = c("blank"="idnum", "X0"="eggs","X0.1"="hatch",
"X0.2"="period"))
for(i in 1:max(ids)){
observationsi<-which(Compile$idnum==i)
obtablei<-Compile[observationsi]
for(j in 1:maxn){
Compilesegl$eggs[maxn*(i-1)+j] <- sum(Compile$eggs[topin[j]:lowin[j]], na.rm=TRUE)
Compilesegl$hatch[maxn*(i-1)+j] <- sum(Compile$hatch[topin[j]:lowin[j]], na.rm=TRUE)
Compilesegl$idnum[maxn*(i-1)+j] <- Compile$idnum[topin[j]]
Compilesegl$period[maxn*(i-1)+j] <- j
Compilesegl$infected[maxn*(i-1)+j] <- Compile$infected[lowin[j]]
Compilesegl$alive[maxn*(i-1)+j] <- Compile$alive[lowin[j]]
Compilesegl$mouse[maxn*(i-1)+j] <- Compile$mouse[lowin[j]]
Compilesegl$trial[maxn*(i-1)+j] <- Compile$trial[lowin[j]]
Compilesegl$avtemp[maxn*(i-1)+j] <-mean(Compile$avtemp[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$avtemphigh[maxn*(i-1)+j]<-mean(obtabli$avtemphigh[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$avtemplow[maxn*(i-1)+j]<-mean(obtabli$avtemplow[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$tempmax[maxn*(i-1)+j]<-max(obtabli$tempmax[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$tempmin[maxn*(i-1)+j]<-min(obtabli$tempmin[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$tempdiff[maxn*(i-1)+j]<-max(obtabli$tempdiff[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$avhum[maxn*(i-1)+j]<-mean(Compile$avhum[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$avhumhigh[maxn*(i-1)+j]<-mean(Compile$avhumhigh[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$avhumlow[maxn*(i-1)+j]<-mean(Compile$avhumlow[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$hummax[maxn*(i-1)+j]<-max(obtabli$hummax[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$hummin[maxn*(i-1)+j]<-min(obtabli$hummin[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
Compilesegl$humdiff[maxn*(i-1)+j]<-max(obtabli$humdiff[((segl*j)-segl+1):(segl*j)], na.rm=TRUE)
}
}
Compilesegl
}
resegmentcompile(3)
install.packages("doBy")
library(doBy)
??doBy
176
dim(Compile)
